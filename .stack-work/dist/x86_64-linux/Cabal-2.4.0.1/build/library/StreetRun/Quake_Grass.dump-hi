
==================== FINAL INTERFACE ====================
2019-04-26 14:29:02.777094183 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Quake_Grass 8064
  interface hash: 7839ffa3102d4990580c7ae44e67c4cc
  ABI hash: 5769fbd4058b117d8edf4d5fb329570b
  export-list hash: 7f02c80c1b0edff6e6cef90cfed2f356
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Quake_Grass.applyQuakeToGrass
module dependencies: StreetRun.CFL StreetRun.Quake StreetRun.Step
                     StreetRun.Types
package dependencies: aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0
                      attoparsec-0.13.2.2 base-4.12.0.0 base-compat-0.10.5 binary-0.8.6.0
                      bytestring-0.10.8.2 conduit-1.3.1.1 containers-0.6.0.1
                      deepseq-1.4.4.0 dlist-0.8.0.6 exceptions-0.10.1 ghc-boot-th-8.6.4
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 libyaml-0.1.1.0 mtl-2.2.2
                      primitive-0.6.4.0 random-1.1 resourcet-1.2.2 scientific-0.3.6.2
                      stm-2.5.0.0 tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      time-1.8.0.2 time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      unliftio-core-0.1.2.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.2 yaml-0.11.0.0
orphans: stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.2.0:Data.Aeson.Types.Internal
                         animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  StreetRun.CFL 22aaa7e917fe6023bc75b650c540e607
  exports: f389828e267831208731f8c3eb015474
import  -/  StreetRun.Quake b6a124c4030dd8107fa49ff2cc71f4ef
  exports: 1b20d2e9b9ea83d46fe981dd6ab66f9e
  Quake 1a9c7230fc5b6045929623cb4b581a74
  applyQuake 783eb91b6f759b985e1ba0f7ec57d9d6
import  -/  StreetRun.Step 290ae331db595dd4cf6d5e1e70227106
  exports: 719fef8fe6a2dea83d42318f70df48fb
import  -/  StreetRun.Types fe57a12901e3ac69e610bc5ec1ffe588
  exports: 68eec0a854069d6ebcc9ba499b980fc6
f7121c5be87290354c34a8ccd754bda9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Quake_Grass.$trModule3
                   StreetRun.Quake_Grass.$trModule1) -}
a3f12d13f015eeaf9b9f2019a6399480
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Quake_Grass.$trModule2) -}
9df13c759f94ea3319fd86c34175fa28
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Quake_Grass"#) -}
8fe6e1499931fbf8fcc382298924946a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Quake_Grass.$trModule4) -}
99297eb272ad32380b5a2e986232ebdb
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
67cb2d1c20bfb2e7c0308c543cd6ddf7
  $wapplyQuakeToGrass ::
    StreetRun.Quake.Quake
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> (# GHC.Types.Int, GHC.Types.Int #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U(U)><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (w :: StreetRun.Quake.Quake)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int) ->
                 let {
                   ds :: (GHC.Types.Int, GHC.Types.Int)
                   = case w of wild {
                       StreetRun.Quake.Quake'Progress p
                       -> (case p `cast`
                                (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                           case GHC.Float.$w$cproperFraction1
                                  @ GHC.Types.Int
                                  GHC.Real.$fIntegralInt
                                  (GHC.Prim.timesFloat#
                                     (GHC.Prim.cosFloat#
                                        (GHC.Prim.timesFloat#
                                           (GHC.Prim.timesFloat#
                                              (GHC.Prim.timesFloat# x 4.0#)
                                              3.1415927#)
                                           5.0#))
                                     3.0#) of ww3 { (#,#) ww4 ww5 ->
                           ww4 } },
                           case p `cast`
                                (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                           case GHC.Float.$w$cproperFraction1
                                  @ GHC.Types.Int
                                  GHC.Real.$fIntegralInt
                                  (GHC.Prim.timesFloat#
                                     (GHC.Prim.sinFloat#
                                        (GHC.Prim.timesFloat#
                                           (GHC.Prim.timesFloat#
                                              (GHC.Prim.plusFloat# x x)
                                              3.1415927#)
                                           5.0#))
                                     3.0#) of ww3 { (#,#) ww4 ww5 ->
                           ww4 } })
                       StreetRun.Quake.Quake'Dormant ipv
                       -> StreetRun.Quake_Grass.applyQuakeToGrass1 }
                 } in
                 (# case ww of wild { GHC.Types.I# x ->
                    case ds of wild1 { (,) x' y' ->
                    case x' of wild2 { GHC.Types.I# y ->
                    GHC.Types.I# (GHC.Prim.+# x y) } } },
                    case ww1 of wild { GHC.Types.I# x ->
                    case ds of wild1 { (,) x' y' ->
                    case y' of wild2 { GHC.Types.I# y ->
                    GHC.Types.I# (GHC.Prim.+# x y) } } } #)) -}
746ef2a7bfdacb0ce16c6331ddfdf993
  applyQuakeToGrass ::
    StreetRun.Quake.Quake
    -> (GHC.Types.Int, GHC.Types.Int) -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 2, Strictness: <L,1*U><S,1*U(1*U(U),1*U(U))>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Quake.Quake)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case StreetRun.Quake_Grass.$wapplyQuakeToGrass
                        w
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
fcf755600393bc1c9d05b17c32d8872e
  applyQuakeToGrass1 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((StreetRun.Quake.applyQuake1,
                  StreetRun.Quake.applyQuake1)) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

