
==================== FINAL INTERFACE ====================
2019-04-26 14:29:09.617256575 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Bolt 8064
  interface hash: 3a6a6437fd7af74ecfeba44459518190
  ABI hash: 847cdad2d0e77170761725924ee19245
  export-list hash: a90e9a51032da22fcea9f9d88198693f
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e9979ed0ba295133ef8188aa5e696ffc
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Bolt.deathTransition
  StreetRun.Bolt.pauseToPlay
  StreetRun.Bolt.playToPause
  StreetRun.Bolt.playTransition
  StreetRun.Bolt.titleTransition
  StreetRun.Bolt.toScene'
module dependencies: StreetRun.Assets StreetRun.Assets_1
                     StreetRun.Assets_2 StreetRun.Audio StreetRun.CFL StreetRun.Camera
                     StreetRun.Common StreetRun.Config StreetRun.Death StreetRun.Font
                     StreetRun.Font_functions StreetRun.GameOver StreetRun.HUD
                     StreetRun.Hurdle StreetRun.Hurdle_1 StreetRun.Input StreetRun.Load
                     StreetRun.Out StreetRun.Out_func StreetRun.Pause StreetRun.Physics
                     StreetRun.Picture StreetRun.Play StreetRun.Quake
                     StreetRun.Quake_BackStreet StreetRun.Quake_Building
                     StreetRun.Quake_Grass StreetRun.Quake_Street StreetRun.Renderer
                     StreetRun.Renderer_func_1 StreetRun.Renderer_func_2
                     StreetRun.Runner StreetRun.Runner_func_1 StreetRun.Runner_func_2
                     StreetRun.SDLLayer StreetRun.Scenario StreetRun.Scene StreetRun.Sfx
                     StreetRun.Shaky StreetRun.Snag StreetRun.Sound_effects
                     StreetRun.State StreetRun.Step StreetRun.Tag StreetRun.Tag_func
                     StreetRun.Title StreetRun.Types StreetRun.Work StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  key-state-0.2.0:KeyState f505d200ccd373546afa68666240df7e
import  -/  lens-4.17:Control.Lens 02c38743366e4d3d260b71bddfddea13
import  -/  lens-4.17:Control.Lens.Getter 18b0523ecb5ed8cc7fa826ffd942da08
import  -/  lens-4.17:Control.Lens.Setter 7961fe073f63bb6246bee7094d4bca17
import  -/  mtl-2.2.2:Control.Monad.Reader d5c3a33f1c95bb71f4ae02f87a7048ff
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  StreetRun.Audio 91f095936fecbb9f076d29d5950c869b
  exports: 778206d5370172e5e0ea84450aec5c45
  Audio 4ba14999075ad68ce5a755a8d89bcb9d
  lowerGameMusic 12f50cdb25ac2bac0696f57e2627b980
  playDeathSfx 829e9edd44e6cac6c59949c9d9823bef
  playGameMusic 5c3c71aa14d4fabb7daecb43fc014bc3
  raiseGameMusic 60417c97f7e96ec559d2de9359a6b20b
  stopGameMusic 233ebc6044663aac0ae7c219adbbc183
import  -/  StreetRun.CFL 22aaa7e917fe6023bc75b650c540e607
  exports: f389828e267831208731f8c3eb015474
import  -/  StreetRun.Camera 15520c15c72428459c71d35d468598c8
  exports: 445eb368813d35f6641c1446797753f7
  initCamera d5f1066db3772b85d485fcdd4aefe8c0
import  -/  StreetRun.Config b599dd5c3a0bd39090f183027c337ded
  exports: a84af2eb49502a4ece92fede76199115
import  -/  StreetRun.Death 3736750ea403d6c2a935ce3e3e1829bd
  exports: eeb974f5063b6e179132d6dcd1281d6b
import  -/  StreetRun.GameOver 12187b3087d1b20ccc00d910b5341a41
  exports: ce700aed10886dc3750aae9e41b16e0b
import  -/  StreetRun.Input 2b2882bb9ccf0deac02d72ccd2af9474
  exports: 794b8afcff1485016b9c41551ca5bab1
import  -/  StreetRun.Load b854b61e5394a1e0d9cd4b9313a268b0
  exports: 4cddd7fe752b7b923c34c3b71e404029
import  -/  StreetRun.Pause c836411e7acfbc1ef02762dd9329fa6a
  exports: 3c82e1e959378907eb3b17aa2be22620
import  -/  StreetRun.Picture b3a434655916c9bd40f5e83b30c22973
  exports: 3a912206f39fec45a542e7a9b7b90546
  CameraControl 4fbff540ba209f3d818863d970cdf797
  adjustCamera c6e59501d611d0a6691f66ef84fa7a5e
import  -/  StreetRun.Play 5e1759185369f3a2fb6cea30997a29a1
  exports: a72549fdc40fd458e99f01bb54a263bc
import  -/  StreetRun.Renderer 0519d22b921b8437012069e63a6f4fa6
  exports: 3ce23641af82250faf4b4afd515774b7
import  -/  StreetRun.Renderer_func_1 a9aeb84e666161fb4390884165deb075
  exports: 6a0ad2bf2ffcb5fd6ca93a687f153110
import  -/  StreetRun.Renderer_func_2 8e1829777a16c2ecd350a0a2077893e3
  exports: e72c1bc9f19fb36af370b60f395645dd
import  -/  StreetRun.Scenario 354a54748ba84a3c008f8f16b2acd94c
  Scene 627d7fee21737fffbaa905616e7162fd
import  -/  StreetRun.Scene 77553ca4972702fc9ed9a930428c3b84
  exports: e5cf8e79f9eac931695eddae8a179fc0
import  -/  StreetRun.Shaky bf6450958c5e6061ad725a6a72da0954
  exports: 39697ca0506edb964ff62bb59aba967b
import  -/  StreetRun.Sound_effects d6b1e92985bd34983de20a110cbdad5e
  exports: eb4fe4175b79b0dda794b44c2a2faa67
import  -/  StreetRun.State 879bfe0721b41cea3eaddf89be35a0d2
  exports: 2ad9459b3bdc4835614d220ed9e341f2
  $sel:vNextScene:Vars 94cac8e669b0992d9fdeb1c0cad361f9
  Vars 94cac8e669b0992d9fdeb1c0cad361f9
import  -/  StreetRun.Tag 478c1a1eaec7462402e2b3261537fcf9
  exports: 6ff61bf1ef79bf9f2647f863adb633fe
import  -/  StreetRun.Tag_func 159a50a2215140f4934819751a0cd220
  exports: fdd42e8f6ce9b2005464c764ab69e99f
  HasTitleVars 8a5ef6bd9652a97c580bdda9c0818595
  initTitleVars e1f971ff3f2b26c1d9ce79179b157d21
  titleVars b336c6d8dd7af5f49b808333f852cb3e
import  -/  StreetRun.Title 427b9b65804f28d35ec4680f154ed57b
  exports: 675ba76475a084728ea77f5f00720288
import  -/  StreetRun.Work 84c49625e5300d184b6b74d71a119d1f
  exports: be18f47a77094179ee18b27ca088c03e
  $sel:pvUpcomingObstacles:PlayVars 454bac6bacb8c3a13959acb3712742b4
  PlayVars 12c1c425261e618b7431ebe375200883
import  -/  StreetRun.Work_func e74f2daf9d4710767ad8c2ada174399d
  exports: c79cba614ebcff5946e13d50725530aa
  HasPlayVars 9cbc89508257ef44e1f754bf3878ef7f
  initPlayVars 433e189d7b7f8f1cc59a9c7750ea4b83
  playVars a16e4bec16bd99ad3c380a2d9a9d4a2c
90a89ce3c7a4e8d3fef4eda51f838147
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Bolt.$trModule3
                   StreetRun.Bolt.$trModule1) -}
b4f00002148c01ae383717c576816f28
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Bolt.$trModule2) -}
0851129def41eba0e3f1ee6fef98fa1a
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Bolt"#) -}
6f154215a72f0790d2139c7b456a21d3
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Bolt.$trModule4) -}
5d978c233894e2672b4de53c312894ef
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
3b89d5b3ec1f20b16c6bdfe622c09402
  $wplayTransition ::
    StreetRun.Work_func.HasPlayVars a =>
    (forall a1 b. m a1 -> (a1 -> m b) -> m b)
    -> (forall a1 b. m a1 -> m b -> m b)
    -> (forall a1. a1 -> m a1)
    -> m a
    -> (forall a1. (a -> (a1, a)) -> m a1)
    -> StreetRun.Audio.Audio m => m ()
  {- Arity: 7,
     Strictness: <L,C(C1(C(U)))><C(C(S)),C(C1(U))><L,C(C1(U))><L,C(U)><L,U><L,C(U)><L,1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ m :: * -> *
                   (w :: StreetRun.Work_func.HasPlayVars a)
                   (ww :: forall a1 b. m a1 -> (a1 -> m b) -> m b)
                   (ww1 :: forall a1 b. m a1 -> m b -> m b)
                   (ww2 :: forall a1. a1 -> m a1)
                   (ww3 :: m a)
                   (ww4 :: forall a1. (a -> (a1, a)) -> m a1)
                   (w1 :: StreetRun.Audio.Audio m) ->
                 let {
                   lvl :: m () = StreetRun.Audio.playGameMusic @ m w1
                 } in
                 ww
                   @ StreetRun.Work.PlayVars
                   @ ()
                   (let {
                      w2 :: a -> Data.Functor.Const.Const StreetRun.Work.PlayVars a
                      = w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <a>_N)
                          @ (Data.Functor.Const.Const StreetRun.Work.PlayVars)
                          (Data.Functor.Const.$fFunctorConst @ StreetRun.Work.PlayVars)
                          StreetRun.Bolt.playTransition1
                            `cast`
                          (<StreetRun.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Work.PlayVars>_R
                                         <StreetRun.Work.PlayVars>_P))
                    } in
                    ww
                      @ a
                      @ StreetRun.Work.PlayVars
                      ww3
                      (\ (s1 :: a) ->
                       ww2
                         @ StreetRun.Work.PlayVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Work.PlayVars>_R <a>_P)))
                   (\ (ds :: StreetRun.Work.PlayVars) ->
                    case ds of wild { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                    ww1
                      @ ()
                      @ ()
                      (let {
                         f :: a -> Data.Functor.Identity.Identity a
                         = let {
                             b1 :: StreetRun.Work.PlayVars
                             = StreetRun.Work.PlayVars
                                 StreetRun.Work_func.initPlayVars8
                                   `cast`
                                 (Sym (StreetRun.Types.N:Score[0]))
                                 StreetRun.Work_func.initPlayVars7
                                   `cast`
                                 (Sym (StreetRun.Types.N:Stocks[0]))
                                 StreetRun.Work_func.initPlayVars6
                                   `cast`
                                 (Sym (StreetRun.Types.N:Percent[0]))
                                 StreetRun.Work_func.initPlayVars2
                                   `cast`
                                 (Sym (StreetRun.Types.N:Seconds[0]))
                                 StreetRun.Work_func.initPlayVars5
                                 GHC.Types.True
                                 StreetRun.Work_func.initPlayVars4
                                 StreetRun.Work_func.initPlayVars3
                                 StreetRun.Work_func.initPlayVars1
                                 StreetRun.Work_func.initPlayVars5
                                 StreetRun.Work_func.initPlayVars2
                                   `cast`
                                 (Sym (StreetRun.Types.N:Distance[0]))
                                 StreetRun.Work_func.initPlayVars2
                                   `cast`
                                 (Sym (StreetRun.Types.N:Distance[0]))
                                 StreetRun.Work_func.initPlayVars2
                                   `cast`
                                 (Sym (StreetRun.Types.N:Distance[0]))
                                 StreetRun.Work_func.initPlayVars2
                                   `cast`
                                 (Sym (StreetRun.Types.N:Distance[0]))
                                 (GHC.Types.[] @ StreetRun.Hurdle.ObstacleState)
                                 ds16
                           } in
                           w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <a>_N)
                             @ Data.Functor.Identity.Identity
                             Data.Functor.Identity.$fFunctorIdentity
                             (\ (ds17 :: StreetRun.Work.PlayVars) -> b1)
                               `cast`
                             (<StreetRun.Work.PlayVars>_R
                              ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                            <StreetRun.Work.PlayVars>_R))
                       } in
                       ww4
                         @ ()
                         (\ (s1 :: a) ->
                          (GHC.Tuple.(),
                           (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <a>_R))))
                      lvl })) -}
47869c11d3abcf86b6b17112661cd754
  $wtitleTransition ::
    StreetRun.Tag_func.HasTitleVars a =>
    (forall a1 b. m a1 -> m b -> m b)
    -> (forall a1. (a -> (a1, a)) -> m a1)
    -> StreetRun.Picture.CameraControl m => m ()
  {- Arity: 4,
     Strictness: <L,1*C1(C1(C(U)))><C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,1*U(A,1*C1(U))>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ m :: * -> *
                   (w :: StreetRun.Tag_func.HasTitleVars a)
                   (ww :: forall a1 b. m a1 -> m b -> m b)
                   (ww1 :: forall a1. (a -> (a1, a)) -> m a1)
                   (w1 :: StreetRun.Picture.CameraControl m) ->
                 ww
                   @ ()
                   @ ()
                   (StreetRun.Picture.adjustCamera @ m w1 StreetRun.Camera.initCamera)
                   (let {
                      f :: a -> Data.Functor.Identity.Identity a
                      = w `cast` (StreetRun.Tag_func.N:HasTitleVars[0] <a>_N)
                          @ Data.Functor.Identity.Identity
                          Data.Functor.Identity.$fFunctorIdentity
                          StreetRun.Bolt.titleTransition1
                            `cast`
                          (<StreetRun.Tag.TitleVars>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <StreetRun.Tag.TitleVars>_R))
                    } in
                    ww1
                      @ ()
                      (\ (s1 :: a) ->
                       (GHC.Tuple.(),
                        (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <a>_R))))) -}
dbb1a939526302749de34311a2bfd6fe
  deathTransition :: StreetRun.Audio.Audio m => m ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(LLC(C(S))LL)LLLLLLLLLLLLLLL),1*U(1*U(A,A,1*C1(C1(U)),A,A),A,U,A,A,A,A,A,A,A,A,U,A,A,A,A)>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> * (w :: StreetRun.Audio.Audio m) ->
                 case w of ww { StreetRun.Audio.C:Audio ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ->
                 case ww1 of ww17 { GHC.Base.C:Monad ww18 ww19 ww20 ww21 ww22 ->
                 ww20 @ () @ () ww3 ww12 } }) -}
d60ee043d8d18a214f565dc9324f021f
  pauseToPlay :: StreetRun.Audio.Audio m => m ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLLS),U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,U)>,
     Unfolding: InlineRule (0, True, True)
                StreetRun.Audio.raiseGameMusic -}
9529a28febe4872b2ce27c9cd8d0b2f8
  playToPause :: StreetRun.Audio.Audio m => m ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLLSL),U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,U,A)>,
     Unfolding: InlineRule (0, True, True)
                StreetRun.Audio.lowerGameMusic -}
be0fef84f1080e53b522e1b81a9cbbf8
  playTransition ::
    (StreetRun.Work_func.HasPlayVars a,
     Control.Monad.State.Class.MonadState a m,
     StreetRun.Audio.Audio m) =>
    m ()
  {- Arity: 3,
     Strictness: <L,C(C1(C(U)))><S(S(LC(C(S))LLL)LLL),1*U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,1*U(A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ m :: * -> *
                   (w :: StreetRun.Work_func.HasPlayVars a)
                   (w1 :: Control.Monad.State.Class.MonadState a m)
                   (w2 :: StreetRun.Audio.Audio m) ->
                 case w1 of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Bolt.$wplayTransition
                   @ a
                   @ m
                   w
                   ww7
                   ww8
                   ww9
                   ww2
                   ww4
                   w2 } }) -}
231eab1ee22a8e20fec3b1b62ca9dbfb
  playTransition1 ::
    StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Work.PlayVars) -> v) -}
b240273b5a4ebcb4e9364a3c99d9a5d0
  titleTransition ::
    (StreetRun.Tag_func.HasTitleVars a,
     Control.Monad.State.Class.MonadState a m,
     StreetRun.Picture.CameraControl m) =>
    m ()
  {- Arity: 3,
     Strictness: <L,1*C1(C1(C(U)))><S(S(LLC(C(S))LL)LLL),1*U(1*U(A,A,1*C1(C1(U)),A,A),A,A,1*C1(U))><L,1*U(A,1*C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ m :: * -> *
                   (w :: StreetRun.Tag_func.HasTitleVars a)
                   (w1 :: Control.Monad.State.Class.MonadState a m)
                   (w2 :: StreetRun.Picture.CameraControl m) ->
                 case w1 of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Bolt.$wtitleTransition @ a @ m w ww8 ww4 w2 } }) -}
04f5bdc2c3845b75380081d74cedd606
  titleTransition1 ::
    StreetRun.Tag.TitleVars -> StreetRun.Tag.TitleVars
  {- Arity: 1, HasNoCafRefs, Strictness: <L,A>m,
     Unfolding: InlineRule (1, True, True)
                (\ (ds :: StreetRun.Tag.TitleVars) ->
                 StreetRun.Tag_func.initTitleVars) -}
e330d74639e2a662564e70387271ecc8
  toScene' ::
    Control.Monad.State.Class.MonadState StreetRun.State.Vars m =>
    StreetRun.Scenario.Scene -> m ()
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLC(S)),1*U(A,A,A,1*C1(U))><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ m :: * -> *
                   ($dMonadState :: Control.Monad.State.Class.MonadState
                                      StreetRun.State.Vars m)
                   (scene :: StreetRun.Scenario.Scene) ->
                 Control.Monad.State.Class.state
                   @ StreetRun.State.Vars
                   @ m
                   $dMonadState
                   @ ()
                   (\ (s1 :: StreetRun.State.Vars) ->
                    (GHC.Tuple.(),
                     case s1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars ds ds1 scene ds3 ds4 ds5 ds6 ds7 }))) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

