
==================== FINAL INTERFACE ====================
2019-04-26 14:29:07.483980357 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Audio 8064
  interface hash: 5fc84a5e29d316699eab625ef724eced
  ABI hash: 91f095936fecbb9f076d29d5950c869b
  export-list hash: 778206d5370172e5e0ea84450aec5c45
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Audio.lowerGameMusic'
  StreetRun.Audio.playBirdSfx'
  StreetRun.Audio.playChunk
  StreetRun.Audio.playDeathSfx'
  StreetRun.Audio.playDuckSfx'
  StreetRun.Audio.playGameMusic'
  StreetRun.Audio.playHurtSfx'
  StreetRun.Audio.playJumpSfx'
  StreetRun.Audio.playLavaSfx'
  StreetRun.Audio.playPointSfx'
  StreetRun.Audio.playQuakeSfx'
  StreetRun.Audio.playRecoverSfx'
  StreetRun.Audio.playRockSfx'
  StreetRun.Audio.playStockSfx'
  StreetRun.Audio.raiseGameMusic'
  StreetRun.Audio.stopGameMusic'
  StreetRun.Audio.Audio{StreetRun.Audio.lowerGameMusic StreetRun.Audio.playBirdSfx StreetRun.Audio.playDeathSfx StreetRun.Audio.playDuckSfx StreetRun.Audio.playGameMusic StreetRun.Audio.playHurtSfx StreetRun.Audio.playJumpSfx StreetRun.Audio.playLavaSfx StreetRun.Audio.playPointSfx StreetRun.Audio.playQuakeSfx StreetRun.Audio.playRecoverSfx StreetRun.Audio.playRockSfx StreetRun.Audio.playStockSfx StreetRun.Audio.raiseGameMusic StreetRun.Audio.stopGameMusic}
module dependencies: StreetRun.Assets StreetRun.Assets_1
                     StreetRun.Assets_2 StreetRun.CFL StreetRun.Camera StreetRun.Config
                     StreetRun.Font StreetRun.Font_functions StreetRun.Hurdle
                     StreetRun.Hurdle_1 StreetRun.Input StreetRun.Physics
                     StreetRun.Runner StreetRun.Runner_func_1 StreetRun.Runner_func_2
                     StreetRun.Scenario StreetRun.Snag StreetRun.Step StreetRun.Types
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Monad.IO.Class e96805f9d79f75be66a0d44eb83064c1
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  exceptions-0.10.1:Control.Monad.Catch d963cd0a953cb33941cbb2c475dcbadb
import  -/  mtl-2.2.2:Control.Monad.Reader d5c3a33f1c95bb71f4ae02f87a7048ff
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 56d676c7504f5007ee5b66906716abcc
import  -/  safe-exceptions-0.1.7.0:Control.Exception.Safe 17ab706d389356fc1b759977e8d17a1a
import  -/  sdl2-2.4.1.0:SDL.Exception 0cafb15a09a5b6eb2db161bf512b3433
import  -/  sdl2-mixer-1.1.0:SDL.Mixer f3936c6b9c7c99434739f7b77f9abfbf
import  -/  StreetRun.Assets 2819f37df7c59b80fb7f3a73042c7f01
  $sel:rBirdSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rDeathSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rDuckSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rGameMusic:Resources 022c06076a805b822172c29a76100922
  $sel:rHurtSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rJumpSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rLavaSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rPointSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rQuakeSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rRecoverSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rRockSfx:Resources 022c06076a805b822172c29a76100922
  $sel:rStockSfx:Resources 022c06076a805b822172c29a76100922
  Resources 022c06076a805b822172c29a76100922
import  -/  StreetRun.Config b599dd5c3a0bd39090f183027c337ded
  exports: a84af2eb49502a4ece92fede76199115
  $sel:cResources:Config 74b4b3d61d611d8fd0371c0c604c9c1b
  Config 74b4b3d61d611d8fd0371c0c604c9c1b
c4a4f7c4687b0a692affab9f4c543a03
  $tc'C:Audio :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15053561534424250479##
                   14612202309072332711##
                   StreetRun.Audio.$trModule
                   StreetRun.Audio.$tc'C:Audio2
                   1#
                   StreetRun.Audio.$tc'C:Audio1) -}
76ba120792c1048d073c83a084cb3bd3
  $tc'C:Audio1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5889207b8b4ef1b21390a37886c11678
  $tc'C:Audio2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Audio.$tc'C:Audio3) -}
cea69b24560b3e79b3d38c4641a454d4
  $tc'C:Audio3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Audio"#) -}
0070b937d23c89ff710bcbd45709da86
  $tcAudio :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2893821966584569723##
                   4487972928356582879##
                   StreetRun.Audio.$trModule
                   StreetRun.Audio.$tcAudio2
                   0#
                   StreetRun.Audio.$tcAudio1) -}
ed62769f57e51142b737244a5a07f0ad
  $tcAudio1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
7093b4f7d991fbf42eae356e03d48ce5
  $tcAudio2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Audio.$tcAudio3) -}
84b3f58756fa144172f4c424f93f8f2a
  $tcAudio3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Audio"#) -}
988c4dbae6eaa647b1f3e3b0a338e2d7
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Audio.$trModule3
                   StreetRun.Audio.$trModule1) -}
eda8d75690939ee676ca84bd60d5255b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Audio.$trModule2) -}
aa6bce53729f2a1ed919941d8e9efd3b
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Audio"#) -}
c498ee49cbbe93bbea26f04ad9d373c2
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Audio.$trModule4) -}
eb1db1a2de2ee80b0b54ca7117e3e02f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
82ed298477003915b93cb285cab2ff42
  $wplayChunk ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m,
     Control.Monad.Catch.MonadThrow m) =>
    (forall e a.
     GHC.Exception.Type.Exception e =>
     m a -> (e -> m a) -> m a)
    -> (StreetRun.Assets.Resources -> SDL.Mixer.Chunk) -> m ()
  {- Arity: 5,
     Strictness: <L,U(1*U(A,1*C1(C1(U)),A,1*C1(U),A),A,A,1*C1(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,U(A,C(C1(U)))><C(C(C(S))),1*C1(C1(C1(U)))><L,C(U)>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (w :: Control.Monad.Reader.Class.MonadReader
                           StreetRun.Config.Config m)
                   (w1 :: Control.Monad.IO.Class.MonadIO m)
                   (ww :: Control.Monad.Catch.MonadThrow m)
                   (ww1 :: forall e a.
                           GHC.Exception.Type.Exception e =>
                           m a -> (e -> m a) -> m a)
                   (w2 :: StreetRun.Assets.Resources -> SDL.Mixer.Chunk) ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.Reader.Class.$p1MonadReader
                       @ StreetRun.Config.Config
                       @ m
                       w
                 } in
                 let {
                   lvl :: m () = GHC.Base.return @ m $dMonad @ () GHC.Tuple.()
                 } in
                 ww1
                   @ SDL.Exception.SDLException
                   @ ()
                   SDL.Exception.$fExceptionSDLException
                   (GHC.Base.>>=
                      @ m
                      $dMonad
                      @ SDL.Mixer.Chunk
                      @ ()
                      (Control.Monad.Reader.Class.reader
                         @ StreetRun.Config.Config
                         @ m
                         w
                         @ SDL.Mixer.Chunk
                         (\ (x :: StreetRun.Config.Config) ->
                          w2 (StreetRun.Config.$sel:cResources:Config x)))
                      (SDL.Mixer.play @ m w1))
                   (\ (e1 :: SDL.Exception.SDLException) ->
                    case SDL.Exception.$fExceptionSDLException_$ctoException
                           e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ GHC.IO.Exception.SomeAsyncException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild1 {
                      GHC.Types.False -> lvl
                      GHC.Types.True
                      -> case e3
                                `cast`
                              (UnsafeCo representational e2 GHC.IO.Exception.SomeAsyncException) of wild2 { GHC.IO.Exception.SomeAsyncException e4 $dException ds ->
                         Control.Monad.Catch.throwM
                           @ m
                           ww
                           @ SDL.Exception.SDLException
                           @ ()
                           SDL.Exception.$fExceptionSDLException
                           e1 } } })) -}
8568abc9d059f2c8cebcd1e4ee4a0ac9
  $wplayGameMusic' ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. (StreetRun.Config.Config -> a) -> m a)
    -> Control.Monad.IO.Class.MonadIO m => m ()
  {- Arity: 3,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),C(U))>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. (StreetRun.Config.Config -> a) -> m a)
                   (w :: Control.Monad.IO.Class.MonadIO m) ->
                 ww
                   @ SDL.Mixer.Music
                   @ ()
                   (ww1 @ SDL.Mixer.Music StreetRun.Audio.playGameMusic'1)
                   (\ (w2 :: SDL.Mixer.Music) ->
                    case w of ww2 { Control.Monad.IO.Class.C:MonadIO ww3 ww4 ->
                    case ww3 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                    SDL.Mixer.$wplayMusic
                      @ m
                      ww7
                      ww8
                      ww9
                      ww4
                      SDL.Mixer.$bForever1
                        `cast`
                      (Sym (Foreign.C.Types.N:CInt[0]) ; Sym (SDL.Mixer.N:Times[0]))
                      w2 } })) -}
4ba14999075ad68ce5a755a8d89bcb9d
  class GHC.Base.Monad m => Audio (m :: * -> *) where
    playGameMusic :: m ()
    stopGameMusic :: m ()
    playJumpSfx :: m ()
    playDuckSfx :: m ()
    playPointSfx :: m ()
    playBirdSfx :: m ()
    playHurtSfx :: m ()
    playLavaSfx :: m ()
    playRockSfx :: m ()
    playQuakeSfx :: m ()
    playDeathSfx :: m ()
    playRecoverSfx :: m ()
    playStockSfx :: m ()
    lowerGameMusic :: m ()
    raiseGameMusic :: m ()
    {-# MINIMAL playGameMusic, stopGameMusic, playJumpSfx, playDuckSfx,
                playPointSfx, playBirdSfx, playHurtSfx, playLavaSfx, playRockSfx,
                playQuakeSfx, playDeathSfx, playRecoverSfx, playStockSfx,
                lowerGameMusic, raiseGameMusic #-}
daba87d5a2dc971bab05c59e42936cc3
  lowerGameMusic' :: Control.Monad.IO.Class.MonadIO m => m ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S(S(LC(C(S)))LLLLL)LLLL)L),1*U(1*U(1*U(1*U(A,1*C1(C1(U))),A,A,A,A,A),A,A,A,A),1*C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> * ($dMonadIO :: Control.Monad.IO.Class.MonadIO m) ->
                 case $dMonadIO of ww { Control.Monad.IO.Class.C:MonadIO ww1 ww2 ->
                 case ww1 of ww3 { GHC.Base.C:Monad ww4 ww5 ww6 ww7 ww8 ->
                 case ww4 of ww9 { GHC.Base.C:Applicative ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww10 of ww16 { GHC.Base.C:Functor ww17 ww18 ->
                 SDL.Mixer.$wsetMusicVolume
                   @ m
                   ww18
                   ww2
                   StreetRun.Audio.lowerGameMusic'1 } } } }) -}
d18810f856df865ddca08705c44022a5
  lowerGameMusic'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
7e069ed01a38bdb4281d54e1f9df9bca
  playBirdSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rBirdSfx:Resources) -}
157f44da59f62494e95a5616734dd8f6
  playChunk ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    (StreetRun.Assets.Resources -> SDL.Mixer.Chunk) -> m ()
  {- Arity: 5,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))><L,C(U)>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.Reader.Class.MonadReader
                           StreetRun.Config.Config m)
                   (w1 :: Control.Monad.IO.Class.MonadIO m)
                   (w2 :: Control.Monad.Catch.MonadThrow m)
                   (w3 :: Control.Monad.Catch.MonadCatch m)
                   (w4 :: StreetRun.Assets.Resources -> SDL.Mixer.Chunk) ->
                 case w3 of ww { Control.Monad.Catch.C:MonadCatch ww1 ww2 ->
                 StreetRun.Audio.$wplayChunk @ m w w1 ww1 ww2 w4 }) -}
4c4f619531fb7e08e0dbbf77b0ff93b2
  playDeathSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rDeathSfx:Resources) -}
4e039969062d9046a0c8c19bc28c9c4e
  playDuckSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rDuckSfx:Resources) -}
62a1537bc4c208e8b0cff45165d7de31
  playGameMusic' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m) =>
    m ()
  {- Arity: 2,
     Strictness: <S(S(LC(C(S))LLL)LLL),1*U(1*U(A,1*C1(C1(U)),A,A,A),A,A,1*C1(U))><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),C(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ m :: * -> *
                   (w :: Control.Monad.Reader.Class.MonadReader
                           StreetRun.Config.Config m)
                   (w1 :: Control.Monad.IO.Class.MonadIO m) ->
                 case w of ww { Control.Monad.Reader.Class.C:MonadReader ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Audio.$wplayGameMusic' @ m ww7 ww4 w1 } }) -}
2bbd22afa1b913543a88dfb375bdfb1c
  playGameMusic'1 :: StreetRun.Config.Config -> SDL.Mixer.Music
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LLLLLLLLSLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds12 } }) -}
973528611917508ea0126fe02e17fbda
  playHurtSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rHurtSfx:Resources) -}
f6a5f5971c2824dee65a60bd7a76a48b
  playJumpSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rJumpSfx:Resources) -}
100c5525d27f840af23e99bc30d6af92
  playLavaSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rLavaSfx:Resources) -}
8737a356c2a322d133e511d18aff6685
  playPointSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rPointSfx:Resources) -}
3e8eb650c1d864a910e5d365a25ecf43
  playQuakeSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rQuakeSfx:Resources) -}
18458e012f454cbe594fe1596645f6b4
  playRecoverSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rRecoverSfx:Resources) -}
4a36ecfabdd92dce821bdf2e4df661bb
  playRockSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rRockSfx:Resources) -}
6f72212f1faa5cf346f32b74e7392284
  playStockSfx' ::
    (Control.Monad.Reader.Class.MonadReader StreetRun.Config.Config m,
     Control.Monad.IO.Class.MonadIO m, Control.Monad.Catch.MonadThrow m,
     Control.Monad.Catch.MonadCatch m) =>
    m ()
  {- Arity: 4,
     Strictness: <L,U(U(A,C(C1(U)),A,C(U),A),A,A,C(U))><L,U(U(U(U(C(C1(U)),C(C1(U))),A,A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),C(U))><L,A><S(LC(C(C(S)))),1*U(U(A,C(C1(U))),1*C1(C1(C1(U))))>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   ($dMonadReader :: Control.Monad.Reader.Class.MonadReader
                                       StreetRun.Config.Config m)
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dMonadThrow :: Control.Monad.Catch.MonadThrow m)
                   ($dMonadCatch :: Control.Monad.Catch.MonadCatch m) ->
                 StreetRun.Audio.playChunk
                   @ m
                   $dMonadReader
                   $dMonadIO
                   (Control.Monad.Catch.$p1MonadCatch @ m $dMonadCatch)
                   $dMonadCatch
                   StreetRun.Assets.$sel:rStockSfx:Resources) -}
6b339bb238f60f3e7d8b8fcacf583277
  raiseGameMusic' :: Control.Monad.IO.Class.MonadIO m => m ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S(S(LC(C(S)))LLLLL)LLLL)L),1*U(1*U(1*U(1*U(A,1*C1(C1(U))),A,A,A,A,A),A,A,A,A),1*C1(U))>,
     Unfolding: InlineRule (1, True, False)
                (\ @ m :: * -> * ($dMonadIO :: Control.Monad.IO.Class.MonadIO m) ->
                 case $dMonadIO of ww { Control.Monad.IO.Class.C:MonadIO ww1 ww2 ->
                 case ww1 of ww3 { GHC.Base.C:Monad ww4 ww5 ww6 ww7 ww8 ->
                 case ww4 of ww9 { GHC.Base.C:Applicative ww10 ww11 ww12 ww13 ww14 ww15 ->
                 case ww10 of ww16 { GHC.Base.C:Functor ww17 ww18 ->
                 SDL.Mixer.$wsetMusicVolume
                   @ m
                   ww18
                   ww2
                   StreetRun.Audio.raiseGameMusic'1 } } } }) -}
692c7ac776869b992980888a456bb621
  raiseGameMusic'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 128#) -}
c32bbc998a0df0dd01f3f0fc076cb97f
  stopGameMusic' :: Control.Monad.IO.Class.MonadIO m => m ()
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(S(S(S(LC(C(S)))LLLLL)LLLL)L),1*U(1*U(1*U(1*U(A,1*C1(C1(U))),A,A,A,A,A),A,A,A,A),1*C1(U))>,
     Unfolding: InlineRule (0, True, True) SDL.Mixer.haltMusic -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

