
==================== FINAL INTERFACE ====================
2019-04-25 19:42:29.658963021 UTC

interface street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE:StreetRun.Scene.Death 8064
  interface hash: 5697011fdfad05065fc6cce0ee01ff9d
  ABI hash: dbc65769fd7471c79d8ebfd3884ebec1
  export-list hash: dc0ac1c7d72ef69ff79c4859fdde9124
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: de258abf6559f3c6fe75345ba5c1b459
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Scene.Death.deathStep'
  StreetRun.Scene.Death.updateDeath
  StreetRun.Scene.Death.Death{StreetRun.Scene.Death.deathStep}
module dependencies: StreetRun.Config StreetRun.Effect.Audio
                     StreetRun.Effect.Clock StreetRun.Effect.HUD StreetRun.Effect.Logger
                     StreetRun.Effect.Picture StreetRun.Effect.Renderer
                     StreetRun.Effect.Renderer_func_1 StreetRun.Effect.Renderer_func_2
                     StreetRun.Effect.Sound_effects StreetRun.Engine.Bird
                     StreetRun.Engine.Building StreetRun.Engine.Camera
                     StreetRun.Engine.Common StreetRun.Engine.Font
                     StreetRun.Engine.Font_functions StreetRun.Engine.Frame
                     StreetRun.Engine.Grass StreetRun.Engine.Hurdle
                     StreetRun.Engine.Hurdle_1 StreetRun.Engine.Input
                     StreetRun.Engine.Lava StreetRun.Engine.Obstacle
                     StreetRun.Engine.Out StreetRun.Engine.Out_func
                     StreetRun.Engine.Physics StreetRun.Engine.Quake
                     StreetRun.Engine.Quake_BackStreet StreetRun.Engine.Quake_Building
                     StreetRun.Engine.Quake_Grass StreetRun.Engine.Quake_Street
                     StreetRun.Engine.Rock StreetRun.Engine.Runner
                     StreetRun.Engine.Runner_func_1 StreetRun.Engine.Runner_func_2
                     StreetRun.Engine.Scene_change StreetRun.Engine.Sfx
                     StreetRun.Engine.Step StreetRun.Engine.Tag
                     StreetRun.Engine.Tag_func StreetRun.Engine.Types
                     StreetRun.Engine.Work StreetRun.Engine.Work_func
                     StreetRun.Manager.Load StreetRun.Manager.Scene StreetRun.Resource
                     StreetRun.Scene.Play StreetRun.State StreetRun.Wrapper.SDLInput
                     StreetRun.Wrapper.SDLRenderer
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate 7c6496232245300f888f7e0dafeb231c
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Float ccb68fbeaab348f60d11c8132d51af5d
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  lens-4.17:Control.Lens 531af2b540e6d8d8ce856b6f46207d94
import  -/  lens-4.17:Control.Lens.Getter 79a8b254c85ab59ff7c11b644140539d
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  StreetRun.Effect.HUD f9bfb9f6aa4889d50b2ee3ffd92a38eb
  exports: 1513d5ed5cda58f06011a28449dbff9a
  HUD fc223c5cb769bec6a1ba86e1c4eb9c15
import  -/  StreetRun.Effect.Picture 37f92f682c1a92fcd7c7fcca83b0e1ce
  exports: 325a52fa897941b0bb8ce7d33861c5c1
  CameraControl caddcb79db93a69450b9671fbfb1ee07
import  -/  StreetRun.Effect.Renderer ab90110934e7b75f3455023d30483443
  exports: cbf684934b44747975b302576fca8d1f
  Renderer d187c6010c0ba5c0f84877a624ef3fab
  getRunnerAnimations 72d2f6be4147cf39abf4f89206e09ac9
import  -/  StreetRun.Effect.Renderer_func_1 a9608b678aa94e4aea2a526c39f1f138
  exports: 5096c284f071ed1000a4b145b540c3cf
import  -/  StreetRun.Effect.Renderer_func_2 24070f76182f29d818feee78d172aded
  exports: 20c4b3a727dfc63e1397c8e4a265f761
import  -/  StreetRun.Engine.Common 4d0d5abc96d404a54bf9e869f10eaeb3
  exports: 6ba732522c41dfd1680709da05125599
  HasCommonVars 1902e2cee2c9cb85ed965064ea16c14d
import  -/  StreetRun.Engine.Frame 973c95b7bcec2fc48e1076e11ca1bf2d
  exports: 2dfbfe0610e766c48ad204766a6f2079
  frameDeltaSeconds db36ae879b3edc98e864c272550814da
import  -/  StreetRun.Engine.Runner 92f0fc10c09bba0933086b352f065d17
  exports: c5bcac04dca39a47a3b45c58ae03f34c
  $sel:dsHeight:RunnerState 8a2df4904a878996e6c672adcdcc81e9
import  -/  StreetRun.Engine.Runner_func_1 8253e5a6ca260c245e7a2ffa72783b38
  exports: c4c8b4707d5e6c4bd4834daafe273870
import  -/  StreetRun.Engine.Runner_func_2 249d756e9edd6a8a7c3b52202950e572
  exports: 995c383ee3232fec9b0d29c45d6d2caa
import  -/  StreetRun.Engine.Scene_change 253b9956c7accfa8a990d6cdb327d6b3
  Scene'GameOver 4c4865775b939e0e9a33f5717e642060
import  -/  StreetRun.Engine.Work 2093cc6ef87d0747d31187ee7f4f6e98
  exports: 6477792e7e6fbcfa456b9e9fd542c55e
  $sel:pvRunnerPos:PlayVars 5b4fac9be0886cf543d7b7325b581ca8
  $sel:pvRunnerState:PlayVars 5b4fac9be0886cf543d7b7325b581ca8
import  -/  StreetRun.Engine.Work_func 5d5c1ab58a668b4426b71411aac59071
  exports: d6952fa3f315a51912879459d6a4cf3b
  HasPlayVars eba756839bda4b326f1dc840564166a5
  playVars 7c44cb18d9257cfa4ed996a00dfc0ee2
import  -/  StreetRun.Manager.Load b17a9b87fd3fad5a68e2c7b1a58675ff
  exports: e129c81ac26341241599af1bf56028af
  HasInput d4a6564b950be4600c0d17462501d132
import  -/  StreetRun.Manager.Scene 70192b0738c83d5e336e779bb0e7b0eb
  exports: 28deb09ef45708ade781a394cb3fe267
  SceneManager 6f1a4f9d9385f2e7d31601eacb49c57e
  toScene 16ddf7e68df0df87e303dd0b34fe6293
import  -/  StreetRun.Scene.Play fd7fb7518de6d99bfc98da0193a19cca
  exports: 7961221ad922babff9c69cb6cf2894bd
  drawPlay 72a2c75b155b34487ef6742185bd5262
  modifyPlayVars 0ec31ebdc69be62cf6631ff926f600b0
3d56491b93b6ac62285b77e7703e9f96
  $tc'C:Death :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11986727139471297433##
                   4056431633980079631##
                   StreetRun.Scene.Death.$trModule
                   StreetRun.Scene.Death.$tc'C:Death2
                   1#
                   StreetRun.Scene.Death.$tc'C:Death1) -}
49cebf3a1f9e46068ceb2e0027825f00
  $tc'C:Death1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
3bbebb353e0b6c71a6566ad22c690e33
  $tc'C:Death2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Scene.Death.$tc'C:Death3) -}
3b619c024eb9af5091cbd60d0ae2e13f
  $tc'C:Death3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Death"#) -}
7d2e83224b35448e4d84fe6bd8fc186c
  $tcDeath :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12333574266581017414##
                   160072747883726312##
                   StreetRun.Scene.Death.$trModule
                   StreetRun.Scene.Death.$tcDeath2
                   0#
                   StreetRun.Scene.Death.$tcDeath1) -}
5685abbbc6625e7a3c448955a7ca673f
  $tcDeath1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4d492e32cc506c4be9d6d7bf7d11b8b0
  $tcDeath2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Scene.Death.$tcDeath3) -}
867b3e373703974ea58a34d5fde44cd3
  $tcDeath3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Death"#) -}
7c9930f0d5dc4c24d1686b3e532992d8
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Scene.Death.$trModule3
                   StreetRun.Scene.Death.$trModule1) -}
7ccfa3371c51676a5de68553b9a37d7a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Scene.Death.$trModule2) -}
f1c8723cff749d3aa560457e39390384
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Scene.Death"#) -}
2c0de5ece20c0d9a2fccfadf9413f4ad
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Scene.Death.$trModule4) -}
8d5966272824304fbf5d3916ddf5305c
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE"#) -}
f11ca97c48cabd244ffbff6855bb94f6
  $wupdateDeath ::
    StreetRun.Engine.Work_func.HasPlayVars s =>
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. (s -> (a, s)) -> m a)
    -> StreetRun.Effect.Renderer.Renderer m => m ()
  {- Arity: 4,
     Strictness: <L,C(C1(C(U)))><C(C(S)),1*C1(C1(U))><L,C(U)><L,1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Engine.Work_func.HasPlayVars s)
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. (s -> (a, s)) -> m a)
                   (w1 :: StreetRun.Effect.Renderer.Renderer m) ->
                 ww
                   @ (StreetRun.Engine.Types.Animations
                        StreetRun.Engine.Runner.RunnerKey)
                   @ ()
                   (StreetRun.Effect.Renderer.getRunnerAnimations @ m w1)
                   (\ (animations :: StreetRun.Engine.Types.Animations
                                       StreetRun.Engine.Runner.RunnerKey) ->
                    let {
                      f :: s -> Data.Functor.Identity.Identity s
                      = w `cast` (StreetRun.Engine.Work_func.N:HasPlayVars[0] <s>_N)
                          @ Data.Functor.Identity.Identity
                          Data.Functor.Identity.$fFunctorIdentity
                          (\ (pv :: StreetRun.Engine.Work.PlayVars) ->
                           case pv of wild { StreetRun.Engine.Work.PlayVars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                           StreetRun.Engine.Work.PlayVars
                             ds
                             ds1
                             ds2
                             ds3
                             ds4
                             ds5
                             (Animate.stepPosition
                                @ StreetRun.Engine.Runner.RunnerKey
                                @ StreetRun.Engine.Types.Seconds
                                @ (Animate.SpriteClip StreetRun.Engine.Runner.RunnerKey)
                                StreetRun.Engine.Runner.$fEnumRunnerKey
                                StreetRun.Engine.Types.$fNumSeconds
                                StreetRun.Engine.Types.$fOrdSeconds
                                animations
                                ds6
                                StreetRun.Scene.Death.deathStep'4
                                  `cast`
                                (Sym (StreetRun.Engine.Types.N:Seconds[0])))
                             ds7
                             ds8
                             (case ds9 of wild1 { StreetRun.Engine.Runner.RunnerState ds16 ds17 ds18 ds19 ->
                              StreetRun.Engine.Runner.RunnerState
                                ds16
                                (case ds17 of wild2 {
                                   GHC.Maybe.Nothing -> StreetRun.Scene.Death.deathStep'2
                                   GHC.Maybe.Just x
                                   -> GHC.Maybe.Just
                                        @ StreetRun.Engine.Types.Percent
                                        (case x `cast`
                                              (StreetRun.Engine.Types.N:Percent[0]) of wild3 { GHC.Types.F# x1 ->
                                         (GHC.Types.F# (GHC.Prim.plusFloat# x1 3.0e-2#))
                                           `cast`
                                         (Sym (StreetRun.Engine.Types.N:Percent[0])) }) })
                                ds18
                                ds19 })
                             ds10
                             ds11
                             ds12
                             ds13
                             ds14
                             ds15 })
                            `cast`
                          (<StreetRun.Engine.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <StreetRun.Engine.Work.PlayVars>_R))
                    } in
                    ww1
                      @ ()
                      (\ (s1 :: s) ->
                       (GHC.Tuple.(),
                        (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <s>_R))))) -}
f489a92a1413b85bfb5da2675163bbb6
  class GHC.Base.Monad m => Death (m :: * -> *) where
    deathStep :: m ()
    {-# MINIMAL deathStep #-}
0f3a90a0eaa6625569de07d60357fdba
  deathStep' ::
    (StreetRun.Engine.Work_func.HasPlayVars s,
     StreetRun.Engine.Common.HasCommonVars s,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Manager.Scene.SceneManager m,
     StreetRun.Manager.Load.HasInput m,
     StreetRun.Effect.Renderer.Renderer m,
     StreetRun.Effect.Picture.CameraControl m,
     StreetRun.Effect.HUD.HUD m) =>
    m ()
  {- Arity: 8,
     Strictness: <L,C(C1(C(U)))><L,1*C1(C1(C(U)))><S(S(LLC(C(S))LL)LLL),U(U(U(A,C(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,1*U(A,1*C1(U))><L,A><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,U,U,U,U,U,U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(U),C(U),A,A,A,A,A,A,A,A,A)><L,U(A,A,U,U)><L,U(A,U,U,U)>,
     Unfolding: (\ @ s
                   @ m :: * -> *
                   ($dHasPlayVars :: StreetRun.Engine.Work_func.HasPlayVars s)
                   ($dHasCommonVars :: StreetRun.Engine.Common.HasCommonVars s)
                   ($dMonadState :: Control.Monad.State.Class.MonadState s m)
                   ($dSceneManager :: StreetRun.Manager.Scene.SceneManager m)
                   ($dHasInput :: StreetRun.Manager.Load.HasInput m)
                   ($dRenderer :: StreetRun.Effect.Renderer.Renderer m)
                   ($dCameraControl :: StreetRun.Effect.Picture.CameraControl m)
                   ($dHUD :: StreetRun.Effect.HUD.HUD m) ->
                 case Control.Monad.State.Class.$p1MonadState
                        @ s
                        @ m
                        $dMonadState of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 ww3
                   @ ()
                   @ ()
                   (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                    case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                    StreetRun.Scene.Death.$wupdateDeath
                      @ s
                      @ m
                      $dHasPlayVars
                      ww13
                      ww10
                      $dRenderer } })
                   (ww3
                      @ ()
                      @ ()
                      (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                       case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                       StreetRun.Scene.Play.$wdrawPlay
                         @ s
                         @ m
                         $dHasPlayVars
                         $dHasCommonVars
                         ww12
                         ww13
                         ww14
                         ww15
                         ww8
                         $dRenderer
                         $dCameraControl
                         $dHUD } })
                      (let {
                         lvl :: m ()
                         = StreetRun.Manager.Scene.toScene
                             @ m
                             $dSceneManager
                             StreetRun.Engine.Scene_change.Scene'GameOver
                       } in
                       let {
                         lvl1 :: m () = ww4 @ () GHC.Tuple.()
                       } in
                       let {
                         lvl2 :: m () = GHC.Base.pure @ m ww1 @ () GHC.Tuple.()
                       } in
                       ww2
                         @ (GHC.Maybe.Maybe StreetRun.Engine.Types.Percent)
                         @ ()
                         (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                          case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                          let {
                            g :: s -> Data.Functor.Const.Const StreetRun.Engine.Work.PlayVars s
                            = $dHasPlayVars
                                `cast`
                              (StreetRun.Engine.Work_func.N:HasPlayVars[0] <s>_N)
                                @ (Data.Functor.Const.Const StreetRun.Engine.Work.PlayVars)
                                (Data.Functor.Const.$fFunctorConst
                                   @ StreetRun.Engine.Work.PlayVars)
                                StreetRun.Scene.Death.deathStep'1
                                  `cast`
                                (<StreetRun.Engine.Work.PlayVars>_R
                                 ->_R Sym (Data.Functor.Const.N:Const[0]
                                               <*>_N
                                               <StreetRun.Engine.Work.PlayVars>_R
                                               <StreetRun.Engine.Work.PlayVars>_P))
                          } in
                          ww13
                            @ s
                            @ (GHC.Maybe.Maybe StreetRun.Engine.Types.Percent)
                            ww8
                            (\ (s1 :: s) ->
                             ww15
                               @ (GHC.Maybe.Maybe StreetRun.Engine.Types.Percent)
                               (case (g s1)
                                       `cast`
                                     (Data.Functor.Const.N:Const[0]
                                          <*>_N
                                          <StreetRun.Engine.Work.PlayVars>_R
                                          <s>_P) of wild { StreetRun.Engine.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                                case ds10 of wild1 { StreetRun.Engine.Runner.RunnerState ds22 ds23 ds24 ds25 ->
                                ds23 } })) } })
                         (\ (height :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent) ->
                          case height of wild {
                            GHC.Maybe.Nothing -> lvl1
                            GHC.Maybe.Just h
                            -> case h `cast`
                                    (StreetRun.Engine.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                               case GHC.Prim.gtFloat# x 1.5707964# of lwild {
                                 DEFAULT -> lvl2 1# -> lvl } } }))) }) -}
f80ddbb63303d00252c052ab15c43fca
  deathStep'1 ::
    StreetRun.Engine.Work.PlayVars -> StreetRun.Engine.Work.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Engine.Work.PlayVars) -> v) -}
f2f173145051436c6d7c2f336b5982e2
  deathStep'2 :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ StreetRun.Engine.Types.Percent
                   StreetRun.Scene.Death.deathStep'3
                     `cast`
                   (Sym (StreetRun.Engine.Types.N:Percent[0]))) -}
8c01a17c6da73326ea1746bef7b20a17
  deathStep'3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
920fae980a263e25f722f649d45c98c8
  deathStep'4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 1.6667e-2#) -}
75ce41b6f0f0c2ec1e067af8ac18a74f
  updateDeath ::
    (StreetRun.Engine.Work_func.HasPlayVars s,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Effect.Renderer.Renderer m) =>
    m ()
  {- Arity: 3,
     Strictness: <L,C(C1(C(U)))><S(S(LC(C(S))LLL)LLL),1*U(1*U(A,1*C1(C1(U)),A,A,A),A,A,C(U))><L,1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Engine.Work_func.HasPlayVars s)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Effect.Renderer.Renderer m) ->
                 case w1 of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Scene.Death.$wupdateDeath @ s @ m w ww7 ww4 w2 } }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

