
==================== FINAL INTERFACE ====================
2019-04-25 19:22:19.838854225 UTC

interface street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE:StreetRun.Effect.HUD 8064
  interface hash: 615f75bcef748e4eddcca1675c780c3f
  ABI hash: f9bfb9f6aa4889d50b2ee3ffd92a38eb
  export-list hash: 1513d5ed5cda58f06011a28449dbff9a
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9e4fb1f04cc4eff0e23b2f9f31508f0f
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Effect.HUD.drawControls'
  StreetRun.Effect.HUD.drawHiscore'
  StreetRun.Effect.HUD.drawNumbers
  StreetRun.Effect.HUD.drawScore'
  StreetRun.Effect.HUD.HUD{StreetRun.Effect.HUD.drawControls StreetRun.Effect.HUD.drawHiscore StreetRun.Effect.HUD.drawScore}
module dependencies: StreetRun.Config StreetRun.Effect.Renderer
                     StreetRun.Effect.Renderer_func_1 StreetRun.Effect.Renderer_func_2
                     StreetRun.Engine.Bird StreetRun.Engine.Building
                     StreetRun.Engine.Camera StreetRun.Engine.Common
                     StreetRun.Engine.Font StreetRun.Engine.Font_functions
                     StreetRun.Engine.Frame StreetRun.Engine.Grass
                     StreetRun.Engine.Hurdle StreetRun.Engine.Hurdle_1
                     StreetRun.Engine.Input StreetRun.Engine.Lava
                     StreetRun.Engine.Obstacle StreetRun.Engine.Physics
                     StreetRun.Engine.Quake StreetRun.Engine.Quake_BackStreet
                     StreetRun.Engine.Quake_Building StreetRun.Engine.Quake_Grass
                     StreetRun.Engine.Quake_Street StreetRun.Engine.Rock
                     StreetRun.Engine.Runner StreetRun.Engine.Runner_func_1
                     StreetRun.Engine.Runner_func_2 StreetRun.Engine.Sfx
                     StreetRun.Engine.Step StreetRun.Engine.Types StreetRun.Engine.Work
                     StreetRun.Engine.Work_func StreetRun.Resource
                     StreetRun.Wrapper.SDLRenderer
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17 scientific-0.3.6.2
                      sdl2-2.4.1.0 sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         linear-1.20.8:Linear.Instances base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:Data.Foldable 5f70351366640f007be66681d2212df8
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
import  -/  lens-4.17:Control.Lens 531af2b540e6d8d8ce856b6f46207d94
import  -/  lens-4.17:Control.Lens.Getter 79a8b254c85ab59ff7c11b644140539d
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  StreetRun.Effect.Renderer ab90110934e7b75f3455023d30483443
  exports: cbf684934b44747975b302576fca8d1f
  Renderer d187c6010c0ba5c0f84877a624ef3fab
  drawControlsText 2c6a048c832373e4c3519d9eaa172a0e
  drawHiscoreText 645caf61a18602eea889346c9088a295
  drawNumber 898c496955312dd36e8759c97a51fd79
import  -/  StreetRun.Effect.Renderer_func_1 a9608b678aa94e4aea2a526c39f1f138
  exports: 5096c284f071ed1000a4b145b540c3cf
import  -/  StreetRun.Effect.Renderer_func_2 24070f76182f29d818feee78d172aded
  exports: 20c4b3a727dfc63e1397c8e4a265f761
import  -/  StreetRun.Engine.Common 4d0d5abc96d404a54bf9e869f10eaeb3
  exports: 6ba732522c41dfd1680709da05125599
  $sel:cvHiscore:CommonVars 841ce81843d4fcb757b67c9bc64ffd54
  HasCommonVars 1902e2cee2c9cb85ed965064ea16c14d
  commonVars 809c91e27c35e5c3e67ae94dcece15b4
import  -/  StreetRun.Engine.Font 0988ff1eb2a606d3c46214792ded3aaf
  exports: 0b4012bf7b7ba2d231fb49e61d3ee2dc
import  -/  StreetRun.Engine.Font_functions c76849088a4913547ebc4332565b6d68
  exports: 7ba329b9f4ccc8aaade996d3ca7dc8bf
  toNumberReverse b5a204420a69494e1ed48c5e8d2abed6
import  -/  StreetRun.Engine.Work 2093cc6ef87d0747d31187ee7f4f6e98
  exports: 6477792e7e6fbcfa456b9e9fd542c55e
  $sel:pvScore:PlayVars 5b4fac9be0886cf543d7b7325b581ca8
  $sel:pvSeconds:PlayVars 5b4fac9be0886cf543d7b7325b581ca8
import  -/  StreetRun.Engine.Work_func 5d5c1ab58a668b4426b71411aac59071
  exports: d6952fa3f315a51912879459d6a4cf3b
  HasPlayVars eba756839bda4b326f1dc840564166a5
  playVars 7c44cb18d9257cfa4ed996a00dfc0ee2
bc328ca6c71bfe405f7b0af6ab551b5f
  $tc'C:HUD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11059664793828958919##
                   5617449616543592713##
                   StreetRun.Effect.HUD.$trModule
                   StreetRun.Effect.HUD.$tc'C:HUD2
                   1#
                   StreetRun.Effect.HUD.$tc'C:HUD1) -}
007dd42a79451f155c41a47d29c882e3
  $tc'C:HUD1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f70754e6283ad3889c806d731db44fc8
  $tc'C:HUD2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Effect.HUD.$tc'C:HUD3) -}
7d322acea273827606c8d9e8150894fd
  $tc'C:HUD3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:HUD"#) -}
841ba2e134bceb6cf24eb9c10153c0b6
  $tcHUD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10830709322760309944##
                   16049807666109814085##
                   StreetRun.Effect.HUD.$trModule
                   StreetRun.Effect.HUD.$tcHUD2
                   0#
                   StreetRun.Effect.HUD.$tcHUD1) -}
2b5a30187d61e91c74e90977d18d3635
  $tcHUD1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4de9b0e345bb560702cd7ff3d1dddedc
  $tcHUD2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Effect.HUD.$tcHUD3) -}
5b43d584e8c0cdc75a14a7de1d6ad191
  $tcHUD3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HUD"#) -}
11f0198e50ef50b9268e912fc95d94ed
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Effect.HUD.$trModule3
                   StreetRun.Effect.HUD.$trModule1) -}
740a3c5d57e31fb04ef995a15b6007c9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Effect.HUD.$trModule2) -}
74f70be370a67afe0cfa569ae337c875
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Effect.HUD"#) -}
48177861a171cd045fb54556036f9e93
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Effect.HUD.$trModule4) -}
96dfca04e9179ec74a155ad83eeee3a8
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE"#) -}
010c88d80c9202c8b4fec2363ba05f78
  $wdrawControls' ::
    GHC.Base.Applicative m =>
    (forall a b. m a -> (a -> m b) -> m b)
    -> ((GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (Control.Monad.State.Class.MonadState s m,
        StreetRun.Engine.Work_func.HasPlayVars s) =>
       m ()
  {- Arity: 5,
     Strictness: <L,1*U(A,1*C1(U),A,A,A,A)><C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   @ s
                   (ww :: GHC.Base.Applicative m)
                   (ww1 :: forall a b. m a -> (a -> m b) -> m b)
                   (ww2 :: (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Engine.Work_func.HasPlayVars s) ->
                 let {
                   lvl :: m () = ww2 StreetRun.Effect.HUD.drawControls'2
                 } in
                 let {
                   lvl1 :: m () = GHC.Base.pure @ m ww @ () GHC.Tuple.()
                 } in
                 ww1
                   @ StreetRun.Engine.Work.PlayVars
                   @ ()
                   (case w of ww3 { Control.Monad.State.Class.C:MonadState ww4 ww5 ww6 ww7 ->
                    case ww4 of ww8 { GHC.Base.C:Monad ww9 ww10 ww11 ww12 ww13 ->
                    let {
                      w2 :: s
                            -> Data.Functor.Const.Const StreetRun.Engine.Work.PlayVars s
                      = w1 `cast` (StreetRun.Engine.Work_func.N:HasPlayVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Engine.Work.PlayVars)
                          (Data.Functor.Const.$fFunctorConst
                             @ StreetRun.Engine.Work.PlayVars)
                          StreetRun.Effect.HUD.drawControls'1
                            `cast`
                          (<StreetRun.Engine.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Engine.Work.PlayVars>_R
                                         <StreetRun.Engine.Work.PlayVars>_P))
                    } in
                    ww10
                      @ s
                      @ StreetRun.Engine.Work.PlayVars
                      ww5
                      (\ (s1 :: s) ->
                       ww12
                         @ StreetRun.Engine.Work.PlayVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Engine.Work.PlayVars>_R <s>_P)) } })
                   (\ (pv :: StreetRun.Engine.Work.PlayVars) ->
                    case pv of wild { StreetRun.Engine.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                    case ds4
                           `cast`
                         (StreetRun.Engine.Types.N:Seconds[0]) of wild1 { GHC.Types.F# x ->
                    case GHC.Prim.ltFloat# x 0.0# of lwild {
                      DEFAULT -> lvl1 1# -> lvl } } })) -}
c8befaf513dd5d0f8100d7a1bd97f470
  $wdrawHiscore' ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a b. m a -> m b -> m b)
    -> (forall a. a -> m a)
    -> ((GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (StreetRun.Engine.Font.Number
        -> (GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (Control.Monad.State.Class.MonadState s m,
        StreetRun.Engine.Common.HasCommonVars s) =>
       m ()
  {- Arity: 7,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,C(U)><L,1*C1(U)><L,C(C1(U))><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   @ s
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a b. m a -> m b -> m b)
                   (ww2 :: forall a. a -> m a)
                   (ww3 :: (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (ww4 :: StreetRun.Engine.Font.Number
                           -> (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Engine.Common.HasCommonVars s) ->
                 let {
                   lvl :: m () = ww3 StreetRun.Effect.HUD.drawHiscore'38
                 } in
                 let {
                   $dRenderer :: GHC.Base.Monad m
                   = GHC.Base.C:Monad
                       @ m
                       (StreetRun.Effect.HUD.drawHiscore'36 @ m)
                       ww
                       ww1
                       ww2
                       (StreetRun.Effect.HUD.drawHiscore'34 @ m)
                 } in
                 let {
                   $dRenderer1 :: StreetRun.Effect.Renderer.Renderer m
                   = StreetRun.Effect.Renderer.C:Renderer
                       @ m
                       $dRenderer
                       (StreetRun.Effect.HUD.drawHiscore'32 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'32 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'30 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'28 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'26 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'24 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'22 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'20 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'18 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'16 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'14 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'12 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'10 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'8 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'4 @ m)
                       ww3
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       ww4
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                 } in
                 ww
                   @ StreetRun.Engine.Common.CommonVars
                   @ ()
                   (case w of ww5 { Control.Monad.State.Class.C:MonadState ww6 ww7 ww8 ww9 ->
                    case ww6 of ww10 { GHC.Base.C:Monad ww11 ww12 ww13 ww14 ww15 ->
                    let {
                      w2 :: s
                            -> Data.Functor.Const.Const StreetRun.Engine.Common.CommonVars s
                      = w1 `cast` (StreetRun.Engine.Common.N:HasCommonVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Engine.Common.CommonVars)
                          (Data.Functor.Const.$fFunctorConst
                             @ StreetRun.Engine.Common.CommonVars)
                          StreetRun.Effect.HUD.drawHiscore'3
                            `cast`
                          (<StreetRun.Engine.Common.CommonVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Engine.Common.CommonVars>_R
                                         <StreetRun.Engine.Common.CommonVars>_P))
                    } in
                    ww12
                      @ s
                      @ StreetRun.Engine.Common.CommonVars
                      ww7
                      (\ (s1 :: s) ->
                       ww14
                         @ StreetRun.Engine.Common.CommonVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Engine.Common.CommonVars>_R <s>_P)) } })
                   (\ (cv :: StreetRun.Engine.Common.CommonVars) ->
                    ww1
                      @ ()
                      @ ()
                      lvl
                      (case cv of wild { StreetRun.Engine.Common.CommonVars ds1 ds2 ds3 ->
                       case ds1
                              `cast`
                            (StreetRun.Engine.Types.N:Score[0]) of wild1 { GHC.Types.I# i ->
                       StreetRun.Effect.HUD.$wdrawNumbers
                         @ m
                         $dRenderer1
                         (GHC.Integer.Type.smallInteger i)
                         StreetRun.Effect.HUD.drawHiscore'2
                         StreetRun.Effect.HUD.drawHiscore'1 } }))) -}
7a65b918aed961b13b14be0b7534487e
  $wdrawNumbers ::
    StreetRun.Effect.Renderer.Renderer m =>
    GHC.Integer.Type.Integer -> GHC.Types.Int -> GHC.Types.Int -> m ()
  {- Arity: 4,
     Strictness: <L,U(1*U(A,A,C(C1(U)),1*C1(U),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(C1(U)),A)><S,U><L,U(U)><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (w :: StreetRun.Effect.Renderer.Renderer m)
                   (w1 :: GHC.Integer.Type.Integer)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int) ->
                 let {
                   w2 :: GHC.Base.Monad m
                   = StreetRun.Effect.Renderer.$p1Renderer @ m w
                 } in
                 let {
                   n :: m () = GHC.Base.return @ m w2 @ () GHC.Tuple.()
                 } in
                 letrec {
                   go :: GHC.Prim.Int# -> [StreetRun.Engine.Font.Number] -> m ()
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (x :: GHC.Prim.Int#) (eta :: [StreetRun.Engine.Font.Number]) ->
                     case eta of wild {
                       [] -> n
                       : y ys
                       -> GHC.Base.>>
                            @ m
                            w2
                            @ ()
                            @ ()
                            (StreetRun.Effect.Renderer.drawNumber
                               @ m
                               w
                               y
                               (case ww of wild1 { GHC.Types.I# x1 ->
                                GHC.Types.I# (GHC.Prim.-# x1 (GHC.Prim.*# x 16#)) },
                                ww1))
                            (case x of wild1 {
                               DEFAULT -> go (GHC.Prim.+# wild1 1#) ys
                               9223372036854775807# -> n }) }
                 } in
                 go
                   0#
                   (GHC.List.reverse1
                      @ StreetRun.Engine.Font.Number
                      (StreetRun.Engine.Font_functions.toNumber w1)
                      (GHC.Types.[] @ StreetRun.Engine.Font.Number))) -}
138282c4049c0f75c99bb156b181391e
  $wdrawScore' ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a b. m a -> m b -> m b)
    -> (forall a. a -> m a)
    -> (StreetRun.Engine.Font.Number
        -> (GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (Control.Monad.State.Class.MonadState s m,
        StreetRun.Engine.Work_func.HasPlayVars s) =>
       m ()
  {- Arity: 6,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,C(U)><L,C(C1(U))><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   @ s
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a b. m a -> m b -> m b)
                   (ww2 :: forall a. a -> m a)
                   (ww3 :: StreetRun.Engine.Font.Number
                           -> (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Engine.Work_func.HasPlayVars s) ->
                 let {
                   $dRenderer :: GHC.Base.Monad m
                   = GHC.Base.C:Monad
                       @ m
                       (StreetRun.Effect.HUD.drawHiscore'36 @ m)
                       ww
                       ww1
                       ww2
                       (StreetRun.Effect.HUD.drawHiscore'34 @ m)
                 } in
                 let {
                   $dRenderer1 :: StreetRun.Effect.Renderer.Renderer m
                   = StreetRun.Effect.Renderer.C:Renderer
                       @ m
                       $dRenderer
                       (StreetRun.Effect.HUD.drawHiscore'32 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'32 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'30 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'28 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'26 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'24 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'22 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'20 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'18 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'16 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'14 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'12 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'10 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'8 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'4 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                       ww3
                       (StreetRun.Effect.HUD.drawHiscore'6 @ m)
                 } in
                 ww
                   @ StreetRun.Engine.Work.PlayVars
                   @ ()
                   (case w of ww4 { Control.Monad.State.Class.C:MonadState ww5 ww6 ww7 ww8 ->
                    case ww5 of ww9 { GHC.Base.C:Monad ww10 ww11 ww12 ww13 ww14 ->
                    let {
                      w2 :: s
                            -> Data.Functor.Const.Const StreetRun.Engine.Work.PlayVars s
                      = w1 `cast` (StreetRun.Engine.Work_func.N:HasPlayVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Engine.Work.PlayVars)
                          (Data.Functor.Const.$fFunctorConst
                             @ StreetRun.Engine.Work.PlayVars)
                          StreetRun.Effect.HUD.drawControls'1
                            `cast`
                          (<StreetRun.Engine.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Engine.Work.PlayVars>_R
                                         <StreetRun.Engine.Work.PlayVars>_P))
                    } in
                    ww11
                      @ s
                      @ StreetRun.Engine.Work.PlayVars
                      ww6
                      (\ (s1 :: s) ->
                       ww13
                         @ StreetRun.Engine.Work.PlayVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Engine.Work.PlayVars>_R <s>_P)) } })
                   (\ (pv :: StreetRun.Engine.Work.PlayVars) ->
                    case pv of wild { StreetRun.Engine.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                    case ds1
                           `cast`
                         (StreetRun.Engine.Types.N:Score[0]) of wild1 { GHC.Types.I# i ->
                    StreetRun.Effect.HUD.$wdrawNumbers
                      @ m
                      $dRenderer1
                      (GHC.Integer.Type.smallInteger i)
                      StreetRun.Effect.HUD.drawHiscore'2
                      StreetRun.Effect.HUD.drawScore'1 } })) -}
fc223c5cb769bec6a1ba86e1c4eb9c15
  class GHC.Base.Monad m => HUD (m :: * -> *) where
    drawHiscore :: m ()
    drawScore :: m ()
    drawControls :: m ()
    {-# MINIMAL drawHiscore, drawScore, drawControls #-}
e2a4ade84ca924702e64b2adfc788dc9
  drawControls' ::
    (StreetRun.Effect.Renderer.Renderer m,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Engine.Work_func.HasPlayVars s) =>
    m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(1*U(A,1*C1(U),A,A,A,A),1*C1(C1(U)),A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U))><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: StreetRun.Effect.Renderer.Renderer m)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Engine.Work_func.HasPlayVars s) ->
                 case w of ww { StreetRun.Effect.Renderer.C:Renderer ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 case ww1 of ww27 { GHC.Base.C:Monad ww28 ww29 ww30 ww31 ww32 ->
                 StreetRun.Effect.HUD.$wdrawControls'
                   @ m
                   @ s
                   ww28
                   ww29
                   ww26
                   w1
                   w2 } }) -}
de8e783a61f14ada8ee827a55763650c
  drawControls'1 ::
    StreetRun.Engine.Work.PlayVars -> StreetRun.Engine.Work.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Engine.Work.PlayVars) -> v) -}
8d92b5ce780bb13ba2df6a8e91ad6778
  drawControls'2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((StreetRun.Effect.HUD.drawControls'4,
                  StreetRun.Effect.HUD.drawControls'3)) -}
582da3164caa97229450d5ccd679f5da
  drawControls'3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 470#) -}
3cf8e9dd44f3902070f8dd8bd86af584
  drawControls'4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 200#) -}
4f10cd000c9826b0181026425b4aba39
  drawHiscore' ::
    (StreetRun.Effect.Renderer.Renderer m,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Engine.Common.HasCommonVars s) =>
    m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(A,1*C1(C1(U)),C(C1(U)),C(U),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,C(C1(U)),A)><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: StreetRun.Effect.Renderer.Renderer m)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Engine.Common.HasCommonVars s) ->
                 case w of ww { StreetRun.Effect.Renderer.C:Renderer ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 case ww1 of ww27 { GHC.Base.C:Monad ww28 ww29 ww30 ww31 ww32 ->
                 StreetRun.Effect.HUD.$wdrawHiscore'
                   @ m
                   @ s
                   ww29
                   ww30
                   ww31
                   ww19
                   ww25
                   w1
                   w2 } }) -}
ca8d031a226d57b619fc3b7596e6c6de
  drawHiscore'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 50#) -}
587e6ba5219f750b8fa20fef4f3fba6d
  drawHiscore'10 ::
    StreetRun.Engine.Types.DrawSprite
      StreetRun.Engine.Building.BuildingKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Engine.Types.DrawSprite
                        StreetRun.Engine.Building.BuildingKey m)
                   StreetRun.Effect.HUD.drawHiscore'11) -}
c5b9233a5760eab6e60b76775b10fb84
  drawHiscore'11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite BuildingKey m"#) -}
b45f10e6ffe4174889961f759575c34c
  drawHiscore'12 ::
    StreetRun.Engine.Types.DrawSprite StreetRun.Engine.Bird.BirdKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Engine.Types.DrawSprite
                        StreetRun.Engine.Bird.BirdKey m)
                   StreetRun.Effect.HUD.drawHiscore'13) -}
71613d289036c66b3ac213504e836535
  drawHiscore'13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite BirdKey m"#) -}
8ec4452e709d93c7b150b46e4ce87a7d
  drawHiscore'14 ::
    StreetRun.Engine.Types.DrawSprite StreetRun.Engine.Rock.RockKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Engine.Types.DrawSprite
                        StreetRun.Engine.Rock.RockKey m)
                   StreetRun.Effect.HUD.drawHiscore'15) -}
49a649dea090c9bbd694ef58ca91d5b6
  drawHiscore'15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite RockKey m"#) -}
e99ac77975b2dec1dfb192f4351457fa
  drawHiscore'16 ::
    StreetRun.Engine.Types.DrawSprite StreetRun.Engine.Lava.LavaKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Engine.Types.DrawSprite
                        StreetRun.Engine.Lava.LavaKey m)
                   StreetRun.Effect.HUD.drawHiscore'17) -}
1a7575e69f36ce72dde629168eb6003e
  drawHiscore'17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite LavaKey m"#) -}
fc8d98abe610a9d6da50a76e94c983bb
  drawHiscore'18 ::
    StreetRun.Engine.Types.DrawSprite
      StreetRun.Engine.Runner.RunnerKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Engine.Types.DrawSprite
                        StreetRun.Engine.Runner.RunnerKey m)
                   StreetRun.Effect.HUD.drawHiscore'19) -}
59c68e65c1430846533abe85a86c6e40
  drawHiscore'19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite RunnerKey m"#) -}
689489569f3a83535cf3837ee5484d13
  drawHiscore'2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1234#) -}
8a40bcf7a057cbffcbf89a23f04c5dbb
  drawHiscore'20 ::
    m (StreetRun.Engine.Types.Animations
         StreetRun.Engine.Grass.GrassKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Engine.Types.Animations
                           StreetRun.Engine.Grass.GrassKey))
                   StreetRun.Effect.HUD.drawHiscore'21) -}
3b6f16d89972225b2886fc36d3be1f3e
  drawHiscore'21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations GrassKey)"#) -}
f7b2f2265025d362c0e2474c771dd474
  drawHiscore'22 ::
    m (StreetRun.Engine.Types.Animations
         StreetRun.Engine.Building.BuildingKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Engine.Types.Animations
                           StreetRun.Engine.Building.BuildingKey))
                   StreetRun.Effect.HUD.drawHiscore'23) -}
51f1632a7c17682f02b1ac63fd6c549f
  drawHiscore'23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations BuildingKey)"#) -}
44009b8ea836f736f75e6fdc01baff31
  drawHiscore'24 ::
    m (StreetRun.Engine.Types.Animations StreetRun.Engine.Bird.BirdKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Engine.Types.Animations
                           StreetRun.Engine.Bird.BirdKey))
                   StreetRun.Effect.HUD.drawHiscore'25) -}
f1acc48110dd73a14333fb0c618ae99d
  drawHiscore'25 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations BirdKey)"#) -}
7d96285182b3ce1dace5dbe9250d9b4f
  drawHiscore'26 ::
    m (StreetRun.Engine.Types.Animations StreetRun.Engine.Rock.RockKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Engine.Types.Animations
                           StreetRun.Engine.Rock.RockKey))
                   StreetRun.Effect.HUD.drawHiscore'27) -}
288158398a1acf12e83ce15de62b11a9
  drawHiscore'27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations RockKey)"#) -}
15f5e0937f6a8b2d3206ff38b9738000
  drawHiscore'28 ::
    m (StreetRun.Engine.Types.Animations StreetRun.Engine.Lava.LavaKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Engine.Types.Animations
                           StreetRun.Engine.Lava.LavaKey))
                   StreetRun.Effect.HUD.drawHiscore'29) -}
ccccdf1ca36a4cb798c5857a685e14a4
  drawHiscore'29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations LavaKey)"#) -}
ecb73995fa185b4988d794dba8c48594
  drawHiscore'3 ::
    StreetRun.Engine.Common.CommonVars
    -> StreetRun.Engine.Common.CommonVars
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Engine.Common.CommonVars) -> v) -}
5317303bac90075c437fdbcc3380ee43
  drawHiscore'30 ::
    m (StreetRun.Engine.Types.Animations
         StreetRun.Engine.Runner.RunnerKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Engine.Types.Animations
                           StreetRun.Engine.Runner.RunnerKey))
                   StreetRun.Effect.HUD.drawHiscore'31) -}
dae8af4208d956de731f5206b33d87dd
  drawHiscore'31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations RunnerKey)"#) -}
bedc950a2cad3f97baecc865f105114a
  drawHiscore'32 :: m ()
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m ())
                   StreetRun.Effect.HUD.drawHiscore'33) -}
4b384bc23171e0c95a60343f3f92c168
  drawHiscore'33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m ()"#) -}
58a692a81f011fecf74d8a9349921cca
  drawHiscore'34 :: GHC.Base.String -> m a
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (forall a. GHC.Base.String -> m a)
                   StreetRun.Effect.HUD.drawHiscore'35) -}
0875fe943d8928fe4cbca8d614309b6b
  drawHiscore'35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww forall a. String -> m a"#) -}
335883351d8fce40bc1176eb514ca2cb
  drawHiscore'36 :: GHC.Base.Applicative m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (GHC.Base.Applicative m)
                   StreetRun.Effect.HUD.drawHiscore'37) -}
d65b58b7aae513e6e477e459f2242e60
  drawHiscore'37 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww Applicative m"#) -}
0f3a9d75bfbc83e7fe3b23b303838cd9
  drawHiscore'38 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((StreetRun.Effect.HUD.drawHiscore'40,
                  StreetRun.Effect.HUD.drawHiscore'39)) -}
082946fc66d6cb7c31419fb18d3a3dbe
  drawHiscore'39 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
169167bc0e1e3105d229c80b9b5b4fd0
  drawHiscore'4 :: StreetRun.Engine.Types.Percent -> m ()
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Engine.Types.Percent -> m ())
                   StreetRun.Effect.HUD.drawHiscore'5) -}
c1f0d7462c495014f59d80978dfcb7a5
  drawHiscore'40 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1180#) -}
a7b5a4a4436da542db9135c1fce94803
  drawHiscore'5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww Percent -> m ()"#) -}
bbfd3c7f9cd73e27b4dac4bd8ab369b0
  drawHiscore'6 :: (GHC.Types.Int, GHC.Types.Int) -> m ()
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ ((GHC.Types.Int, GHC.Types.Int) -> m ())
                   StreetRun.Effect.HUD.drawHiscore'7) -}
fda9987217ad6152d949e5bf1d0838b7
  drawHiscore'7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww (Int, Int) -> m ()"#) -}
90c1d32b3e29f1c709a8b895bb99dbed
  drawHiscore'8 ::
    StreetRun.Engine.Types.DrawSprite StreetRun.Engine.Grass.GrassKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Engine.Types.DrawSprite
                        StreetRun.Engine.Grass.GrassKey m)
                   StreetRun.Effect.HUD.drawHiscore'9) -}
784943f61f11901186d207df3e7b449c
  drawHiscore'9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite GrassKey m"#) -}
edf9cdd6df58abc315539fa364814c81
  drawNumbers ::
    StreetRun.Effect.Renderer.Renderer m =>
    GHC.Integer.Type.Integer -> (GHC.Types.Int, GHC.Types.Int) -> m ()
  {- Arity: 3,
     Strictness: <L,U(U(A,A,C(C1(U)),C(U),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(C1(U)),A)><S,U><S,1*U(U(U),U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: StreetRun.Effect.Renderer.Renderer m)
                   (w1 :: GHC.Integer.Type.Integer)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 StreetRun.Effect.HUD.$wdrawNumbers @ m w w1 ww1 ww2 }) -}
ac8fc99ff55fc08d68949c6a261c1847
  drawScore' ::
    (StreetRun.Effect.Renderer.Renderer m,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Engine.Work_func.HasPlayVars s) =>
    m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(A,1*C1(C1(U)),C(C1(U)),C(U),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(C1(U)),A)><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: StreetRun.Effect.Renderer.Renderer m)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Engine.Work_func.HasPlayVars s) ->
                 case w of ww { StreetRun.Effect.Renderer.C:Renderer ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 case ww1 of ww27 { GHC.Base.C:Monad ww28 ww29 ww30 ww31 ww32 ->
                 StreetRun.Effect.HUD.$wdrawScore'
                   @ m
                   @ s
                   ww29
                   ww30
                   ww31
                   ww25
                   w1
                   w2 } }) -}
9dcc479e8321a0b0d1bf1bf2d2495ebc
  drawScore'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100#) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

