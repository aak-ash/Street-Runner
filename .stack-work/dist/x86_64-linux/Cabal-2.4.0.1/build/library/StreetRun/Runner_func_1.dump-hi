
==================== FINAL INTERFACE ====================
2019-04-26 14:29:05.940472752 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Runner_func_1 8064
  interface hash: 6352674fdc2062e89adfe4dbf40eeef3
  ABI hash: bdddcc72b2b205ac6ed65be0261303a7
  export-list hash: 5dd8b90845ed790a7a36c82e6f4d7138
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Runner_func_1.addStocks
  StreetRun.Runner_func_1.applyHurt
  StreetRun.Runner_func_1.nextStocks
  StreetRun.Runner_func_1.showRunner
  StreetRun.Runner_func_1.stepRunnerAction
  StreetRun.Runner_func_1.stepRunnerPosition
  StreetRun.Runner_func_1.stepRunnerState
  StreetRun.Runner_func_1.stepSpeed
  StreetRun.Runner_func_1.stepZoom
module dependencies: StreetRun.CFL StreetRun.Camera
                     StreetRun.Hurdle StreetRun.Hurdle_1 StreetRun.Input
                     StreetRun.Physics StreetRun.Runner StreetRun.Runner_func_2
                     StreetRun.Snag StreetRun.Step StreetRun.Types
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 deepseq-1.4.4.0
                      distributive-0.6 dlist-0.8.0.6 exceptions-0.10.1 free-5.1
                      ghc-boot-th-8.6.4 ghc-prim-0.5.3 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2 kan-extensions-5.2
                      key-state-0.2.0 lens-4.17 libyaml-0.1.1.0 linear-1.20.8 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17 scientific-0.3.6.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 th-abstraction-0.2.11.0
                      time-1.8.0.2 time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      transformers-base-0.4.5.2 transformers-compat-0.6.2
                      unliftio-core-0.1.2.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.2 yaml-0.11.0.0
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show linear-1.20.8:Linear.Instances
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Plucker linear-1.20.8:Linear.Quaternion
                         linear-1.20.8:Linear.V linear-1.20.8:Linear.V0
                         linear-1.20.8:Linear.V1 linear-1.20.8:Linear.V2
                         linear-1.20.8:Linear.V3 linear-1.20.8:Linear.V4
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate cf529f033c38156be2990062be8eb570
import  -/  base-4.12.0.0:Data.Foldable 5f70351366640f007be66681d2212df8
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Float ccb68fbeaab348f60d11c8132d51af5d
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  key-state-0.2.0:KeyState f505d200ccd373546afa68666240df7e
import  -/  linear-1.20.8:Linear 04ff2913b766e124dece4465ec5ad3d4
import  -/  safe-0.3.17:Safe 436789855584374f8b9a2b8b149b8684
import  -/  StreetRun.CFL 22aaa7e917fe6023bc75b650c540e607
  exports: f389828e267831208731f8c3eb015474
  frameDeltaSeconds 9605a9c4d4e8e9e818a55364604b43d7
import  -/  StreetRun.Camera 15520c15c72428459c71d35d468598c8
  exports: 445eb368813d35f6641c1446797753f7
import  -/  StreetRun.Hurdle 38a26fa541ce5ced9eea0f70d3aa69b6
  exports: ccac325c207e939d1f0d01c3da87ee30
import  -/  StreetRun.Hurdle_1 c9e76027407717b022743d66c2f85407
  exports: be3dc5eb0f18c89559dce1b425bb13f5
import  -/  StreetRun.Input 2b2882bb9ccf0deac02d72ccd2af9474
  exports: 794b8afcff1485016b9c41551ca5bab1
  $sel:iDown:Input f50c2ab9e2082623275c9cc57e0e92df
  $sel:iUp:Input f50c2ab9e2082623275c9cc57e0e92df
  Input f50c2ab9e2082623275c9cc57e0e92df
import  -/  StreetRun.Physics 913327b3ebcb9b45610bccf968b96819
  exports: 9d3a92dda1fb515a473dcd811827989d
import  -/  StreetRun.Runner a6abbd291e744158bf9018a60f48d314
  exports: ae88bb9ed2797ab0ae7bfb3fb6716c40
  $sel:dsAction:RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
  $sel:dsHeight:RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
  $sel:dsHurt:RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
  $sel:dsRecover:RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
  RunnerAction 96b981a2adf5042b7be2258f10bd37f0
  RunnerAction'Duck aa99514d3c4d70fb8300e8d80209d403
  RunnerAction'Hurt 0b414f4d4215180b5f3dd3d581dcc132
  RunnerAction'Jump a4fd8fd2893a082d05e81ff1c9516470
  RunnerAction'Move 909c36157f46dd71ce486c75b2b34ef1
  RunnerKey 246fbc2203e765942b6e843f2c5465c5
  RunnerKey'Hurt 49f1b84c2266416190b6ba1a850161b3
  RunnerKey'Kick 3cd65175a6bf6c6362b9251f8d73343d
  RunnerKey'Move ff1f32316b00888d847298fa42e183e2
  RunnerKey'Sneak 739cf650665031108def31bdfd3dde88
  RunnerState 802f4153594574704bc04dfd1a8b9017
  RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
import  -/  StreetRun.Runner_func_2 850b3567ef6c7c4675339eaa541ca68a
  exports: 132f0584768b112cf2826c60192e01cb
import  -/  StreetRun.Step 290ae331db595dd4cf6d5e1e70227106
  exports: 719fef8fe6a2dea83d42318f70df48fb
  Step daa3ab940f53a2ea3c69c832d1d2d582
  Step'Change cd810651f7950f648570405c0497b830
  Step'Sustain 3fd1f4686ef7e95fd855f3c5806c6dc9
  smash 05906d7c152d8c605e26773ad8eebc8e
import  -/  StreetRun.Types fe57a12901e3ac69e610bc5ec1ffe588
  exports: 68eec0a854069d6ebcc9ba499b980fc6
  Animations a3f8cdd403e06536e6d6c806da810a9f
  Percent ba7abb7eeed8b328d8b72349c7c4fef0
  Score 4bad63bb3fa03e71441e81262a8b345e
  Seconds a9822968438ab4a0fccda00b12150109
  Stocks 7e2313b523e61aeeac98a063f19e7634
  clamp e1ad8578b50b6091ffb795f7d612ef1e
import  -/  text-1.2.3.1:Data.Text 18aabeaea44861e012250635c667d309
8b32d55453f76fa4125ca4cbd47a278f
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Runner_func_1.$trModule3
                   StreetRun.Runner_func_1.$trModule1) -}
0fbc1c45cd146b10b2c395e6c0b605a7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Runner_func_1.$trModule2) -}
be2d015d316ac33e5758918fb348e0a0
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Runner_func_1"#) -}
1b9412cfb2c5b4a3163ab272854d5594
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Runner_func_1.$trModule4) -}
f084ae1b45fef23e393d1fbb44238cb0
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
4e33c337b159c6497b2c2893d81aeef3
  $waddStocks :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = let {
                       $j1 :: GHC.Types.Bool <join 0>
                       = let {
                           $j2 :: GHC.Types.Bool <join 0>
                           = let {
                               $j3 :: GHC.Types.Bool <join 0>
                               = let {
                                   $j4 :: GHC.Types.Bool <join 0>
                                   = let {
                                       $j5 :: GHC.Types.Bool <join 0>
                                       = let {
                                           $j6 :: GHC.Types.Bool <join 0>
                                           = case GHC.Prim.>=# ww1 100# of lwild {
                                               DEFAULT -> GHC.Types.False
                                               1#
                                               -> case GHC.Classes.modInt#
                                                         ww
                                                         50# of ww2 { DEFAULT ->
                                                  case GHC.Classes.modInt#
                                                         ww1
                                                         50# of ww3 { DEFAULT ->
                                                  GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.># ww2 ww3) } } }
                                         } in
                                         case GHC.Prim.<# ww 75# of lwild {
                                           DEFAULT -> $j6
                                           1#
                                           -> case GHC.Prim.>=# ww1 75# of lwild1 {
                                                DEFAULT -> $j6 1# -> GHC.Types.True } }
                                     } in
                                     case GHC.Prim.<# ww 50# of lwild {
                                       DEFAULT -> $j5
                                       1#
                                       -> case GHC.Prim.>=# ww1 50# of lwild1 {
                                            DEFAULT -> $j5 1# -> GHC.Types.True } }
                                 } in
                                 case GHC.Prim.<# ww 35# of lwild {
                                   DEFAULT -> $j4
                                   1#
                                   -> case GHC.Prim.>=# ww1 35# of lwild1 {
                                        DEFAULT -> $j4 1# -> GHC.Types.True } }
                             } in
                             case GHC.Prim.<# ww 20# of lwild {
                               DEFAULT -> $j3
                               1#
                               -> case GHC.Prim.>=# ww1 20# of lwild1 {
                                    DEFAULT -> $j3 1# -> GHC.Types.True } }
                         } in
                         case GHC.Prim.<# ww 10# of lwild {
                           DEFAULT -> $j2
                           1#
                           -> case GHC.Prim.>=# ww1 10# of lwild1 {
                                DEFAULT -> $j2 1# -> GHC.Types.True } }
                     } in
                     case GHC.Prim.<# ww 5# of lwild {
                       DEFAULT -> $j1
                       1#
                       -> case GHC.Prim.>=# ww1 5# of lwild1 {
                            DEFAULT -> $j1 1# -> GHC.Types.True } }
                 } in
                 case GHC.Prim.<# ww 1# of lwild {
                   DEFAULT -> $j
                   1#
                   -> case GHC.Prim.>=# ww1 1# of lwild1 {
                        DEFAULT -> $j 1# -> GHC.Types.True } }) -}
bdd1c4ffc401b0aeb497d81d76833590
  $wstepRunnerAction ::
    StreetRun.Input.Input
    -> StreetRun.Runner.RunnerAction
    -> GHC.Maybe.Maybe StreetRun.Types.Percent
    -> GHC.Maybe.Maybe StreetRun.Types.Percent
    -> StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U(1*U,A),1*U(1*U,A),A,A)><S,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.Input.Input)
                   (ww :: StreetRun.Runner.RunnerAction)
                   (ww1 :: GHC.Maybe.Maybe StreetRun.Types.Percent)
                   (ww2 :: GHC.Maybe.Maybe StreetRun.Types.Percent) ->
                 case ww of wild {
                   StreetRun.Runner.RunnerAction'Move
                   -> case w of wild1 { StreetRun.Input.Input ds1 ds2 ds3 ds4 ds5 ->
                      case ds2 of wild2 { KeyState.KeyState ds7 ds8 ->
                      case ds7 of wild3 {
                        DEFAULT
                        -> case ds3 of wild4 { KeyState.KeyState ds9 ds10 ->
                           case ds9 of wild5 {
                             DEFAULT -> StreetRun.Runner_func_1.stepRunnerAction9
                             KeyState.KeyStatus'Pressed
                             -> StreetRun.Runner_func_1.stepRunnerAction8
                             KeyState.KeyStatus'Held
                             -> StreetRun.Runner_func_1.stepRunnerAction8 } }
                        KeyState.KeyStatus'Pressed
                        -> StreetRun.Runner_func_1.stepRunnerAction7
                        KeyState.KeyStatus'Held
                        -> StreetRun.Runner_func_1.stepRunnerAction7 } } }
                   StreetRun.Runner.RunnerAction'Duck
                   -> case ww1 of wild1 {
                        GHC.Maybe.Nothing -> StreetRun.Runner_func_1.stepRunnerAction6
                        GHC.Maybe.Just p
                        -> case p `cast`
                                (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                           case GHC.Prim.ltFloat# x 1.0# of lwild {
                             DEFAULT -> StreetRun.Runner_func_1.stepRunnerAction6
                             1# -> StreetRun.Runner_func_1.stepRunnerAction5 } } }
                   StreetRun.Runner.RunnerAction'Jump
                   -> case ww1 of wild1 {
                        GHC.Maybe.Nothing -> StreetRun.Runner_func_1.stepRunnerAction4
                        GHC.Maybe.Just p
                        -> case p `cast`
                                (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                           case GHC.Prim.ltFloat# x 1.0# of lwild {
                             DEFAULT -> StreetRun.Runner_func_1.stepRunnerAction4
                             1# -> StreetRun.Runner_func_1.stepRunnerAction3 } } }
                   StreetRun.Runner.RunnerAction'Hurt
                   -> case ww2 of wild1 {
                        GHC.Maybe.Nothing -> StreetRun.Runner_func_1.stepRunnerAction2
                        GHC.Maybe.Just p
                        -> case p `cast`
                                (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                           case GHC.Prim.ltFloat# x 1.0# of lwild {
                             DEFAULT -> StreetRun.Runner_func_1.stepRunnerAction2
                             1# -> StreetRun.Runner_func_1.stepRunnerAction1 } } } }) -}
5bdcad75ed7dadd84d50ed53a4672a2f
  $wstepRunnerState ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> StreetRun.Runner.RunnerState
    -> (# StreetRun.Runner.RunnerAction,
          GHC.Maybe.Maybe StreetRun.Types.Percent,
          GHC.Maybe.Maybe StreetRun.Types.Percent,
          GHC.Maybe.Maybe StreetRun.Types.Percent #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(A,1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.Step.Step
                           StreetRun.Runner.RunnerAction)
                   (w1 :: StreetRun.Runner.RunnerState) ->
                 let {
                   recover :: GHC.Maybe.Maybe StreetRun.Types.Percent
                   = case w1 of wild { StreetRun.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds4 of wild1 {
                       GHC.Maybe.Nothing -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 1.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Types.N:Percent[0])) }) } } } }
                 } in
                 let {
                   hurt :: GHC.Maybe.Maybe StreetRun.Types.Percent
                   = case w1 of wild { StreetRun.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds3 of wild1 {
                       GHC.Maybe.Nothing -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 4.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Types.N:Percent[0])) }) } } } }
                 } in
                 let {
                   height :: GHC.Maybe.Maybe StreetRun.Types.Percent
                   = case w1 of wild { StreetRun.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds2 of wild1 {
                       GHC.Maybe.Nothing -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 4.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Types.N:Percent[0])) }) } } } }
                 } in
                 case w of wild {
                   StreetRun.Step.Step'Change ds da
                   -> case da of wild1 {
                        DEFAULT
                        -> (# case hurt of wild2 {
                                GHC.Maybe.Nothing
                                -> case height of wild3 {
                                     GHC.Maybe.Nothing -> wild1
                                     GHC.Maybe.Just a1 -> StreetRun.Runner.RunnerAction'Jump }
                                GHC.Maybe.Just a1 -> StreetRun.Runner.RunnerAction'Hurt },
                              height, hurt, recover #)
                        StreetRun.Runner.RunnerAction'Jump
                        -> (# StreetRun.Runner.RunnerAction'Jump,
                              StreetRun.Runner_func_1.stepRunnerState1, hurt, recover #)
                        StreetRun.Runner.RunnerAction'Hurt
                        -> (# StreetRun.Runner.RunnerAction'Hurt, height,
                              StreetRun.Runner_func_1.stepRunnerState1,
                              StreetRun.Runner_func_1.stepRunnerState1 #) }
                   StreetRun.Step.Step'Sustain ds
                   -> (# case hurt of wild1 {
                           GHC.Maybe.Nothing
                           -> case height of wild2 {
                                GHC.Maybe.Nothing -> ds
                                GHC.Maybe.Just a1 -> StreetRun.Runner.RunnerAction'Jump }
                           GHC.Maybe.Just a1 -> StreetRun.Runner.RunnerAction'Hurt },
                         height, hurt, recover #) }) -}
cf8e3f4b6bc966a31a1989a3ff3d837b
  $wstepSpeed ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> GHC.Prim.Float# -> GHC.Prim.Float#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (w :: StreetRun.Step.Step
                           StreetRun.Runner.RunnerAction)
                   (ww :: GHC.Prim.Float#) ->
                 case w of wild {
                   StreetRun.Step.Step'Change ds1 a1
                   -> case a1 of wild1 {
                        StreetRun.Runner.RunnerAction'Move
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.plusFloat# ww 3.0e-2#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Runner.RunnerAction'Duck
                        -> case GHC.Prim.gtFloat# ww 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# ww 1.0# of lwild1 {
                                  DEFAULT -> ww 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Runner.RunnerAction'Jump
                        -> case GHC.Prim.gtFloat# ww 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# ww 1.0# of lwild1 {
                                  DEFAULT -> ww 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Runner.RunnerAction'Hurt
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww 0.15#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# } }
                   StreetRun.Step.Step'Sustain a1
                   -> case a1 of wild1 {
                        StreetRun.Runner.RunnerAction'Move
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.plusFloat# ww 3.0e-2#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Runner.RunnerAction'Duck
                        -> case GHC.Prim.gtFloat# ww 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# ww 1.0# of lwild1 {
                                  DEFAULT -> ww 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Runner.RunnerAction'Jump
                        -> case GHC.Prim.gtFloat# ww 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# ww 1.0# of lwild1 {
                                  DEFAULT -> ww 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Runner.RunnerAction'Hurt
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww 0.15#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# } } }) -}
eb7850b77ba3f77b0ffa75e648f50ea9
  $wstepZoom ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> StreetRun.Runner.RunnerState
    -> (# StreetRun.Runner.RunnerAction,
          GHC.Maybe.Maybe StreetRun.Types.Percent,
          GHC.Maybe.Maybe StreetRun.Types.Percent,
          GHC.Maybe.Maybe StreetRun.Types.Percent #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(A,1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.Step.Step
                           StreetRun.Runner.RunnerAction)
                   (w1 :: StreetRun.Runner.RunnerState) ->
                 let {
                   recover :: GHC.Maybe.Maybe StreetRun.Types.Percent
                   = case w1 of wild { StreetRun.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds4 of wild1 {
                       GHC.Maybe.Nothing -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 1.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Types.N:Percent[0])) }) } } } }
                 } in
                 let {
                   hurt :: GHC.Maybe.Maybe StreetRun.Types.Percent
                   = case w1 of wild { StreetRun.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds3 of wild1 {
                       GHC.Maybe.Nothing -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 4.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Types.N:Percent[0])) }) } } } }
                 } in
                 let {
                   height :: GHC.Maybe.Maybe StreetRun.Types.Percent
                   = case w1 of wild { StreetRun.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds2 of wild1 {
                       GHC.Maybe.Nothing -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 4.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Types.N:Percent[0])) }) } } } }
                 } in
                 case w of wild {
                   StreetRun.Step.Step'Change ds da
                   -> case da of wild1 {
                        DEFAULT
                        -> (# case hurt of wild2 {
                                GHC.Maybe.Nothing
                                -> case height of wild3 {
                                     GHC.Maybe.Nothing -> wild1
                                     GHC.Maybe.Just a1 -> StreetRun.Runner.RunnerAction'Duck }
                                GHC.Maybe.Just a1 -> StreetRun.Runner.RunnerAction'Hurt },
                              height, hurt, recover #)
                        StreetRun.Runner.RunnerAction'Duck
                        -> (# StreetRun.Runner.RunnerAction'Duck,
                              StreetRun.Runner_func_1.stepRunnerState1, hurt, recover #)
                        StreetRun.Runner.RunnerAction'Hurt
                        -> (# StreetRun.Runner.RunnerAction'Hurt, height,
                              StreetRun.Runner_func_1.stepRunnerState1,
                              StreetRun.Runner_func_1.stepRunnerState1 #) }
                   StreetRun.Step.Step'Sustain ds
                   -> (# case hurt of wild1 {
                           GHC.Maybe.Nothing
                           -> case height of wild2 {
                                GHC.Maybe.Nothing -> ds
                                GHC.Maybe.Just a1 -> StreetRun.Runner.RunnerAction'Duck }
                           GHC.Maybe.Just a1 -> StreetRun.Runner.RunnerAction'Hurt },
                         height, hurt, recover #) }) -}
8244adc782f840dc6aa2cb2ed93cdde2
  addStocks ::
    StreetRun.Types.Score -> StreetRun.Types.Score -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Types.Score) (w1 :: StreetRun.Types.Score) ->
                 case w `cast`
                      (StreetRun.Types.N:Score[0]) of ww { GHC.Types.I# ww1 ->
                 case w1
                        `cast`
                      (StreetRun.Types.N:Score[0]) of ww2 { GHC.Types.I# ww3 ->
                 StreetRun.Runner_func_1.$waddStocks ww1 ww3 } }) -}
7cfed591a1d0e562745bbbc1acbdc0fe
  applyHurt ::
    GHC.Types.Bool
    -> StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> GHC.Maybe.Maybe StreetRun.Types.Percent
    -> StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (collision :: GHC.Types.Bool)
                   (stepDa :: StreetRun.Step.Step StreetRun.Runner.RunnerAction)
                   (recover :: GHC.Maybe.Maybe StreetRun.Types.Percent) ->
                 case collision of wild {
                   GHC.Types.False -> stepDa
                   GHC.Types.True
                   -> case recover of wild1 {
                        GHC.Maybe.Nothing
                        -> case stepDa of wild2 {
                             StreetRun.Step.Step'Change da ds
                             -> StreetRun.Step.Step'Change
                                  @ StreetRun.Runner.RunnerAction
                                  da
                                  StreetRun.Runner.RunnerAction'Hurt
                             StreetRun.Step.Step'Sustain ds
                             -> case ds of wild3 {
                                  DEFAULT
                                  -> StreetRun.Step.Step'Change
                                       @ StreetRun.Runner.RunnerAction
                                       wild3
                                       StreetRun.Runner.RunnerAction'Hurt
                                  StreetRun.Runner.RunnerAction'Hurt -> wild2 } }
                        GHC.Maybe.Just a1 -> stepDa } }) -}
95091e4c4c96f00db43792d0f2d244e2
  nextStocks ::
    StreetRun.Types.Score
    -> StreetRun.Types.Score
    -> StreetRun.Types.Stocks
    -> StreetRun.Types.Stocks
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                StreetRun.Runner_func_1.nextStocks1
                  `cast`
                (<StreetRun.Types.Score>_R
                 ->_R <StreetRun.Types.Score>_R
                 ->_R <StreetRun.Types.Stocks>_R
                 ->_R Sym (StreetRun.Types.N:Stocks[0])) -}
e30a8854ea29547e108c23b438ce9d13
  nextStocks1 ::
    StreetRun.Types.Score
    -> StreetRun.Types.Score -> StreetRun.Types.Stocks -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Types.Score)
                   (w1 :: StreetRun.Types.Score)
                   (w2 :: StreetRun.Types.Stocks) ->
                 case w `cast`
                      (StreetRun.Types.N:Score[0]) of ww { GHC.Types.I# ww1 ->
                 case w1
                        `cast`
                      (StreetRun.Types.N:Score[0]) of ww2 { GHC.Types.I# ww3 ->
                 case w2
                        `cast`
                      (StreetRun.Types.N:Stocks[0]) of ww4 { GHC.Types.I# ww5 ->
                 case StreetRun.Runner_func_1.$waddStocks ww1 ww3 of wild {
                   GHC.Types.False
                   -> case GHC.Prim.<=# 10# ww5 of lwild {
                        DEFAULT -> GHC.Types.I# ww5 1# -> GHC.Types.I# 10# }
                   GHC.Types.True
                   -> let {
                        y1 :: GHC.Prim.Int# = GHC.Prim.+# ww5 1#
                      } in
                      case GHC.Prim.<=# 10# y1 of lwild {
                        DEFAULT -> GHC.Types.I# y1 1# -> GHC.Types.I# 10# } } } } }) -}
6b858db2d1e4cba16b18d0910487a076
  showRunner :: StreetRun.Runner.RunnerState -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.Runner.RunnerState) ->
                 case ds of wild { StreetRun.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                 case ds4 of wild1 {
                   GHC.Maybe.Nothing -> GHC.Types.True
                   GHC.Maybe.Just percent
                   -> case percent
                             `cast`
                           (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.geFloat#
                           (GHC.Prim.sinFloat#
                              (GHC.Prim.timesFloat# 1000.0# (GHC.Prim.powerFloat# x 3.0#)))
                           0.0#) } } }) -}
b4371f6a54e7937123a4fde4dd7d6c20
  stepRunnerAction ::
    StreetRun.Input.Input
    -> StreetRun.Runner.RunnerState
    -> StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U(1*U,A),1*U(1*U,A),A,A)><S(SLLL),1*U(1*U,1*U,1*U,A)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Input.Input)
                   (w1 :: StreetRun.Runner.RunnerState) ->
                 case w1 of ww { StreetRun.Runner.RunnerState ww1 ww2 ww3 ww4 ->
                 StreetRun.Runner_func_1.$wstepRunnerAction w ww1 ww2 ww3 }) -}
3a4639ad39d1faaef805626504b58491
  stepRunnerAction1 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Step.Step'Sustain
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Hurt) -}
839d07bb000651f51cef1049cce38fae
  stepRunnerAction2 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Step.Step'Change
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Hurt
                   StreetRun.Runner.RunnerAction'Move) -}
997b845ede60ccbed5e38bef1dbbfc15
  stepRunnerAction3 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Step.Step'Sustain
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Jump) -}
76e2c217aafa90d628fbe6f807ef5a69
  stepRunnerAction4 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Step.Step'Change
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Jump
                   StreetRun.Runner.RunnerAction'Move) -}
678ab5de2d1260903eb9cce71afb3671
  stepRunnerAction5 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Step.Step'Sustain
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Duck) -}
50bdf7db18a52507f67211fd696e31e7
  stepRunnerAction6 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Step.Step'Change
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Duck
                   StreetRun.Runner.RunnerAction'Move) -}
2adcde902e04dd2cd9e67fcda3497b6c
  stepRunnerAction7 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Step.Step'Change
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Move
                   StreetRun.Runner.RunnerAction'Jump) -}
de8cce8c34667125d70d3166d54d5a78
  stepRunnerAction8 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Step.Step'Change
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Move
                   StreetRun.Runner.RunnerAction'Duck) -}
175c23415a74237d473c0b06424b4af7
  stepRunnerAction9 ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Step.Step'Sustain
                   @ StreetRun.Runner.RunnerAction
                   StreetRun.Runner.RunnerAction'Move) -}
0cd78cf599b749a9b36710fbc9c5d9ca
  stepRunnerPosition ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> StreetRun.Types.Animations StreetRun.Runner.RunnerKey
    -> Animate.Position
         StreetRun.Runner.RunnerKey StreetRun.Types.Seconds
    -> Animate.Position
         StreetRun.Runner.RunnerKey StreetRun.Types.Seconds
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U,U,U)><L,U(U,U(U),U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Step.Step StreetRun.Runner.RunnerAction)
                   (w1 :: StreetRun.Types.Animations StreetRun.Runner.RunnerKey)
                   (w2 :: Animate.Position
                            StreetRun.Runner.RunnerKey StreetRun.Types.Seconds) ->
                 case w of wild {
                   StreetRun.Step.Step'Change ds da
                   -> case da of wild1 {
                        StreetRun.Runner.RunnerAction'Move
                        -> Animate.Position
                             @ StreetRun.Runner.RunnerKey
                             @ StreetRun.Types.Seconds
                             StreetRun.Runner.RunnerKey'Move
                             Animate.$fShowAnimations1
                             StreetRun.Runner_func_1.stepRunnerPosition4
                               `cast`
                             (Sym (StreetRun.Types.N:Seconds[0]))
                             Animate.Loop'Always
                        StreetRun.Runner.RunnerAction'Duck
                        -> Animate.Position
                             @ StreetRun.Runner.RunnerKey
                             @ StreetRun.Types.Seconds
                             StreetRun.Runner.RunnerKey'Sneak
                             Animate.$fShowAnimations1
                             StreetRun.Runner_func_1.stepRunnerPosition4
                               `cast`
                             (Sym (StreetRun.Types.N:Seconds[0]))
                             Animate.Loop'Always
                        StreetRun.Runner.RunnerAction'Jump
                        -> Animate.Position
                             @ StreetRun.Runner.RunnerKey
                             @ StreetRun.Types.Seconds
                             StreetRun.Runner.RunnerKey'Kick
                             Animate.$fShowAnimations1
                             StreetRun.Runner_func_1.stepRunnerPosition4
                               `cast`
                             (Sym (StreetRun.Types.N:Seconds[0]))
                             StreetRun.Runner_func_1.stepRunnerPosition2
                        StreetRun.Runner.RunnerAction'Hurt
                        -> Animate.Position
                             @ StreetRun.Runner.RunnerKey
                             @ StreetRun.Types.Seconds
                             StreetRun.Runner.RunnerKey'Hurt
                             Animate.$fShowAnimations1
                             StreetRun.Runner_func_1.stepRunnerPosition4
                               `cast`
                             (Sym (StreetRun.Types.N:Seconds[0]))
                             Animate.Loop'Always }
                   StreetRun.Step.Step'Sustain ds
                   -> Animate.stepPosition
                        @ StreetRun.Runner.RunnerKey
                        @ StreetRun.Types.Seconds
                        @ (Animate.SpriteClip StreetRun.Runner.RunnerKey)
                        StreetRun.Runner.$fEnumRunnerKey
                        StreetRun.Types.$fNumSeconds
                        StreetRun.Types.$fOrdSeconds
                        w1
                        w2
                        StreetRun.Runner_func_1.stepRunnerPosition1
                          `cast`
                        (Sym (StreetRun.Types.N:Seconds[0])) }) -}
1161c4938018dce7543101bf5e7c7e75
  stepRunnerPosition1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 1.6667e-2#) -}
d993cb78e17c60bdf7fe1cbdd8ce9f53
  stepRunnerPosition2 :: Animate.Loop
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Animate.Loop'Count
                   StreetRun.Runner_func_1.stepRunnerPosition3) -}
f3796d6a19ed5f1246b59a6175af5e1e
  stepRunnerPosition3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
b2324c74ef8b6ff047cff3e9c44804d1
  stepRunnerPosition4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
6c7b3d2368272533d67c45a9670266ac
  stepRunnerState ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> StreetRun.Runner.RunnerState -> StreetRun.Runner.RunnerState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(A,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Step.Step StreetRun.Runner.RunnerAction)
                   (w1 :: StreetRun.Runner.RunnerState) ->
                 case StreetRun.Runner_func_1.$wstepRunnerState
                        w
                        w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 StreetRun.Runner.RunnerState ww1 ww2 ww3 ww4 }) -}
f53ade5315f32db316066acf26ff6d27
  stepRunnerState1 :: GHC.Maybe.Maybe StreetRun.Types.Percent
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ StreetRun.Types.Percent
                   StreetRun.Runner_func_1.stepRunnerPosition4
                     `cast`
                   (Sym (StreetRun.Types.N:Percent[0]))) -}
0d8ac8cc7b01aba36060713a527ba390
  stepRunnerState2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
233a3703617a1cea97480394db34f5b2
  stepSpeed ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> StreetRun.Types.Percent -> StreetRun.Types.Percent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(S),1*U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Step.Step StreetRun.Runner.RunnerAction)
                   (w1 :: StreetRun.Types.Percent) ->
                 case w1
                        `cast`
                      (StreetRun.Types.N:Percent[0]) of ww { GHC.Types.F# ww1 ->
                 case StreetRun.Runner_func_1.$wstepSpeed w ww1 of ww2 { DEFAULT ->
                 (GHC.Types.F# ww2)
                   `cast`
                 (Sym (StreetRun.Types.N:Percent[0])) } }) -}
18111990cf65468bb7ab7f8297c02e2b
  stepZoom ::
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> StreetRun.Runner.RunnerState -> StreetRun.Runner.RunnerState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(A,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Step.Step StreetRun.Runner.RunnerAction)
                   (w1 :: StreetRun.Runner.RunnerState) ->
                 case StreetRun.Runner_func_1.$wstepZoom
                        w
                        w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 StreetRun.Runner.RunnerState ww1 ww2 ww3 ww4 }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

