
==================== FINAL INTERFACE ====================
2019-04-26 14:29:04.628709677 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Hurdle 8064
  interface hash: 9ba197fe85b1200ddfe26db5a4db1375
  ABI hash: 38a26fa541ce5ced9eea0f70d3aa69b6
  export-list hash: ccac325c207e939d1f0d01c3da87ee30
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Hurdle.birdY
  StreetRun.Hurdle.lavaY
  StreetRun.Hurdle.obstacleAabb
  StreetRun.Hurdle.randomRBoundedEnum
  StreetRun.Hurdle.rockY
  StreetRun.Hurdle.stepObstacles
  StreetRun.Hurdle.streamOfObstacles
  StreetRun.Hurdle.ObstacleInfo{StreetRun.Hurdle.ObstacleInfo'Bird StreetRun.Hurdle.ObstacleInfo'Lava StreetRun.Hurdle.ObstacleInfo'Rock}
  StreetRun.Hurdle.ObstacleState{StreetRun.Hurdle.ObstacleState osDistance osInfo}
  StreetRun.Hurdle.ObstacleTag{StreetRun.Hurdle.ObstacleTag'Bird StreetRun.Hurdle.ObstacleTag'Lava StreetRun.Hurdle.ObstacleTag'Rock}
module dependencies: StreetRun.Physics StreetRun.Snag
                     StreetRun.Types
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 deepseq-1.4.4.0
                      distributive-0.6 dlist-0.8.0.6 exceptions-0.10.1 free-5.1
                      ghc-boot-th-8.6.4 ghc-prim-0.5.3 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2 kan-extensions-5.2
                      lens-4.17 libyaml-0.1.1.0 linear-1.20.8 mtl-2.2.2 pretty-1.1.3.6
                      primitive-0.6.4.0 profunctors-5.3 random-1.1 reflection-2.1.4
                      resourcet-1.2.2 scientific-0.3.6.2 semigroupoids-5.3.2 stm-2.5.0.0
                      tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show linear-1.20.8:Linear.Instances
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Plucker linear-1.20.8:Linear.Quaternion
                         linear-1.20.8:Linear.V linear-1.20.8:Linear.V0
                         linear-1.20.8:Linear.V1 linear-1.20.8:Linear.V2
                         linear-1.20.8:Linear.V3 linear-1.20.8:Linear.V4
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate cf529f033c38156be2990062be8eb570
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Enum 87204abed08db8735fc0be5ab48689aa
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  linear-1.20.8:Linear 04ff2913b766e124dece4465ec5ad3d4
import  -/  linear-1.20.8:Linear.V2 8a9154bf8e5f0fecb2cc8fb6a057e650
import  -/  random-1.1:System.Random a2913fef910fa7846b8be540f8dcdaf5
import  -/  StreetRun.Physics 913327b3ebcb9b45610bccf968b96819
  exports: 9d3a92dda1fb515a473dcd811827989d
  Aabb 13fed78ed9fcb7f2b338aa07327197bb
  Aabb e343afcb44ddfcc03b022243d4611461
import  -/  StreetRun.Snag 91cafec8e0a3bc8aded7f9bc89567610
  exports: c07ed761210af14f8b0800e144209504
  BirdKey f88ace211280dc1d7921a1773951ed44
  LavaKey 3fc67e1f876892a8dbc5f4b90be00bda
  RockKey 5221b707992783923c608096f51488e5
import  -/  StreetRun.Types fe57a12901e3ac69e610bc5ec1ffe588
  exports: 68eec0a854069d6ebcc9ba499b980fc6
  Distance b4174e484e1fd82b32e71de2fbcef362
  Seconds a9822968438ab4a0fccda00b12150109
87a5d4ad614d614ae5f2b575cc03f725
  $fBoundedObstacleTag ::
    GHC.Enum.Bounded StreetRun.Hurdle.ObstacleTag
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleTag
                  StreetRun.Hurdle.ObstacleTag'Lava
                  StreetRun.Hurdle.ObstacleTag'Bird -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag :: GHC.Enum.Enum StreetRun.Hurdle.ObstacleTag
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleTag
                  StreetRun.Hurdle.$fEnumObstacleTag_$csucc
                  StreetRun.Hurdle.$fEnumObstacleTag_$cpred
                  StreetRun.Hurdle.$fEnumObstacleTag_$ctoEnum
                  StreetRun.Hurdle.$fEnumObstacleTag_$cfromEnum
                  StreetRun.Hurdle.$fEnumObstacleTag_$cenumFrom
                  StreetRun.Hurdle.$fEnumObstacleTag_$cenumFromThen
                  StreetRun.Hurdle.$fEnumObstacleTag_$cenumFromTo
                  StreetRun.Hurdle.$fEnumObstacleTag_$cenumFromThenTo -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag1 :: [StreetRun.Hurdle.ObstacleTag]
  {- Unfolding: (StreetRun.Hurdle.$fEnumObstacleTag_go3 2#) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag2 :: [StreetRun.Hurdle.ObstacleTag]
  {- Unfolding: (StreetRun.Hurdle.$fEnumObstacleTag_go3 1#) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag3 :: [StreetRun.Hurdle.ObstacleTag]
  {- Unfolding: (StreetRun.Hurdle.$fEnumObstacleTag_go3 0#) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag4 :: StreetRun.Hurdle.ObstacleTag
  {- Strictness: x -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag5 :: StreetRun.Hurdle.ObstacleTag
  {- Strictness: x -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_$cenumFrom ::
    StreetRun.Hurdle.ObstacleTag -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (a :: StreetRun.Hurdle.ObstacleTag) ->
                 case a of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> StreetRun.Hurdle.$fEnumObstacleTag3
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> StreetRun.Hurdle.$fEnumObstacleTag2
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> StreetRun.Hurdle.$fEnumObstacleTag1 }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_$cenumFromThen ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_$cenumFromThenTo ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag
    -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_$cenumFromTo ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (x :: StreetRun.Hurdle.ObstacleTag)
                   (y :: StreetRun.Hurdle.ObstacleTag) ->
                 let {
                   $j :: GHC.Prim.Int# -> [StreetRun.Hurdle.ObstacleTag]
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (x1 :: GHC.Prim.Int#)[OneShot] ->
                     case y of wild {
                       StreetRun.Hurdle.ObstacleTag'Lava
                       -> case GHC.Prim.># x1 0# of lwild {
                            DEFAULT -> StreetRun.Hurdle.$fEnumObstacleTag_go2 x1
                            1# -> GHC.Types.[] @ StreetRun.Hurdle.ObstacleTag }
                       StreetRun.Hurdle.ObstacleTag'Rock
                       -> case GHC.Prim.># x1 1# of lwild {
                            DEFAULT -> StreetRun.Hurdle.$fEnumObstacleTag_go1 x1
                            1# -> GHC.Types.[] @ StreetRun.Hurdle.ObstacleTag }
                       StreetRun.Hurdle.ObstacleTag'Bird
                       -> case GHC.Prim.># x1 2# of lwild {
                            DEFAULT -> StreetRun.Hurdle.$fEnumObstacleTag_go x1
                            1# -> GHC.Types.[] @ StreetRun.Hurdle.ObstacleTag } }
                 } in
                 case x of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava -> $j 0#
                   StreetRun.Hurdle.ObstacleTag'Rock -> $j 1#
                   StreetRun.Hurdle.ObstacleTag'Bird -> $j 2# }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_$cfromEnum ::
    StreetRun.Hurdle.ObstacleTag -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: StreetRun.Hurdle.ObstacleTag) ->
                 case a of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava -> GHC.Types.I# 0#
                   StreetRun.Hurdle.ObstacleTag'Rock -> GHC.Types.I# 1#
                   StreetRun.Hurdle.ObstacleTag'Bird -> GHC.Types.I# 2# }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_$cpred ::
    StreetRun.Hurdle.ObstacleTag -> StreetRun.Hurdle.ObstacleTag
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: StreetRun.Hurdle.ObstacleTag) ->
                 case a of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> StreetRun.Hurdle.$fEnumObstacleTag4
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> StreetRun.Hurdle.ObstacleTag'Lava
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> StreetRun.Hurdle.ObstacleTag'Rock }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_$csucc ::
    StreetRun.Hurdle.ObstacleTag -> StreetRun.Hurdle.ObstacleTag
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: StreetRun.Hurdle.ObstacleTag) ->
                 case a of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> StreetRun.Hurdle.ObstacleTag'Rock
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> StreetRun.Hurdle.ObstacleTag'Bird
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> StreetRun.Hurdle.$fEnumObstacleTag5 }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_$ctoEnum ::
    GHC.Types.Int -> StreetRun.Hurdle.ObstacleTag
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Hurdle.$w$ctoEnum ww1 }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_go ::
    GHC.Prim.Int# -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 1, Strictness: <L,U>m2 -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_go1 ::
    GHC.Prim.Int# -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 1, Strictness: <L,U>m2 -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_go2 ::
    GHC.Prim.Int# -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 1, Strictness: <L,U>m2 -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEnumObstacleTag_go3 ::
    GHC.Prim.Int# -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2 -}
806f72e2d074e60979bb87d0f4952401
  $fEqObstacleInfo :: GHC.Classes.Eq StreetRun.Hurdle.ObstacleInfo
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleInfo
                  StreetRun.Hurdle.$fEqObstacleInfo_$c==
                  StreetRun.Hurdle.$fEqObstacleInfo_$c/= -}
806f72e2d074e60979bb87d0f4952401
  $fEqObstacleInfo_$c/= ::
    StreetRun.Hurdle.ObstacleInfo
    -> StreetRun.Hurdle.ObstacleInfo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: StreetRun.Hurdle.ObstacleInfo)
                   (y :: StreetRun.Hurdle.ObstacleInfo) ->
                 case StreetRun.Hurdle.$fEqObstacleInfo_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
806f72e2d074e60979bb87d0f4952401
  $fEqObstacleInfo_$c== ::
    StreetRun.Hurdle.ObstacleInfo
    -> StreetRun.Hurdle.ObstacleInfo -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: StreetRun.Hurdle.ObstacleInfo)
                   (ds1 :: StreetRun.Hurdle.ObstacleInfo) ->
                 case ds of wild {
                   StreetRun.Hurdle.ObstacleInfo'Lava a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        StreetRun.Hurdle.ObstacleInfo'Lava b1
                        -> case a1 of ww3 { Animate.Position ww4 ww5 ww6 ww7 ->
                           case b1 of ww8 { Animate.Position ww9 ww10 ww11 ww12 ->
                           case ww4 of wild2 { StreetRun.Snag.LavaKey'Idle ->
                           case ww9 of wild3 { StreetRun.Snag.LavaKey'Idle ->
                           case ww5 of wild4 { GHC.Types.I# x ->
                           case ww10 of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case ww6
                                       `cast`
                                     (StreetRun.Types.N:Seconds[0]) of wild6 { GHC.Types.F# x1 ->
                                case ww11
                                       `cast`
                                     (StreetRun.Types.N:Seconds[0]) of wild7 { GHC.Types.F# y1 ->
                                case GHC.Prim.eqFloat# x1 y1 of lwild1 {
                                  DEFAULT -> GHC.Types.False
                                  1# -> Animate.$fEqLoop_$c== ww7 ww12 } } } } } } } } } } }
                   StreetRun.Hurdle.ObstacleInfo'Rock a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        StreetRun.Hurdle.ObstacleInfo'Rock b1
                        -> case a1 of ww3 { Animate.Position ww4 ww5 ww6 ww7 ->
                           case b1 of ww8 { Animate.Position ww9 ww10 ww11 ww12 ->
                           case ww4 of wild2 { StreetRun.Snag.RockKey'Idle ->
                           case ww9 of wild3 { StreetRun.Snag.RockKey'Idle ->
                           case ww5 of wild4 { GHC.Types.I# x ->
                           case ww10 of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case ww6
                                       `cast`
                                     (StreetRun.Types.N:Seconds[0]) of wild6 { GHC.Types.F# x1 ->
                                case ww11
                                       `cast`
                                     (StreetRun.Types.N:Seconds[0]) of wild7 { GHC.Types.F# y1 ->
                                case GHC.Prim.eqFloat# x1 y1 of lwild1 {
                                  DEFAULT -> GHC.Types.False
                                  1# -> Animate.$fEqLoop_$c== ww7 ww12 } } } } } } } } } } }
                   StreetRun.Hurdle.ObstacleInfo'Bird a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        StreetRun.Hurdle.ObstacleInfo'Bird b1
                        -> case a1 of ww3 { Animate.Position ww4 ww5 ww6 ww7 ->
                           case b1 of ww8 { Animate.Position ww9 ww10 ww11 ww12 ->
                           case ww4 of wild2 { StreetRun.Snag.BirdKey'Idle ->
                           case ww9 of wild3 { StreetRun.Snag.BirdKey'Idle ->
                           case ww5 of wild4 { GHC.Types.I# x ->
                           case ww10 of wild5 { GHC.Types.I# y ->
                           case GHC.Prim.==# x y of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case ww6
                                       `cast`
                                     (StreetRun.Types.N:Seconds[0]) of wild6 { GHC.Types.F# x1 ->
                                case ww11
                                       `cast`
                                     (StreetRun.Types.N:Seconds[0]) of wild7 { GHC.Types.F# y1 ->
                                case GHC.Prim.eqFloat# x1 y1 of lwild1 {
                                  DEFAULT -> GHC.Types.False
                                  1# -> Animate.$fEqLoop_$c== ww7 ww12 } } } } } } } } } } } }) -}
95c2800d9f00728984a40ce71c8f5ddb
  $fEqObstacleState :: GHC.Classes.Eq StreetRun.Hurdle.ObstacleState
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleState
                  StreetRun.Hurdle.$fEqObstacleState_$c==
                  StreetRun.Hurdle.$fEqObstacleState_$c/= -}
95c2800d9f00728984a40ce71c8f5ddb
  $fEqObstacleState_$c/= ::
    StreetRun.Hurdle.ObstacleState
    -> StreetRun.Hurdle.ObstacleState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: StreetRun.Hurdle.ObstacleState)
                   (y :: StreetRun.Hurdle.ObstacleState) ->
                 case x of wild { StreetRun.Hurdle.ObstacleState a1 a2 ->
                 case y of wild1 { StreetRun.Hurdle.ObstacleState b1 b2 ->
                 case StreetRun.Hurdle.$fEqObstacleInfo_$c== a1 b1 of wild2 {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True
                   -> case GHC.Classes.eqFloat
                             a2 `cast` (StreetRun.Types.N:Distance[0])
                             b2 `cast` (StreetRun.Types.N:Distance[0]) of wild3 {
                        GHC.Types.False -> GHC.Types.True
                        GHC.Types.True -> GHC.Types.False } } } }) -}
95c2800d9f00728984a40ce71c8f5ddb
  $fEqObstacleState_$c== ::
    StreetRun.Hurdle.ObstacleState
    -> StreetRun.Hurdle.ObstacleState -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SL),1*U(1*U,1*U(U))><S(SL),1*U(1*U,1*U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Hurdle.ObstacleState)
                   (w1 :: StreetRun.Hurdle.ObstacleState) ->
                 case w of ww { StreetRun.Hurdle.ObstacleState ww1 ww2 ->
                 case w1 of ww3 { StreetRun.Hurdle.ObstacleState ww4 ww5 ->
                 StreetRun.Hurdle.$w$c== ww1 ww2 ww4 ww5 } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEqObstacleTag :: GHC.Classes.Eq StreetRun.Hurdle.ObstacleTag
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleTag
                  StreetRun.Hurdle.$fEqObstacleTag_$c==
                  StreetRun.Hurdle.$fEqObstacleTag_$c/= -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEqObstacleTag_$c/= ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: StreetRun.Hurdle.ObstacleTag)
                   (y :: StreetRun.Hurdle.ObstacleTag) ->
                 case x of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        StreetRun.Hurdle.ObstacleTag'Lava -> GHC.Types.False }
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        StreetRun.Hurdle.ObstacleTag'Rock -> GHC.Types.False }
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True
                        StreetRun.Hurdle.ObstacleTag'Bird -> GHC.Types.False } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fEqObstacleTag_$c== ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: StreetRun.Hurdle.ObstacleTag)
                   (ds1 :: StreetRun.Hurdle.ObstacleTag) ->
                 case ds of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        StreetRun.Hurdle.ObstacleTag'Lava -> GHC.Types.True }
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        StreetRun.Hurdle.ObstacleTag'Rock -> GHC.Types.True }
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        StreetRun.Hurdle.ObstacleTag'Bird -> GHC.Types.True } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fOrdObstacleTag :: GHC.Classes.Ord StreetRun.Hurdle.ObstacleTag
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleTag
                  StreetRun.Hurdle.$fEqObstacleTag
                  StreetRun.Hurdle.$fOrdObstacleTag_$ccompare
                  StreetRun.Hurdle.$fOrdObstacleTag_$c<
                  StreetRun.Hurdle.$fOrdObstacleTag_$c<=
                  StreetRun.Hurdle.$fOrdObstacleTag_$c>
                  StreetRun.Hurdle.$fOrdObstacleTag_$c>=
                  StreetRun.Hurdle.$fOrdObstacleTag_$cmax
                  StreetRun.Hurdle.$fOrdObstacleTag_$cmin -}
87a5d4ad614d614ae5f2b575cc03f725
  $fOrdObstacleTag_$c< ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: StreetRun.Hurdle.ObstacleTag)
                   (b :: StreetRun.Hurdle.ObstacleTag) ->
                 case a of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> case b of wild1 {
                        StreetRun.Hurdle.ObstacleTag'Lava -> GHC.Types.False
                        StreetRun.Hurdle.ObstacleTag'Rock -> GHC.Types.True
                        StreetRun.Hurdle.ObstacleTag'Bird -> GHC.Types.True }
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.False
                        StreetRun.Hurdle.ObstacleTag'Bird -> GHC.Types.True }
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> case b of wild1 { DEFAULT -> GHC.Types.False } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fOrdObstacleTag_$c<= ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: StreetRun.Hurdle.ObstacleTag)
                   (b :: StreetRun.Hurdle.ObstacleTag) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case a of wild {
                       StreetRun.Hurdle.ObstacleTag'Lava
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       StreetRun.Hurdle.ObstacleTag'Rock
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       StreetRun.Hurdle.ObstacleTag'Bird
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case b of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava -> $j 0#
                   StreetRun.Hurdle.ObstacleTag'Rock -> $j 1#
                   StreetRun.Hurdle.ObstacleTag'Bird -> $j 2# }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fOrdObstacleTag_$c> ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, True)
                (\ (a :: StreetRun.Hurdle.ObstacleTag)
                   (b :: StreetRun.Hurdle.ObstacleTag) ->
                 StreetRun.Hurdle.$fOrdObstacleTag_$c< b a) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fOrdObstacleTag_$c>= ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: StreetRun.Hurdle.ObstacleTag)
                   (b :: StreetRun.Hurdle.ObstacleTag) ->
                 let {
                   $j :: GHC.Prim.Int# -> GHC.Types.Bool
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (a# :: GHC.Prim.Int#)[OneShot] ->
                     case b of wild {
                       StreetRun.Hurdle.ObstacleTag'Lava
                       -> case GHC.Prim.<# a# 0# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       StreetRun.Hurdle.ObstacleTag'Rock
                       -> case GHC.Prim.<# a# 1# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False }
                       StreetRun.Hurdle.ObstacleTag'Bird
                       -> case GHC.Prim.<# a# 2# of lwild {
                            DEFAULT -> GHC.Types.True 1# -> GHC.Types.False } }
                 } in
                 case a of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava -> $j 0#
                   StreetRun.Hurdle.ObstacleTag'Rock -> $j 1#
                   StreetRun.Hurdle.ObstacleTag'Bird -> $j 2# }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fOrdObstacleTag_$ccompare ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: StreetRun.Hurdle.ObstacleTag)
                   (b :: StreetRun.Hurdle.ObstacleTag) ->
                 case a of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> case b of wild1 {
                        StreetRun.Hurdle.ObstacleTag'Lava -> GHC.Types.EQ
                        StreetRun.Hurdle.ObstacleTag'Rock -> GHC.Types.LT
                        StreetRun.Hurdle.ObstacleTag'Bird -> GHC.Types.LT }
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> case b of wild1 {
                        StreetRun.Hurdle.ObstacleTag'Lava -> GHC.Types.GT
                        StreetRun.Hurdle.ObstacleTag'Rock -> GHC.Types.EQ
                        StreetRun.Hurdle.ObstacleTag'Bird -> GHC.Types.LT }
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        StreetRun.Hurdle.ObstacleTag'Bird -> GHC.Types.EQ } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fOrdObstacleTag_$cmax ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> StreetRun.Hurdle.ObstacleTag
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: StreetRun.Hurdle.ObstacleTag)
                   (y :: StreetRun.Hurdle.ObstacleTag) ->
                 case StreetRun.Hurdle.$fOrdObstacleTag_$c<= x y of wild {
                   GHC.Types.False -> x GHC.Types.True -> y }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fOrdObstacleTag_$cmin ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag -> StreetRun.Hurdle.ObstacleTag
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: StreetRun.Hurdle.ObstacleTag)
                   (y :: StreetRun.Hurdle.ObstacleTag) ->
                 case StreetRun.Hurdle.$fOrdObstacleTag_$c<= x y of wild {
                   GHC.Types.False -> y GHC.Types.True -> x }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag ::
    System.Random.Random StreetRun.Hurdle.ObstacleTag
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleTag
                  StreetRun.Hurdle.$fRandomObstacleTag_$crandomR
                  StreetRun.Hurdle.$fRandomObstacleTag_$crandom
                  StreetRun.Hurdle.$fRandomObstacleTag_$crandomRs
                  StreetRun.Hurdle.$fRandomObstacleTag_$crandoms
                  StreetRun.Hurdle.$fRandomObstacleTag6
                    `cast`
                  (<(StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleTag)>_R
                   ->_R Sym (GHC.Types.N:IO[0] <StreetRun.Hurdle.ObstacleTag>_R))
                  StreetRun.Hurdle.$fRandomObstacleTag1
                    `cast`
                  (Sym (GHC.Types.N:IO[0] <StreetRun.Hurdle.ObstacleTag>_R)) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          StreetRun.Hurdle.ObstacleTag #)
  {- Arity: 1, Strictness: <S,U>m,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, StreetRun.Hurdle.ObstacleTag)
                        @ StreetRun.Hurdle.ObstacleTag
                        r#
                        StreetRun.Hurdle.$fRandomObstacleTag2
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { DEFAULT -> ds1 } } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag2 ::
    System.Random.StdGen
    -> (System.Random.StdGen, StreetRun.Hurdle.ObstacleTag)
  {- Arity: 1, Strictness: <L,U>m,
     Unfolding: (\ (a1 :: System.Random.StdGen) ->
                 case System.Random.$wrandomIvalInteger
                        @ System.Random.StdGen
                        @ GHC.Types.Int
                        System.Random.$fRandomGenStdGen
                        GHC.Num.$fNumInt
                        StreetRun.Hurdle.$fRandomObstacleTag5
                        StreetRun.Hurdle.$fRandomObstacleTag4
                        a1 of ww2 { (#,#) ww3 ww4 ->
                 case ww4 of a'1 { System.Random.StdGen ipv ipv1 ->
                 (a'1,
                  case ww3 of wild1 { GHC.Types.I# x ->
                  case GHC.Classes.modInt# x 3# of ww1 { DEFAULT ->
                  GHC.List.$w!!
                    @ StreetRun.Hurdle.ObstacleTag
                    StreetRun.Hurdle.$fRandomObstacleTag3
                    ww1 } }) } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag3 :: [StreetRun.Hurdle.ObstacleTag]
  {- Unfolding: (case StreetRun.Hurdle.$wgo
                        0# of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ StreetRun.Hurdle.ObstacleTag ww1 ww2 }) -}
6fe2993574b881a8d653035ec09dea3d
  $fRandomObstacleTag4 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (2) -}
bbfc650df1a3e430cbacd7a5477fb412
  $fRandomObstacleTag5 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag6 ::
    (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleTag)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          StreetRun.Hurdle.ObstacleTag #)
  {- Arity: 2, Strictness: <L,U(U,U)><S,U>m,
     Unfolding: (\ (range :: (StreetRun.Hurdle.ObstacleTag,
                              StreetRun.Hurdle.ObstacleTag))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case System.Random.theStdGen
                        `cast`
                      (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild { GHC.STRef.STRef r# ->
                 case GHC.Prim.atomicModifyMutVar#
                        @ GHC.Prim.RealWorld
                        @ System.Random.StdGen
                        @ (System.Random.StdGen, StreetRun.Hurdle.ObstacleTag)
                        @ StreetRun.Hurdle.ObstacleTag
                        r#
                        (\ (a1 :: System.Random.StdGen) ->
                         case range of ww { (,) ww1 ww2 ->
                         case StreetRun.Hurdle.$w$s$crandomR
                                ww1
                                ww2
                                a1 of ww3 { (#,#) ww4 ww5 ->
                         case ww5 of a'1 { System.Random.StdGen ipv ipv1 ->
                         (a'1, ww4) } } })
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of b1 { DEFAULT -> ds1 } } }) -}
2cf832f53d9ec8d0120d646580415253
  $fRandomObstacleTag7 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (1) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag8 ::
    (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleTag)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((StreetRun.Hurdle.ObstacleTag'Lava,
                  StreetRun.Hurdle.ObstacleTag'Bird)) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag_$crandom ::
    System.Random.RandomGen g => g -> (StreetRun.Hurdle.ObstacleTag, g)
  {- Arity: 2,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U(U),1*U(U))),A)><L,U>m,
     Unfolding: InlineRule (2, True, False)
                (\ @ g ($dRandomGen :: System.Random.RandomGen g) (g1 :: g) ->
                 StreetRun.Hurdle.$fRandomObstacleTag_$crandomR
                   @ g
                   $dRandomGen
                   StreetRun.Hurdle.$fRandomObstacleTag8
                   g1) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag_$crandomR ::
    System.Random.RandomGen g =>
    (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleTag)
    -> g -> (StreetRun.Hurdle.ObstacleTag, g)
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U(U),1*U(U))),A)><S,1*U(1*U,1*U)><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ g
                   (w :: System.Random.RandomGen g)
                   (w1 :: (StreetRun.Hurdle.ObstacleTag,
                           StreetRun.Hurdle.ObstacleTag))
                   (w2 :: g) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 case StreetRun.Hurdle.$w$crandomR
                        @ g
                        w
                        ww1
                        ww2
                        w2 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag_$crandomRs ::
    System.Random.RandomGen g =>
    (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleTag)
    -> g -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 3,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U(U),1*U(U))),A)><S,U(U,U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ g
                   ($dRandomGen :: System.Random.RandomGen g)
                   (ival :: (StreetRun.Hurdle.ObstacleTag,
                             StreetRun.Hurdle.ObstacleTag))
                   (g1 :: g) ->
                 GHC.Base.build
                   @ StreetRun.Hurdle.ObstacleTag
                   (\ @ b1
                      (cons :: StreetRun.Hurdle.ObstacleTag -> b1 -> b1)[OneShot]
                      (_nil :: b1)[OneShot] ->
                    letrec {
                      go :: g -> b1 {- Arity: 1 -}
                      = \ (g2 :: g) ->
                        case StreetRun.Hurdle.$fRandomObstacleTag_$crandomR
                               @ g
                               $dRandomGen
                               ival
                               g2 of wild { (,) x g' ->
                        case x of x1 { DEFAULT -> cons x1 (go g') } }
                    } in
                    go g1)) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fRandomObstacleTag_$crandoms ::
    System.Random.RandomGen g => g -> [StreetRun.Hurdle.ObstacleTag]
  {- Arity: 2,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U(U),1*U(U))),A)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ g ($dRandomGen :: System.Random.RandomGen g) (g1 :: g) ->
                 GHC.Base.build
                   @ StreetRun.Hurdle.ObstacleTag
                   (\ @ b1
                      (cons :: StreetRun.Hurdle.ObstacleTag -> b1 -> b1)[OneShot]
                      (_nil :: b1)[OneShot] ->
                    letrec {
                      go :: g -> b1 {- Arity: 1 -}
                      = \ (g2 :: g) ->
                        case StreetRun.Hurdle.$fRandomObstacleTag_$crandomR
                               @ g
                               $dRandomGen
                               StreetRun.Hurdle.$fRandomObstacleTag8
                               g2 of wild { (,) x g' ->
                        case x of x1 { DEFAULT -> cons x1 (go g') } }
                    } in
                    go g1)) -}
806f72e2d074e60979bb87d0f4952401
  $fShowObstacleInfo :: GHC.Show.Show StreetRun.Hurdle.ObstacleInfo
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleInfo
                  StreetRun.Hurdle.$fShowObstacleInfo_$cshowsPrec
                  StreetRun.Hurdle.$fShowObstacleInfo_$cshow
                  StreetRun.Hurdle.$fShowObstacleInfo_$cshowList -}
806f72e2d074e60979bb87d0f4952401
  $fShowObstacleInfo1 ::
    StreetRun.Hurdle.ObstacleInfo -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: StreetRun.Hurdle.ObstacleInfo) ->
                 StreetRun.Hurdle.$w$cshowsPrec 0# w) -}
dd2a9c6266379ee992a4e5ad93a58c4d
  $fShowObstacleInfo2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Hurdle.$fShowObstacleInfo3) -}
d7b93f8cf54b09d5db81cdb3e3007dc3
  $fShowObstacleInfo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleInfo'Bird "#) -}
4a5b86cbeda49db65373ad50795bda65
  $fShowObstacleInfo4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Hurdle.$fShowObstacleInfo5) -}
6a4733017e042e9d4bd8af7d212df104
  $fShowObstacleInfo5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleInfo'Rock "#) -}
e75815c2f37a5db86431a304fa5bcdf6
  $fShowObstacleInfo6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Hurdle.$fShowObstacleInfo7) -}
7e14f8a7986254485e62b8ba2fae6c49
  $fShowObstacleInfo7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleInfo'Lava "#) -}
b214a0375b32beac089ee773c51f83f3
  $fShowObstacleInfo8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
806f72e2d074e60979bb87d0f4952401
  $fShowObstacleInfo_$cshow ::
    StreetRun.Hurdle.ObstacleInfo -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Hurdle.ObstacleInfo) ->
                 StreetRun.Hurdle.$fShowObstacleInfo_$cshowsPrec
                   StreetRun.Hurdle.$fShowObstacleInfo8
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
806f72e2d074e60979bb87d0f4952401
  $fShowObstacleInfo_$cshowList ::
    [StreetRun.Hurdle.ObstacleInfo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Hurdle.ObstacleInfo])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Hurdle.ObstacleInfo
                   StreetRun.Hurdle.$fShowObstacleInfo1
                   ls
                   s) -}
806f72e2d074e60979bb87d0f4952401
  $fShowObstacleInfo_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Hurdle.ObstacleInfo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: StreetRun.Hurdle.ObstacleInfo) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Hurdle.$w$cshowsPrec ww1 w1 }) -}
95c2800d9f00728984a40ce71c8f5ddb
  $fShowObstacleState :: GHC.Show.Show StreetRun.Hurdle.ObstacleState
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleState
                  StreetRun.Hurdle.$fShowObstacleState_$cshowsPrec
                  StreetRun.Hurdle.$fShowObstacleState_$cshow
                  StreetRun.Hurdle.$fShowObstacleState_$cshowList -}
95c2800d9f00728984a40ce71c8f5ddb
  $fShowObstacleState1 ::
    StreetRun.Hurdle.ObstacleState -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>,
     Unfolding: (\ (w :: StreetRun.Hurdle.ObstacleState) ->
                 case w of ww { StreetRun.Hurdle.ObstacleState ww1 ww2 ->
                 StreetRun.Hurdle.$w$cshowsPrec1 0# ww1 ww2 }) -}
f3676df9814c8943ce01b221e16899a2
  $fShowObstacleState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
8382acee83da4e6c640fdd4b3a14d1d0
  $fShowObstacleState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("osDistance = "#) -}
667f47d908d1ecf180ba79a34cb14ac0
  $fShowObstacleState4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("osInfo = "#) -}
1347f31e8801c3418796f8aaf342611a
  $fShowObstacleState5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleState {"#) -}
41c5abd570f6b098f8d83cee0d95ac6e
  $fShowObstacleState6 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Hurdle.$fShowObstacleState2) -}
95c2800d9f00728984a40ce71c8f5ddb
  $fShowObstacleState_$cshow ::
    StreetRun.Hurdle.ObstacleState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U,1*U(U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: StreetRun.Hurdle.ObstacleState) ->
                 case w of ww { StreetRun.Hurdle.ObstacleState ww1 ww2 ->
                 StreetRun.Hurdle.$w$cshow ww1 ww2 }) -}
95c2800d9f00728984a40ce71c8f5ddb
  $fShowObstacleState_$cshowList ::
    [StreetRun.Hurdle.ObstacleState] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Hurdle.ObstacleState])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Hurdle.ObstacleState
                   StreetRun.Hurdle.$fShowObstacleState1
                   ls
                   s) -}
95c2800d9f00728984a40ce71c8f5ddb
  $fShowObstacleState_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Hurdle.ObstacleState -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U(1*U,1*U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: StreetRun.Hurdle.ObstacleState) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { StreetRun.Hurdle.ObstacleState ww3 ww4 ->
                 StreetRun.Hurdle.$w$cshowsPrec1 ww1 ww3 ww4 } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fShowObstacleTag :: GHC.Show.Show StreetRun.Hurdle.ObstacleTag
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Hurdle.ObstacleTag
                  StreetRun.Hurdle.$fShowObstacleTag_$cshowsPrec
                  StreetRun.Hurdle.$fShowObstacleTag_$cshow
                  StreetRun.Hurdle.$fShowObstacleTag_$cshowList -}
77ecca554d11ef2774d216c847c73076
  $fShowObstacleTag1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Hurdle.$fShowObstacleTag2) -}
9010aa84c6d5aa9945400d936e0ad09a
  $fShowObstacleTag2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleTag'Bird"#) -}
0e1091cbf864597092e42f1efa6e2150
  $fShowObstacleTag3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Hurdle.$fShowObstacleTag4) -}
e6f6f83790a659ad50da6b3de854c7bb
  $fShowObstacleTag4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleTag'Rock"#) -}
651620ea73c7f169d672d308a8dab71d
  $fShowObstacleTag5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Hurdle.$fShowObstacleTag6) -}
1beb790698b0e08e4811dd4e2e16e0ca
  $fShowObstacleTag6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleTag'Lava"#) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fShowObstacleTag_$cshow ::
    StreetRun.Hurdle.ObstacleTag -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Hurdle.ObstacleTag) ->
                 case x of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> StreetRun.Hurdle.$fShowObstacleTag5
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> StreetRun.Hurdle.$fShowObstacleTag3
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> StreetRun.Hurdle.$fShowObstacleTag1 }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fShowObstacleTag_$cshowList ::
    [StreetRun.Hurdle.ObstacleTag] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Hurdle.ObstacleTag]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Hurdle.ObstacleTag
                   StreetRun.Hurdle.$w$cshowsPrec2
                   ls
                   s) -}
87a5d4ad614d614ae5f2b575cc03f725
  $fShowObstacleTag_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Hurdle.ObstacleTag -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: StreetRun.Hurdle.ObstacleTag)
                   (w2 :: GHC.Base.String) ->
                 StreetRun.Hurdle.$w$cshowsPrec2 w1 w2) -}
95c2800d9f00728984a40ce71c8f5ddb
  $sel:osDistance:ObstacleState ::
    StreetRun.Hurdle.ObstacleState -> StreetRun.Types.Distance
  RecSel Left StreetRun.Hurdle.ObstacleState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,1*U(U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.Hurdle.ObstacleState) ->
                 case ds of wild { StreetRun.Hurdle.ObstacleState ds1 ds2 ->
                 ds2 }) -}
95c2800d9f00728984a40ce71c8f5ddb
  $sel:osInfo:ObstacleState ::
    StreetRun.Hurdle.ObstacleState -> StreetRun.Hurdle.ObstacleInfo
  RecSel Left StreetRun.Hurdle.ObstacleState
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(1*U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.Hurdle.ObstacleState) ->
                 case ds of wild { StreetRun.Hurdle.ObstacleState ds1 ds2 ->
                 ds1 }) -}
870c39e3c084fe366b7f98bd06a7cf98
  $tc'ObstacleInfo'Bird :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12106176452934709908##
                   16385545285234728001##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tc'ObstacleInfo'Bird2
                   0#
                   StreetRun.Hurdle.$tc'ObstacleInfo'Bird1) -}
7daf1692c573295c2ec199d495674559
  $tc'ObstacleInfo'Bird1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
64f4ebe2f1fc0ce5bf4d9f42472442b7
  $tc'ObstacleInfo'Bird2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Hurdle.$tc'ObstacleInfo'Bird3) -}
4970a59eb1c10813e1a67292f7f841d8
  $tc'ObstacleInfo'Bird3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObstacleInfo'Bird"#) -}
c879f47ddc58cfb50c358921c37cad50
  $tc'ObstacleInfo'Lava :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14420327733409937372##
                   11516678805394995111##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tc'ObstacleInfo'Lava2
                   0#
                   StreetRun.Hurdle.$tc'ObstacleInfo'Lava1) -}
285fab0bbc56863b8d04b19eaf744477
  $tc'ObstacleInfo'Lava1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
21a8ff5bc557cddde70c1ed7ff07753f
  $tc'ObstacleInfo'Lava2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Hurdle.$tc'ObstacleInfo'Lava3) -}
0320ce3ff0ad81387a22452530cc100b
  $tc'ObstacleInfo'Lava3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObstacleInfo'Lava"#) -}
9332b4103d60fbda6b1514c878b40ab7
  $tc'ObstacleInfo'Rock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14713718314811940018##
                   16752157512101560373##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tc'ObstacleInfo'Rock2
                   0#
                   StreetRun.Hurdle.$tc'ObstacleInfo'Rock1) -}
fbf07408aa6b690289c2d858ba848b45
  $tc'ObstacleInfo'Rock1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
88967d0ce687a318361f7ec54423c013
  $tc'ObstacleInfo'Rock2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Hurdle.$tc'ObstacleInfo'Rock3) -}
cb47d57bbe63d18c30913d67f2521d7a
  $tc'ObstacleInfo'Rock3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObstacleInfo'Rock"#) -}
802418a48cf9bba186f442589d6bd7db
  $tc'ObstacleState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9190365014663438541##
                   14082127725380608833##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tc'ObstacleState2
                   0#
                   StreetRun.Hurdle.$tc'ObstacleState1) -}
5900b4bd79621916fac844d36c162a79
  $tc'ObstacleState1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1f591095128807d60bde66ca072654ab
  $tc'ObstacleState2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Hurdle.$tc'ObstacleState3) -}
6a08e897972d24c95c4c99e6afec15c1
  $tc'ObstacleState3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObstacleState"#) -}
fb66bd8c6f9c604f280f227eb8605654
  $tc'ObstacleTag'Bird :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7626990496038804113##
                   4265663517676870262##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tc'ObstacleTag'Bird2
                   0#
                   StreetRun.Hurdle.$tc'ObstacleTag'Bird1) -}
0747c3c1b4628cc46c581487f0791155
  $tc'ObstacleTag'Bird1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
dfbb3fced078968985d47f728fce7e85
  $tc'ObstacleTag'Bird2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Hurdle.$tc'ObstacleTag'Bird3) -}
023d88a3fd3ea1381e4691a70cf03d70
  $tc'ObstacleTag'Bird3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObstacleTag'Bird"#) -}
3298e6943a263964b377f004ff1aeef5
  $tc'ObstacleTag'Lava :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11682220570713106691##
                   17922397134623038726##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tc'ObstacleTag'Lava1
                   0#
                   StreetRun.Hurdle.$tc'ObstacleTag'Bird1) -}
efc191679485a9f66452031e81e2cdff
  $tc'ObstacleTag'Lava1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Hurdle.$tc'ObstacleTag'Lava2) -}
b3570590118931b36bfc0acfae5b4ae0
  $tc'ObstacleTag'Lava2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObstacleTag'Lava"#) -}
f69351526dd72191d6cecd159bd3c3aa
  $tc'ObstacleTag'Rock :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13186584490463878814##
                   4324572235045541664##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tc'ObstacleTag'Rock1
                   0#
                   StreetRun.Hurdle.$tc'ObstacleTag'Bird1) -}
b24ccca99d8bdd9124ca4764d38ca864
  $tc'ObstacleTag'Rock1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Hurdle.$tc'ObstacleTag'Rock2) -}
8e77a48b560ae196140b15fec5c67593
  $tc'ObstacleTag'Rock2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ObstacleTag'Rock"#) -}
862623a34561db6f53c4d9d408fb46b8
  $tcObstacleInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8880492300853059026##
                   16553316068893103566##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tcObstacleInfo1
                   0#
                   GHC.Types.krep$*) -}
e385937cc7f68bdf9fd698420638c586
  $tcObstacleInfo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Hurdle.$tcObstacleInfo2) -}
d04449942ae49e315b8ec27474518bfe
  $tcObstacleInfo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleInfo"#) -}
84442fbf937446db5e54212d409d36eb
  $tcObstacleState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9182835717494623017##
                   3567666759656820131##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tcObstacleState1
                   0#
                   GHC.Types.krep$*) -}
40db457d70feb89fd79c770b7e53b919
  $tcObstacleState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Hurdle.$tcObstacleState2) -}
f7e58bbc7054abaebe9d56375f43b7c1
  $tcObstacleState2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleState"#) -}
a76570e1e687ff3a99bebaf780a79d22
  $tcObstacleTag :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3240402135145893328##
                   16958248037451101978##
                   StreetRun.Hurdle.$trModule
                   StreetRun.Hurdle.$tcObstacleTag1
                   0#
                   GHC.Types.krep$*) -}
e59e5f46cb2b0954fdd7f92bb2c14998
  $tcObstacleTag1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Hurdle.$tcObstacleTag2) -}
f659ad89b19d0eb647acff114730db71
  $tcObstacleTag2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ObstacleTag"#) -}
4231102ce9e7a8d07c8fa0fc9c6f25f9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Hurdle.$trModule3
                   StreetRun.Hurdle.$trModule1) -}
e19402856d3c85669c00b284de1e5550
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Hurdle.$trModule2) -}
11dfb16cc0fca747c3a4966854071889
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Hurdle"#) -}
696bb5ee45d0d82fef388a61bc3c2b9a
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Hurdle.$trModule4) -}
39515b12332c7a12d68fea48224ede7e
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
e83440ef8e8646d84d60297bf64c9ed7
  $w$c== ::
    StreetRun.Hurdle.ObstacleInfo
    -> StreetRun.Types.Distance
    -> StreetRun.Hurdle.ObstacleInfo
    -> StreetRun.Types.Distance
    -> GHC.Types.Bool
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S,1*U><L,1*U(U)><S,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: StreetRun.Hurdle.ObstacleInfo)
                   (ww1 :: StreetRun.Types.Distance)
                   (ww2 :: StreetRun.Hurdle.ObstacleInfo)
                   (ww3 :: StreetRun.Types.Distance) ->
                 case StreetRun.Hurdle.$fEqObstacleInfo_$c== ww ww2 of wild {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> GHC.Classes.eqFloat
                        ww1 `cast` (StreetRun.Types.N:Distance[0])
                        ww3 `cast` (StreetRun.Types.N:Distance[0]) }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $w$crandomR ::
    System.Random.RandomGen g =>
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag
    -> g
    -> (# StreetRun.Hurdle.ObstacleTag, g #)
  {- Arity: 4,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U(U),1*U(U))),A)><L,1*U><L,1*U><L,U>,
     Inline: [2],
     Unfolding: (\ @ g
                   (w :: System.Random.RandomGen g)
                   (ww :: StreetRun.Hurdle.ObstacleTag)
                   (ww1 :: StreetRun.Hurdle.ObstacleTag)
                   (w1 :: g) ->
                 let {
                   ds :: (GHC.Types.Int, g)
                   = let {
                       $j :: GHC.Integer.Type.Integer -> (GHC.Types.Int, g)
                         <join 1> {- Arity: 1, Strictness: <S,U>m -}
                       = \ (karg :: GHC.Integer.Type.Integer)[OneShot] ->
                         case ww of wild {
                           StreetRun.Hurdle.ObstacleTag'Lava
                           -> case System.Random.$wrandomIvalInteger
                                     @ g
                                     @ GHC.Types.Int
                                     w
                                     GHC.Num.$fNumInt
                                     StreetRun.Hurdle.$fRandomObstacleTag5
                                     karg
                                     w1 of ww2 { (#,#) ww3 ww4 ->
                              (ww3, ww4) }
                           StreetRun.Hurdle.ObstacleTag'Rock
                           -> case System.Random.$wrandomIvalInteger
                                     @ g
                                     @ GHC.Types.Int
                                     w
                                     GHC.Num.$fNumInt
                                     StreetRun.Hurdle.$fRandomObstacleTag7
                                     karg
                                     w1 of ww2 { (#,#) ww3 ww4 ->
                              (ww3, ww4) }
                           StreetRun.Hurdle.ObstacleTag'Bird
                           -> case System.Random.$wrandomIvalInteger
                                     @ g
                                     @ GHC.Types.Int
                                     w
                                     GHC.Num.$fNumInt
                                     StreetRun.Hurdle.$fRandomObstacleTag4
                                     karg
                                     w1 of ww2 { (#,#) ww3 ww4 ->
                              (ww3, ww4) } }
                     } in
                     case ww1 of wild {
                       StreetRun.Hurdle.ObstacleTag'Lava
                       -> $j StreetRun.Hurdle.$fRandomObstacleTag5
                       StreetRun.Hurdle.ObstacleTag'Rock
                       -> $j StreetRun.Hurdle.$fRandomObstacleTag7
                       StreetRun.Hurdle.ObstacleTag'Bird
                       -> $j StreetRun.Hurdle.$fRandomObstacleTag4 }
                 } in
                 (# case ds of wild { (,) index g' ->
                    case index of wild1 { GHC.Types.I# x ->
                    case GHC.Classes.modInt# x 3# of ww2 { DEFAULT ->
                    GHC.List.$w!!
                      @ StreetRun.Hurdle.ObstacleTag
                      StreetRun.Hurdle.$fRandomObstacleTag3
                      ww2 } } },
                    case ds of wild { (,) index g' -> g' } #)) -}
2bd607293c3cacaa576f6bc40576f76e
  $w$cshow ::
    StreetRun.Hurdle.ObstacleInfo
    -> StreetRun.Types.Distance -> GHC.Base.String
  {- Arity: 2, Strictness: <L,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: StreetRun.Hurdle.ObstacleInfo)
                   (ww1 :: StreetRun.Types.Distance) ->
                 GHC.CString.unpackAppendCString#
                   StreetRun.Hurdle.$fShowObstacleState5
                   (GHC.CString.unpackAppendCString#
                      StreetRun.Hurdle.$fShowObstacleState4
                      (StreetRun.Hurdle.$w$cshowsPrec
                         0#
                         ww
                         (GHC.Base.++
                            @ GHC.Types.Char
                            GHC.Show.showCommaSpace1
                            (GHC.CString.unpackAppendCString#
                               StreetRun.Hurdle.$fShowObstacleState3
                               (GHC.Base.++
                                  @ GHC.Types.Char
                                  StreetRun.Types.$fShowDistance2
                                  (case ww1
                                          `cast`
                                        (StreetRun.Types.N:Distance[0]) of ww2 { GHC.Types.F# ww3 ->
                                   GHC.Float.$w$sshowSignedFloat1
                                     GHC.Float.$fShowFloat2
                                     StreetRun.Types.$fShowDistance4
                                     ww3
                                     StreetRun.Hurdle.$fShowObstacleState6 }))))))) -}
806f72e2d074e60979bb87d0f4952401
  $w$cshowsPrec ::
    GHC.Prim.Int# -> StreetRun.Hurdle.ObstacleInfo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: StreetRun.Hurdle.ObstacleInfo) ->
                 case w of wild {
                   StreetRun.Hurdle.ObstacleInfo'Lava b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Animate.Position ww3 ww4 ww5 ww6 ->
                          Animate.$w$cshowsPrec2
                            @ StreetRun.Snag.LavaKey
                            @ StreetRun.Types.Seconds
                            StreetRun.Snag.$fShowLavaKey
                            StreetRun.Types.$fShowSeconds
                            11#
                            ww3
                            ww4
                            ww5
                            ww6 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             StreetRun.Hurdle.$fShowObstacleInfo6
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                StreetRun.Hurdle.$fShowObstacleInfo6
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   StreetRun.Hurdle.ObstacleInfo'Rock b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Animate.Position ww3 ww4 ww5 ww6 ->
                          Animate.$w$cshowsPrec2
                            @ StreetRun.Snag.RockKey
                            @ StreetRun.Types.Seconds
                            StreetRun.Snag.$fShowRockKey
                            StreetRun.Types.$fShowSeconds
                            11#
                            ww3
                            ww4
                            ww5
                            ww6 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             StreetRun.Hurdle.$fShowObstacleInfo4
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                StreetRun.Hurdle.$fShowObstacleInfo4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   StreetRun.Hurdle.ObstacleInfo'Bird b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = case b1 of ww2 { Animate.Position ww3 ww4 ww5 ww6 ->
                          Animate.$w$cshowsPrec2
                            @ StreetRun.Snag.BirdKey
                            @ StreetRun.Types.Seconds
                            StreetRun.Snag.$fShowBirdKey
                            StreetRun.Types.$fShowSeconds
                            11#
                            ww3
                            ww4
                            ww5
                            ww6 }
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++
                             @ GHC.Types.Char
                             StreetRun.Hurdle.$fShowObstacleInfo2
                             (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                StreetRun.Hurdle.$fShowObstacleInfo2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
6adfb0ca3794fb19cde7eb468d3baa6a
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> StreetRun.Hurdle.ObstacleInfo
    -> StreetRun.Types.Distance
    -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S,U><L,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: StreetRun.Hurdle.ObstacleInfo)
                   (ww2 :: StreetRun.Types.Distance) ->
                 let {
                   f :: GHC.Base.String -> GHC.Base.String
                   = StreetRun.Hurdle.$w$cshowsPrec 0# ww1
                 } in
                 let {
                   f1 :: GHC.Base.String -> GHC.Base.String
                   = StreetRun.Types.$w$cshowsPrec 0# ww2
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.CString.unpackAppendCString#
                        StreetRun.Hurdle.$fShowObstacleState5
                        (GHC.CString.unpackAppendCString#
                           StreetRun.Hurdle.$fShowObstacleState4
                           (f (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    StreetRun.Hurdle.$fShowObstacleState3
                                    (f1
                                       (GHC.CString.unpackAppendCString#
                                          StreetRun.Hurdle.$fShowObstacleState2
                                          x))))))
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           StreetRun.Hurdle.$fShowObstacleState5
                           (GHC.CString.unpackAppendCString#
                              StreetRun.Hurdle.$fShowObstacleState4
                              (f (GHC.Base.++
                                    @ GHC.Types.Char
                                    GHC.Show.showCommaSpace1
                                    (GHC.CString.unpackAppendCString#
                                       StreetRun.Hurdle.$fShowObstacleState3
                                       (f1
                                          (GHC.CString.unpackAppendCString#
                                             StreetRun.Hurdle.$fShowObstacleState2
                                             (GHC.Types.:
                                                @ GHC.Types.Char
                                                GHC.Show.$fShow(,)2
                                                x)))))))) }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $w$cshowsPrec2 ::
    StreetRun.Hurdle.ObstacleTag -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: StreetRun.Hurdle.ObstacleTag)
                   (w1 :: GHC.Base.String) ->
                 case w of wild {
                   StreetRun.Hurdle.ObstacleTag'Lava
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        StreetRun.Hurdle.$fShowObstacleTag5
                        w1
                   StreetRun.Hurdle.ObstacleTag'Rock
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        StreetRun.Hurdle.$fShowObstacleTag3
                        w1
                   StreetRun.Hurdle.ObstacleTag'Bird
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        StreetRun.Hurdle.$fShowObstacleTag1
                        w1 }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $w$ctoEnum :: GHC.Prim.Int# -> StreetRun.Hurdle.ObstacleTag
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.>=# ww 0# of lwild {
                   DEFAULT -> StreetRun.Hurdle.$wlvl ww
                   1#
                   -> case GHC.Prim.<=# ww 2# of lwild1 {
                        DEFAULT -> StreetRun.Hurdle.$wlvl ww
                        1# -> GHC.Prim.tagToEnum# @ StreetRun.Hurdle.ObstacleTag ww } }) -}
87a5d4ad614d614ae5f2b575cc03f725
  $w$s$crandomR ::
    StreetRun.Hurdle.ObstacleTag
    -> StreetRun.Hurdle.ObstacleTag
    -> System.Random.StdGen
    -> (# StreetRun.Hurdle.ObstacleTag, System.Random.StdGen #)
  {- Arity: 3, Strictness: <L,1*U><L,1*U><L,U>, Inline: [2],
     Unfolding: (\ (ww :: StreetRun.Hurdle.ObstacleTag)
                   (ww1 :: StreetRun.Hurdle.ObstacleTag)
                   (w :: System.Random.StdGen) ->
                 let {
                   ds :: (GHC.Types.Int, System.Random.StdGen)
                   = let {
                       $j :: GHC.Integer.Type.Integer
                             -> (GHC.Types.Int, System.Random.StdGen)
                         <join 1> {- Arity: 1, Strictness: <S,U>m -}
                       = \ (karg :: GHC.Integer.Type.Integer)[OneShot] ->
                         case ww of wild {
                           StreetRun.Hurdle.ObstacleTag'Lava
                           -> case System.Random.$wrandomIvalInteger
                                     @ System.Random.StdGen
                                     @ GHC.Types.Int
                                     System.Random.$fRandomGenStdGen
                                     GHC.Num.$fNumInt
                                     StreetRun.Hurdle.$fRandomObstacleTag5
                                     karg
                                     w of ww2 { (#,#) ww3 ww4 ->
                              (ww3, ww4) }
                           StreetRun.Hurdle.ObstacleTag'Rock
                           -> case System.Random.$wrandomIvalInteger
                                     @ System.Random.StdGen
                                     @ GHC.Types.Int
                                     System.Random.$fRandomGenStdGen
                                     GHC.Num.$fNumInt
                                     StreetRun.Hurdle.$fRandomObstacleTag7
                                     karg
                                     w of ww2 { (#,#) ww3 ww4 ->
                              (ww3, ww4) }
                           StreetRun.Hurdle.ObstacleTag'Bird
                           -> case System.Random.$wrandomIvalInteger
                                     @ System.Random.StdGen
                                     @ GHC.Types.Int
                                     System.Random.$fRandomGenStdGen
                                     GHC.Num.$fNumInt
                                     StreetRun.Hurdle.$fRandomObstacleTag4
                                     karg
                                     w of ww2 { (#,#) ww3 ww4 ->
                              (ww3, ww4) } }
                     } in
                     case ww1 of wild {
                       StreetRun.Hurdle.ObstacleTag'Lava
                       -> $j StreetRun.Hurdle.$fRandomObstacleTag5
                       StreetRun.Hurdle.ObstacleTag'Rock
                       -> $j StreetRun.Hurdle.$fRandomObstacleTag7
                       StreetRun.Hurdle.ObstacleTag'Bird
                       -> $j StreetRun.Hurdle.$fRandomObstacleTag4 }
                 } in
                 (# case ds of wild { (,) index g' ->
                    case index of wild1 { GHC.Types.I# x ->
                    case GHC.Classes.modInt# x 3# of ww2 { DEFAULT ->
                    GHC.List.$w!!
                      @ StreetRun.Hurdle.ObstacleTag
                      StreetRun.Hurdle.$fRandomObstacleTag3
                      ww2 } } },
                    case ds of wild { (,) index g' -> g' } #)) -}
a20f11b4f8dd9f0cf3514d7548b3b902
  $wbirdY :: (a -> a -> a) -> (GHC.Integer.Type.Integer -> a) -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(U)>, Inline: [2],
     Unfolding: (\ @ a
                   (ww :: a -> a -> a)
                   (ww1 :: GHC.Integer.Type.Integer -> a) ->
                 ww (ww1 StreetRun.Hurdle.birdY2) (ww1 StreetRun.Hurdle.birdY1)) -}
87a5d4ad614d614ae5f2b575cc03f725
  $wgo ::
    GHC.Prim.Int#
    -> (# StreetRun.Hurdle.ObstacleTag,
          [StreetRun.Hurdle.ObstacleTag] #)
  {- Arity: 1, Strictness: <L,U>, Inline: [2] -}
6baeaf43aa7052f400940d016da6b568
  $wlavaY :: (a -> a -> a) -> (GHC.Integer.Type.Integer -> a) -> a
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(U)>, Inline: [2],
     Unfolding: (\ @ a
                   (ww :: a -> a -> a)
                   (ww1 :: GHC.Integer.Type.Integer -> a) ->
                 ww (ww1 StreetRun.Hurdle.birdY2) (ww1 StreetRun.Hurdle.lavaY1)) -}
87a5d4ad614d614ae5f2b575cc03f725
  $wlvl :: GHC.Prim.Int# -> StreetRun.Hurdle.ObstacleTag
  {- Arity: 1, Strictness: <B,U>x, Inline: [2] -}
ccbb84febcd925c41b8c0f548f57e9eb
  $wobstacleAabb ::
    StreetRun.Hurdle.ObstacleInfo
    -> StreetRun.Types.Distance
    -> (# Linear.V2.V2 GHC.Types.Float, Linear.V2.V2 GHC.Types.Float #)
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: StreetRun.Hurdle.ObstacleInfo)
                   (ww1 :: StreetRun.Types.Distance) ->
                 let {
                   dist :: GHC.Types.Float
                   = case ww1
                            `cast`
                          (StreetRun.Types.N:Distance[0]) of ww2 { GHC.Types.F# ww3 ->
                     case GHC.Float.$w$ctoRational1 ww3 of ww4 { (#,#) ww5 ww6 ->
                     GHC.Float.rationalToFloat ww5 ww6 } }
                 } in
                 case ww of wild {
                   StreetRun.Hurdle.ObstacleInfo'Lava ds
                   -> (# case dist of dt { GHC.Types.F# ipv ->
                         Linear.V2.V2 @ GHC.Types.Float dt StreetRun.Hurdle.lavaY_$slavaY },
                         case dist of wild1 { GHC.Types.F# y ->
                         Linear.V2.V2
                           @ GHC.Types.Float
                           (GHC.Types.F# (GHC.Prim.plusFloat# 32.0# y))
                           StreetRun.Hurdle.obstacleAabb3 } #)
                   StreetRun.Hurdle.ObstacleInfo'Rock ds
                   -> (# case dist of dt { GHC.Types.F# ipv ->
                         Linear.V2.V2
                           @ GHC.Types.Float
                           dt
                           StreetRun.Hurdle.obstacleAabb_$srockY },
                         case dist of wild1 { GHC.Types.F# y ->
                         Linear.V2.V2
                           @ GHC.Types.Float
                           (GHC.Types.F# (GHC.Prim.plusFloat# 32.0# y))
                           StreetRun.Hurdle.obstacleAabb2 } #)
                   StreetRun.Hurdle.ObstacleInfo'Bird ds
                   -> (# case dist of dt { GHC.Types.F# ipv ->
                         Linear.V2.V2 @ GHC.Types.Float dt StreetRun.Hurdle.birdY_$sbirdY },
                         case dist of wild1 { GHC.Types.F# y ->
                         Linear.V2.V2
                           @ GHC.Types.Float
                           (GHC.Types.F# (GHC.Prim.plusFloat# 32.0# y))
                           StreetRun.Hurdle.obstacleAabb1 } #) }) -}
b7e40230a429821d0a2bf865bf562435
  $wrandomRBoundedEnum ::
    (GHC.Enum.Bounded a, GHC.Enum.Enum a, System.Random.RandomGen g) =>
    a -> a -> g -> (# a, g #)
  {- Arity: 6,
     Strictness: <L,U(1*U,1*U)><L,U(A,A,A,C(U(U)),A,A,1*C1(C1(U)),A)><L,U(C(U(1*U(U),U)),C(U(U(U),1*U(U))),A)><L,U><L,U><L,U>,
     Inline: [2],
     Unfolding: (\ @ a
                   @ g
                   (w :: GHC.Enum.Bounded a)
                   (w1 :: GHC.Enum.Enum a)
                   (w2 :: System.Random.RandomGen g)
                   (ww :: a)
                   (ww1 :: a)
                   (w3 :: g) ->
                 let {
                   ds :: (GHC.Types.Int, g)
                   = case GHC.Enum.fromEnum @ a w1 ww of wild { GHC.Types.I# i ->
                     case GHC.Enum.fromEnum @ a w1 ww1 of wild1 { GHC.Types.I# i1 ->
                     case System.Random.$wrandomIvalInteger
                            @ g
                            @ GHC.Types.Int
                            w2
                            GHC.Num.$fNumInt
                            (GHC.Integer.Type.smallInteger i)
                            (GHC.Integer.Type.smallInteger i1)
                            w3 of ww2 { (#,#) ww3 ww4 ->
                     (ww3, ww4) } } }
                 } in
                 (# let {
                      lastEnum :: a = GHC.Enum.maxBound @ a w
                    } in
                    case GHC.Enum.fromEnum @ a w1 lastEnum of wild { GHC.Types.I# x ->
                    case x of lwild {
                      DEFAULT
                      -> case ds of wild1 { (,) index g' ->
                         case index of wild2 { GHC.Types.I# x1 ->
                         case GHC.Classes.modInt#
                                x1
                                (GHC.Prim.+# lwild 1#) of ww2 { DEFAULT ->
                         GHC.List.$w!!
                           @ a
                           (GHC.Enum.enumFromTo @ a w1 (GHC.Enum.minBound @ a w) lastEnum)
                           ww2 } } }
                      -2#
                      -> GHC.List.$w!!
                           @ a
                           (GHC.Enum.enumFromTo @ a w1 (GHC.Enum.minBound @ a w) lastEnum)
                           0#
                      -1# -> case GHC.Real.divZeroError ret_ty a of {} } },
                    case ds of wild { (,) index g' -> g' } #)) -}
a78ecf28cccd93f205aacc38b8b33f4d
  $wrockY ::
    (a -> a -> a)
    -> (a -> a -> a) -> (GHC.Integer.Type.Integer -> a) -> a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(C1(U))><L,C(U)>,
     Inline: [2],
     Unfolding: (\ @ a
                   (ww :: a -> a -> a)
                   (ww1 :: a -> a -> a)
                   (ww2 :: GHC.Integer.Type.Integer -> a) ->
                 ww
                   (ww1 (ww2 StreetRun.Hurdle.birdY2) (ww2 StreetRun.Hurdle.rockY1))
                   (ww2 StreetRun.Hurdle.$fRandomObstacleTag4)) -}
806f72e2d074e60979bb87d0f4952401
  data ObstacleInfo
    = ObstacleInfo'Lava (Animate.Position
                           StreetRun.Snag.LavaKey StreetRun.Types.Seconds)
    | ObstacleInfo'Rock (Animate.Position
                           StreetRun.Snag.RockKey StreetRun.Types.Seconds)
    | ObstacleInfo'Bird (Animate.Position
                           StreetRun.Snag.BirdKey StreetRun.Types.Seconds)
95c2800d9f00728984a40ce71c8f5ddb
  data ObstacleState
    = ObstacleState {osInfo :: StreetRun.Hurdle.ObstacleInfo,
                     osDistance :: StreetRun.Types.Distance}
87a5d4ad614d614ae5f2b575cc03f725
  data ObstacleTag
    = ObstacleTag'Lava | ObstacleTag'Rock | ObstacleTag'Bird
7193f7bf2a627e7b5bd560b5eb135a97
  birdY :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLL),1*U(A,A,1*C1(C1(U)),A,A,A,C(U))>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Num.Num a) ->
                 case w of ww { GHC.Num.C:Num ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 StreetRun.Hurdle.$wbirdY @ a ww3 ww7 }) -}
7d207085942c7bdc9bf4b2f34fb82a7a
  birdY1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (22) -}
283cde60be957a5d4426d4d61c554bc0
  birdY2 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (16) -}
20eed2a95257c7f3c085356cc5f282e4
  birdY_$sbirdY :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 352.0#) -}
58e67e5b07377f4d36fa776e595d4385
  lavaY :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLL),1*U(A,A,1*C1(C1(U)),A,A,A,C(U))>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Num.Num a) ->
                 case w of ww { GHC.Num.C:Num ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 StreetRun.Hurdle.$wlavaY @ a ww3 ww7 }) -}
7cc87908e87a8080e4b5610d676442a2
  lavaY1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (28) -}
ce3eb7e7668571be7039ac39bef49c98
  lavaY_$slavaY :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 448.0#) -}
a5327c186bfc058418e706146ebd9908
  obstacleAabb ::
    StreetRun.Hurdle.ObstacleState -> StreetRun.Physics.Aabb
  {- Arity: 1, Strictness: <S(SL),1*U(1*U,1*U(U))>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: StreetRun.Hurdle.ObstacleState) ->
                 case w of ww { StreetRun.Hurdle.ObstacleState ww1 ww2 ->
                 case StreetRun.Hurdle.$wobstacleAabb
                        ww1
                        ww2 of ww3 { (#,#) ww4 ww5 ->
                 StreetRun.Physics.Aabb ww4 ww5 } }) -}
87f9bfafad6cfa964e17fe79f51a73b1
  obstacleAabb1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 384.0#) -}
5ebc58960e701c0ce7ac741e442b9949
  obstacleAabb2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 450.0#) -}
13bfd814a7853eb9917c86c6a807a1bd
  obstacleAabb3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 480.0#) -}
95ba62235ec18ebb7b6edb88a2941a91
  obstacleAabb_$srockY :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 418.0#) -}
4cacfc8f0ae3075f4ba54a4551b6ccaa
  randomRBoundedEnum ::
    (GHC.Enum.Bounded a, GHC.Enum.Enum a, System.Random.RandomGen g) =>
    (a, a) -> g -> (a, g)
  {- Arity: 5,
     Strictness: <L,U(U,U)><L,U(A,A,A,C(U(U)),A,A,C(C1(U)),A)><L,U(C(U(1*U(U),U)),C(U(U(U),1*U(U))),A)><S,1*U(U,U)><L,U>m,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   @ g
                   (w :: GHC.Enum.Bounded a)
                   (w1 :: GHC.Enum.Enum a)
                   (w2 :: System.Random.RandomGen g)
                   (w3 :: (a, a))
                   (w4 :: g) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 case StreetRun.Hurdle.$wrandomRBoundedEnum
                        @ a
                        @ g
                        w
                        w1
                        w2
                        ww1
                        ww2
                        w4 of ww3 { (#,#) ww4 ww5 ->
                 (ww4, ww5) } }) -}
d7f9380ab0d3b3bdb40701f60199e545
  rockY :: GHC.Num.Num a => a
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(C(C(S))LLLLLL),1*U(1*C1(C1(U)),A,1*C1(C1(U)),A,A,A,C(U))>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: GHC.Num.Num a) ->
                 case w of ww { GHC.Num.C:Num ww1 ww2 ww3 ww4 ww5 ww6 ww7 ->
                 StreetRun.Hurdle.$wrockY @ a ww1 ww3 ww7 }) -}
3ac290767e9959fce69470bf99db5376
  rockY1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (26) -}
178c3a1a8aa9d61ae951021edab10adc
  stepObstacles ::
    StreetRun.Types.Distance
    -> [StreetRun.Hurdle.ObstacleState]
    -> [StreetRun.Hurdle.ObstacleState]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ (delta :: StreetRun.Types.Distance)
                   (eta :: [StreetRun.Hurdle.ObstacleState]) ->
                 GHC.Base.map
                   @ StreetRun.Hurdle.ObstacleState
                   @ StreetRun.Hurdle.ObstacleState
                   (\ (o :: StreetRun.Hurdle.ObstacleState) ->
                    case o of wild { StreetRun.Hurdle.ObstacleState ds ds1 ->
                    StreetRun.Hurdle.ObstacleState
                      ds
                      (case ds1
                              `cast`
                            (StreetRun.Types.N:Distance[0]) of wild1 { GHC.Types.F# x ->
                       case ds of wild2 {
                         DEFAULT
                         -> case delta
                                   `cast`
                                 (StreetRun.Types.N:Distance[0]) of wild3 { GHC.Types.F# y ->
                            (GHC.Types.F# (GHC.Prim.minusFloat# x y))
                              `cast`
                            (Sym (StreetRun.Types.N:Distance[0])) }
                         StreetRun.Hurdle.ObstacleInfo'Bird ds2
                         -> case delta
                                   `cast`
                                 (StreetRun.Types.N:Distance[0]) of wild3 { GHC.Types.F# x1 ->
                            (GHC.Types.F#
                               (GHC.Prim.minusFloat# x (GHC.Prim.plusFloat# x1 4.0#)))
                              `cast`
                            (Sym (StreetRun.Types.N:Distance[0])) } } }) })
                   eta) -}
bbf920dbc0893b9218b831594ddd8141
  streamOfObstacles ::
    System.Random.RandomGen g =>
    g -> [(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)]
  {- Arity: 2,
     Strictness: <L,U(C(U(1*U(U),U)),C(U(U(U),1*U(U))),A)><L,U>,
     Unfolding: (\ @ g
                   ($dRandomGen :: System.Random.RandomGen g)
                   (g1 :: g) ->
                 letrec {
                   go :: g
                         -> [StreetRun.Hurdle.ObstacleTag]
                         -> [(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)]
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (g2 :: g) (eta :: [StreetRun.Hurdle.ObstacleTag]) ->
                     case System.Random.$wrandomIvalInteger
                            @ g
                            @ GHC.Types.Int
                            $dRandomGen
                            GHC.Num.$fNumInt
                            System.Random.$fRandomCIntMax4
                            System.Random.$fRandomCIntMax3
                            g2 of ww3 { (#,#) ww4 ww5 ->
                     case ww4 of x1 { GHC.Types.I# ipv ->
                     case eta of wild {
                       [] -> GHC.Types.[] @ (GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)
                       : y ys
                       -> GHC.Types.:
                            @ (GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)
                            (case GHC.Classes.modInt# ipv 18# of ww2 { DEFAULT ->
                             GHC.Types.I# (GHC.Prim.+# ww2 3#) },
                             y)
                            (go ww5 ys) } } }
                 } in
                 letrec {
                   go1 :: g -> [StreetRun.Hurdle.ObstacleTag]
                     {- Arity: 1, Strictness: <L,U> -}
                   = \ (g2 :: g) ->
                     case System.Random.$wrandomIvalInteger
                            @ g
                            @ GHC.Types.Int
                            $dRandomGen
                            GHC.Num.$fNumInt
                            StreetRun.Hurdle.$fRandomObstacleTag5
                            StreetRun.Hurdle.$fRandomObstacleTag4
                            g2 of ww2 { (#,#) ww3 ww4 ->
                     case ww3 of wild1 { GHC.Types.I# x ->
                     case GHC.Classes.modInt# x 3# of ww1 { DEFAULT ->
                     case GHC.List.$w!!
                            @ StreetRun.Hurdle.ObstacleTag
                            StreetRun.Hurdle.$fRandomObstacleTag3
                            ww1 of x1 { DEFAULT ->
                     GHC.Types.: @ StreetRun.Hurdle.ObstacleTag x1 (go1 ww4) } } } }
                 } in
                 go g1 (go1 g1)) -}
instance GHC.Enum.Bounded [StreetRun.Hurdle.ObstacleTag]
  = StreetRun.Hurdle.$fBoundedObstacleTag
instance GHC.Enum.Enum [StreetRun.Hurdle.ObstacleTag]
  = StreetRun.Hurdle.$fEnumObstacleTag
instance GHC.Classes.Eq [StreetRun.Hurdle.ObstacleInfo]
  = StreetRun.Hurdle.$fEqObstacleInfo
instance GHC.Classes.Eq [StreetRun.Hurdle.ObstacleState]
  = StreetRun.Hurdle.$fEqObstacleState
instance GHC.Classes.Eq [StreetRun.Hurdle.ObstacleTag]
  = StreetRun.Hurdle.$fEqObstacleTag
instance GHC.Classes.Ord [StreetRun.Hurdle.ObstacleTag]
  = StreetRun.Hurdle.$fOrdObstacleTag
instance System.Random.Random [StreetRun.Hurdle.ObstacleTag]
  = StreetRun.Hurdle.$fRandomObstacleTag
instance GHC.Show.Show [StreetRun.Hurdle.ObstacleInfo]
  = StreetRun.Hurdle.$fShowObstacleInfo
instance GHC.Show.Show [StreetRun.Hurdle.ObstacleState]
  = StreetRun.Hurdle.$fShowObstacleState
instance GHC.Show.Show [StreetRun.Hurdle.ObstacleTag]
  = StreetRun.Hurdle.$fShowObstacleTag
"SPEC birdY @ Float" forall ($dNum :: GHC.Num.Num GHC.Types.Float)
  StreetRun.Hurdle.birdY @ GHC.Types.Float $dNum
  = StreetRun.Hurdle.birdY_$sbirdY
"SPEC lavaY @ Float" forall ($dNum :: GHC.Num.Num GHC.Types.Float)
  StreetRun.Hurdle.lavaY @ GHC.Types.Float $dNum
  = StreetRun.Hurdle.lavaY_$slavaY
"SPEC rockY @ Float" forall ($dNum :: GHC.Num.Num GHC.Types.Float)
  StreetRun.Hurdle.rockY @ GHC.Types.Float $dNum
  = StreetRun.Hurdle.obstacleAabb_$srockY
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

