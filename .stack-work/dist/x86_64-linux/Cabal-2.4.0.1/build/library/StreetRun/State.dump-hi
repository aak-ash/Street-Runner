
==================== FINAL INTERFACE ====================
2019-04-26 14:36:06.305834371 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.State 8064
  interface hash: b1793e9fbba839ac665578da5d546416
  ABI hash: 879bfe0721b41cea3eaddf89be35a0d2
  export-list hash: 2ad9459b3bdc4835614d220ed9e341f2
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: e9979ed0ba295133ef8188aa5e696ffc
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: True
  where
exports:
  StreetRun.State.initVars
  StreetRun.State.HasVars{StreetRun.State.vars}
  StreetRun.State.Vars{StreetRun.State.Vars vCamera vCommon vGameOver vInput vNextScene vPlay vScene vTitle}
module dependencies: StreetRun.CFL StreetRun.Camera
                     StreetRun.Common StreetRun.Hurdle StreetRun.Hurdle_1
                     StreetRun.Input StreetRun.Out StreetRun.Out_func StreetRun.Physics
                     StreetRun.Quake StreetRun.Quake_BackStreet StreetRun.Quake_Building
                     StreetRun.Quake_Grass StreetRun.Quake_Street StreetRun.Runner
                     StreetRun.Runner_func_1 StreetRun.Runner_func_2 StreetRun.Scenario
                     StreetRun.Sfx StreetRun.Snag StreetRun.Step StreetRun.Tag
                     StreetRun.Tag_func StreetRun.Types StreetRun.Work
                     StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 deepseq-1.4.4.0
                      distributive-0.6 dlist-0.8.0.6 exceptions-0.10.1 free-5.1
                      ghc-boot-th-8.6.4 ghc-prim-0.5.3 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2 kan-extensions-5.2
                      key-state-0.2.0 lens-4.17 libyaml-0.1.1.0 linear-1.20.8 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17 scientific-0.3.6.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 th-abstraction-0.2.11.0
                      time-1.8.0.2 time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      transformers-base-0.4.5.2 transformers-compat-0.6.2
                      unliftio-core-0.1.2.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.2 yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Plucker linear-1.20.8:Linear.Quaternion
                         linear-1.20.8:Linear.V linear-1.20.8:Linear.V0
                         linear-1.20.8:Linear.V1 linear-1.20.8:Linear.V2
                         linear-1.20.8:Linear.V3 linear-1.20.8:Linear.V4
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  lens-4.17:Control.Lens 02c38743366e4d3d260b71bddfddea13
import  -/  lens-4.17:Control.Lens.Lens 28f33ded64c598d9fbea880860e212ae
import  -/  lens-4.17:Control.Lens.TH a3413f983a85efb472c9d435aae96b24
import  -/  lens-4.17:Control.Lens.Type fd3d7a4235b6bea7852cfdf84ee6def7
import  -/  StreetRun.Camera 15520c15c72428459c71d35d468598c8
  exports: 445eb368813d35f6641c1446797753f7
  Camera b5968deab63503d8481a66bb851490e6
  initCamera d5f1066db3772b85d485fcdd4aefe8c0
import  -/  StreetRun.Common ec7a24ddc13a89793e354234ea8b6a8f
  exports: 5bf7e8807e04e9b7e18cf5c3f75b1f5b
  CommonVars 1a70b4b7adfef4baee78b76f08e9c288
  HasCommonVars 78e2982dec7ad30766f890d3421b5154
  initCommonVars e9af88a65889b0174c6b0f0f18ddc4b6
import  -/  StreetRun.Hurdle 38a26fa541ce5ced9eea0f70d3aa69b6
  exports: ccac325c207e939d1f0d01c3da87ee30
  ObstacleTag 87a5d4ad614d614ae5f2b575cc03f725
import  -/  StreetRun.Hurdle_1 c9e76027407717b022743d66c2f85407
  exports: be3dc5eb0f18c89559dce1b425bb13f5
import  -/  StreetRun.Input 2b2882bb9ccf0deac02d72ccd2af9474
  exports: 794b8afcff1485016b9c41551ca5bab1
  Input f50c2ab9e2082623275c9cc57e0e92df
  initInput 5f2bfd4a976eb5bf95386ec47a194730
import  -/  StreetRun.Out 821100932c472ef91d1cc00ebdbd32fc
  exports: f97bdbd80a695ead6b4ee17ec380e5cf
  GameOverVars 2891ba2842a669b0d757efb60792393f
import  -/  StreetRun.Out_func a900baa9f9b77c1879583d44ab2f3b10
  exports: 7986cfba44c33c394d69d1f3c9409685
  HasGameOverVars 35cf1815c5f5f54bc448623ef9f0aa92
  initGameOverVars b53fcd1b7b8c8341e1cde92f4e3f7d87
import  -/  StreetRun.Scenario 354a54748ba84a3c008f8f16b2acd94c
  exports: 64c6733be65834216e60f326da61cf65
  Scene 627d7fee21737fffbaa905616e7162fd
  Scene'Title 63ef21e09609c128de8ab51cdf5c195a
import  -/  StreetRun.Tag 478c1a1eaec7462402e2b3261537fcf9
  exports: 6ff61bf1ef79bf9f2647f863adb633fe
  TitleVars cbf7b7425a835bb0a1de90f31f4231c6
import  -/  StreetRun.Tag_func 159a50a2215140f4934819751a0cd220
  exports: fdd42e8f6ce9b2005464c764ab69e99f
  HasTitleVars 8a5ef6bd9652a97c580bdda9c0818595
  initTitleVars e1f971ff3f2b26c1d9ce79179b157d21
import  -/  StreetRun.Work 84c49625e5300d184b6b74d71a119d1f
  exports: be18f47a77094179ee18b27ca088c03e
  PlayVars 454bac6bacb8c3a13959acb3712742b4
import  -/  StreetRun.Work_func e74f2daf9d4710767ad8c2ada174399d
  exports: c79cba614ebcff5946e13d50725530aa
  HasPlayVars 9cbc89508257ef44e1f754bf3878ef7f
  initPlayVars 433e189d7b7f8f1cc59a9c7750ea4b83
94cac8e669b0992d9fdeb1c0cad361f9
  $fEqVars :: GHC.Classes.Eq StreetRun.State.Vars
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.State.Vars
                  StreetRun.State.$fEqVars_$c==
                  StreetRun.State.$fEqVars_$c/= -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fEqVars_$c/= ::
    StreetRun.State.Vars -> StreetRun.State.Vars -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LL)LLLLLLL),1*U(1*U(1*U(U),1*U,1*U),1*U,1*U,1*U(1*U(1*U,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(1*U,1*U,1*U,1*U),1*U,1*U(1*U,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*U,1*U,1*U,1*U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U),1*U(1*U(U),1*U(U)),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(1*U,1*U),1*U(1*U,1*U),1*U),1*U(1*U(U(U),U(U)),1*U(U(U),U(U))))><S(S(S(S)LL)LLLLLLL),1*U(1*U(1*U(U),1*U,1*U),1*U,1*U,1*U(1*U(1*U,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(1*U,1*U,1*U,1*U),1*U,1*U(1*U,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*U,1*U,1*U,1*U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U),1*U(1*U(U),1*U(U)),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(1*U,1*U),1*U(1*U,1*U),1*U),1*U(1*U(U(U),U(U)),1*U(U(U),U(U))))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: StreetRun.State.Vars) (y :: StreetRun.State.Vars) ->
                 case StreetRun.State.$fEqVars_$c== x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fEqVars_$c== ::
    StreetRun.State.Vars -> StreetRun.State.Vars -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(S(S(S)LL)LLLLLLL),1*U(1*U(1*U(U),1*U,1*U),1*U,1*U,1*U(1*U(1*U,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(1*U,1*U,1*U,1*U),1*U,1*U(1*U,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*U,1*U,1*U,1*U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U),1*U(1*U(U),1*U(U)),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(1*U,1*U),1*U(1*U,1*U),1*U),1*U(1*U(U(U),U(U)),1*U(U(U),U(U))))><S(S(S(S)LL)LLLLLLL),1*U(1*U(1*U(U),1*U,1*U),1*U,1*U,1*U(1*U(1*U,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(U)),1*U(1*U(U),1*U(U),1*U(U),1*U(U),1*U(1*U,1*U,1*U,1*U),1*U,1*U(1*U,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*H,1*U(U),1*U(U),1*U),1*U(1*U,1*U,1*U,1*U),1*U(U),1*U(U),1*U(U),1*U(U),1*U,1*U),1*U(1*U(U),1*U(U)),1*U(1*U(1*U,1*U),1*U(1*U,1*U),1*U(1*U,1*U),1*U(1*U,1*U),1*U),1*U(1*U(U(U),U(U)),1*U(U(U),U(U))))>,
     Unfolding: (\ (ds :: StreetRun.State.Vars)
                   (ds1 :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars a1 a2 a3 a4 a5 a6 a7 a8 ->
                 case ds1 of wild1 { StreetRun.State.Vars b1 b2 b3 b4 b5 b6 b7 b8 ->
                 case a1 of ww { StreetRun.Common.CommonVars ww1 ww2 ww3 ->
                 case ww1
                        `cast`
                      (StreetRun.Types.N:Score[0]) of ww4 { GHC.Types.I# ww5 ->
                 case b1 of ww6 { StreetRun.Common.CommonVars ww7 ww8 ww9 ->
                 case ww7
                        `cast`
                      (StreetRun.Types.N:Score[0]) of ww10 { GHC.Types.I# ww11 ->
                 case StreetRun.Common.$w$c== ww5 ww2 ww3 ww11 ww8 ww9 of wild2 {
                   GHC.Types.False -> GHC.Types.False
                   GHC.Types.True
                   -> let {
                        $j :: GHC.Types.Bool <join 0>
                        = let {
                            $j1 :: GHC.Types.Bool <join 0>
                            = case StreetRun.Tag.$fEqTitleVars_$c== a4 b4 of wild3 {
                                GHC.Types.False -> GHC.Types.False
                                GHC.Types.True
                                -> case StreetRun.Work.$fEqPlayVars_$c== a5 b5 of wild4 {
                                     GHC.Types.False -> GHC.Types.False
                                     GHC.Types.True
                                     -> case a6 of ww16 { StreetRun.Out.GameOverVars ww17 ww18 ->
                                        case ww17
                                               `cast`
                                             (StreetRun.Types.N:Percent[0]) of ww19 { GHC.Types.F# ww20 ->
                                        case b6 of ww21 { StreetRun.Out.GameOverVars ww22 ww23 ->
                                        case ww22
                                               `cast`
                                             (StreetRun.Types.N:Percent[0]) of ww24 { GHC.Types.F# ww25 ->
                                        case GHC.Prim.eqFloat# ww20 ww25 of lwild {
                                          DEFAULT -> GHC.Types.False
                                          1#
                                          -> case ww18
                                                    `cast`
                                                  (StreetRun.Types.N:Percent[0]) of wild5 { GHC.Types.F# x ->
                                             case ww23
                                                    `cast`
                                                  (StreetRun.Types.N:Percent[0]) of wild6 { GHC.Types.F# y ->
                                             case GHC.Prim.eqFloat# x y of lwild1 {
                                               DEFAULT -> GHC.Types.False
                                               1#
                                               -> case StreetRun.Input.$fEqInput_$c==
                                                         a7
                                                         b7 of wild7 {
                                                    GHC.Types.False -> GHC.Types.False
                                                    GHC.Types.True
                                                    -> StreetRun.Camera.$fEqCamera_$c==
                                                         a8
                                                         b8 } } } } } } } } } } }
                          } in
                          case a3 of wild3 {
                            StreetRun.Scenario.Scene'Title
                            -> case b3 of wild4 {
                                 DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Title -> $j1 }
                            StreetRun.Scenario.Scene'Play
                            -> case b3 of wild4 {
                                 DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Play -> $j1 }
                            StreetRun.Scenario.Scene'Pause
                            -> case b3 of wild4 {
                                 DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Pause -> $j1 }
                            StreetRun.Scenario.Scene'Death
                            -> case b3 of wild4 {
                                 DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Death -> $j1 }
                            StreetRun.Scenario.Scene'GameOver
                            -> case b3 of wild4 {
                                 DEFAULT -> GHC.Types.False
                                 StreetRun.Scenario.Scene'GameOver -> $j1 }
                            StreetRun.Scenario.Scene'Quit
                            -> case b3 of wild4 {
                                 DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Quit -> $j1 } }
                      } in
                      case a2 of wild3 {
                        StreetRun.Scenario.Scene'Title
                        -> case b2 of wild4 {
                             DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Title -> $j }
                        StreetRun.Scenario.Scene'Play
                        -> case b2 of wild4 {
                             DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Play -> $j }
                        StreetRun.Scenario.Scene'Pause
                        -> case b2 of wild4 {
                             DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Pause -> $j }
                        StreetRun.Scenario.Scene'Death
                        -> case b2 of wild4 {
                             DEFAULT -> GHC.Types.False StreetRun.Scenario.Scene'Death -> $j }
                        StreetRun.Scenario.Scene'GameOver
                        -> case b2 of wild4 {
                             DEFAULT -> GHC.Types.False
                             StreetRun.Scenario.Scene'GameOver -> $j }
                        StreetRun.Scenario.Scene'Quit
                        -> case b2 of wild4 {
                             DEFAULT -> GHC.Types.False
                             StreetRun.Scenario.Scene'Quit -> $j } } } } } } } } }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fHasCommonVarsVars ::
    StreetRun.Common.HasCommonVars StreetRun.State.Vars
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(1*U,U,U,U,U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                  `cast`
                (Sym (StreetRun.Common.N:HasCommonVars[0]
                          <StreetRun.State.Vars>_N)) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fHasCommonVarsVars_$ccommonVars ::
    Control.Lens.Type.Lens'
      StreetRun.State.Vars StreetRun.Common.CommonVars
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(1*U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (eta :: StreetRun.Common.CommonVars
                           -> f StreetRun.Common.CommonVars)
                   (eta1 :: StreetRun.State.Vars) ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ StreetRun.Common.CommonVars
                   @ StreetRun.State.Vars
                   (\ (s :: StreetRun.Common.CommonVars) ->
                    case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    StreetRun.State.Vars s ds1 ds2 ds3 ds4 ds5 ds6 ds7 })
                   (eta
                      (case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds }))) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fHasGameOverVarsVars ::
    StreetRun.Out_func.HasGameOverVars StreetRun.State.Vars
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,U,1*U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                StreetRun.State.$fHasGameOverVarsVars_$cgameOverVars
                  `cast`
                (Sym (StreetRun.Out_func.N:HasGameOverVars[0]
                          <StreetRun.State.Vars>_N)) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fHasGameOverVarsVars_$cgameOverVars ::
    Control.Lens.Type.Lens'
      StreetRun.State.Vars StreetRun.Out.GameOverVars
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,U,1*U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (eta :: StreetRun.Out.GameOverVars -> f StreetRun.Out.GameOverVars)
                   (eta1 :: StreetRun.State.Vars) ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ StreetRun.Out.GameOverVars
                   @ StreetRun.State.Vars
                   (\ (s :: StreetRun.Out.GameOverVars) ->
                    case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    StreetRun.State.Vars ds ds1 ds2 ds3 ds4 s ds6 ds7 })
                   (eta
                      (case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds5 }))) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fHasPlayVarsVars ::
    StreetRun.Work_func.HasPlayVars StreetRun.State.Vars
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,1*U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                StreetRun.State.$fHasPlayVarsVars_$cplayVars
                  `cast`
                (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                          <StreetRun.State.Vars>_N)) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fHasPlayVarsVars_$cplayVars ::
    Control.Lens.Type.Lens'
      StreetRun.State.Vars StreetRun.Work.PlayVars
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,U,1*U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (eta :: StreetRun.Work.PlayVars -> f StreetRun.Work.PlayVars)
                   (eta1 :: StreetRun.State.Vars) ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ StreetRun.Work.PlayVars
                   @ StreetRun.State.Vars
                   (\ (s :: StreetRun.Work.PlayVars) ->
                    case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    StreetRun.State.Vars ds ds1 ds2 ds3 s ds5 ds6 ds7 })
                   (eta
                      (case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds4 }))) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fHasTitleVarsVars ::
    StreetRun.Tag_func.HasTitleVars StreetRun.State.Vars
  DFunId
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,1*U,U,U,U,U)>,
     Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                  `cast`
                (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                          <StreetRun.State.Vars>_N)) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fHasTitleVarsVars_$ctitleVars ::
    Control.Lens.Type.Lens'
      StreetRun.State.Vars StreetRun.Tag.TitleVars
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(C(C(S))L),1*U(1*C1(C1(U)),A)><L,1*C1(U)><L,U(U,U,U,1*U,U,U,U,U)>,
     Unfolding: InlineRule (3, True, False)
                (\ @ f :: * -> *
                   ($dFunctor :: GHC.Base.Functor f)
                   (eta :: StreetRun.Tag.TitleVars -> f StreetRun.Tag.TitleVars)
                   (eta1 :: StreetRun.State.Vars) ->
                 GHC.Base.fmap
                   @ f
                   $dFunctor
                   @ StreetRun.Tag.TitleVars
                   @ StreetRun.State.Vars
                   (\ (s :: StreetRun.Tag.TitleVars) ->
                    case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                    StreetRun.State.Vars ds ds1 ds2 s ds4 ds5 ds6 ds7 })
                   (eta
                      (case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                       ds3 }))) -}
650d39c4c257120a3a60af34d5d27c42
  $fHasVarsVars :: StreetRun.State.HasVars StreetRun.State.Vars
  DFunId
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                StreetRun.State.$fHasVarsVars_$cvars
                  `cast`
                (Sym (StreetRun.State.N:HasVars[0] <StreetRun.State.Vars>_N)) -}
dddaa3c1c47cffe5ba3050e41ae40a59
  $fHasVarsVars_$cvars ::
    Control.Lens.Type.Lens' StreetRun.State.Vars StreetRun.State.Vars
  {- Arity: 2, HasNoCafRefs, Strictness: <L,A>,
     Unfolding: InlineRule (1, True, True)
                (\ @ f :: * -> * ($dFunctor :: GHC.Base.Functor f) ->
                 GHC.Base.id @ (StreetRun.State.Vars -> f StreetRun.State.Vars)) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fShowVars :: GHC.Show.Show StreetRun.State.Vars
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.State.Vars
                  StreetRun.State.$fShowVars_$cshowsPrec
                  StreetRun.State.$fShowVars_$cshow
                  StreetRun.State.$fShowVars_$cshowList -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fShowVars1 :: StreetRun.State.Vars -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U(U),1*U,U),U,U,1*U(1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U)),1*U(U(U),U(U),1*U(U),1*U(U),1*U(U,1*U,1*U,1*U),U,1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,1*U,1*U,1*U),1*U(U),1*U(U),1*U(U),1*U(U),U,U),1*U(1*U(U),1*U(U)),1*U(1*U(U,1*U),1*U(U,1*U),1*U(U,1*U),1*U(U,1*U),U),1*U(1*U(U,U),1*U(U,U)))>,
     Unfolding: (\ (w :: StreetRun.State.Vars) ->
                 case w of ww { StreetRun.State.Vars ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 StreetRun.State.$w$cshowsPrec
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8 }) -}
b13016f2788160db3bfe910352cd0416
  $fShowVars2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fShowVars_$cshow :: StreetRun.State.Vars -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S,1*U(1*U(U(U),1*U,U),U,U,1*U(1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U)),1*U(U(U),U(U),1*U(U),1*U(U),1*U(U,1*U,1*U,1*U),U,1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,1*U,1*U,1*U),1*U(U),1*U(U),1*U(U),1*U(U),U,U),1*U(1*U(U),1*U(U)),1*U(1*U(U,1*U),1*U(U,1*U),1*U(U,1*U),1*U(U,1*U),U),1*U(1*U(U,U),1*U(U,U)))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.State.Vars) ->
                 StreetRun.State.$fShowVars_$cshowsPrec
                   StreetRun.State.$fShowVars2
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fShowVars_$cshowList :: [StreetRun.State.Vars] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.State.Vars]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.State.Vars
                   StreetRun.State.$fShowVars1
                   ls
                   s) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $fShowVars_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.State.Vars -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S,1*U(1*U(U(U),1*U,U),U,U,1*U(1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U)),1*U(U(U),U(U),1*U(U),1*U(U),1*U(U,1*U,1*U,1*U),U,1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,1*U,1*U,1*U),1*U(U),1*U(U),1*U(U),1*U(U),U,U),1*U(1*U(U),1*U(U)),1*U(1*U(U,1*U),1*U(U,1*U),1*U(U,1*U),1*U(U,1*U),U),1*U(1*U(U,U),1*U(U,U)))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: StreetRun.State.Vars) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { StreetRun.State.Vars ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.State.$w$cshowsPrec
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww10 } }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $sel:vCamera:Vars ::
    StreetRun.State.Vars -> StreetRun.Camera.Camera
  RecSel Left StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,1*U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds8 }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $sel:vCommon:Vars ::
    StreetRun.State.Vars -> StreetRun.Common.CommonVars
  RecSel Left StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(1*U(U,U,U),A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds1 }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $sel:vGameOver:Vars ::
    StreetRun.State.Vars -> StreetRun.Out.GameOverVars
  RecSel Left StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,1*U(U,U),A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds6 }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $sel:vInput:Vars :: StreetRun.State.Vars -> StreetRun.Input.Input
  RecSel Left StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,1*U(U,U,U,U,U),A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds7 }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $sel:vNextScene:Vars ::
    StreetRun.State.Vars -> StreetRun.Scenario.Scene
  RecSel Left StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,1*U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds3 }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $sel:vPlay:Vars :: StreetRun.State.Vars -> StreetRun.Work.PlayVars
  RecSel Left StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds5 }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $sel:vScene:Vars ::
    StreetRun.State.Vars -> StreetRun.Scenario.Scene
  RecSel Left StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,1*U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds2 }) -}
94cac8e669b0992d9fdeb1c0cad361f9
  $sel:vTitle:Vars :: StreetRun.State.Vars -> StreetRun.Tag.TitleVars
  RecSel Left StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,1*U(U,U,U,U),A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.State.Vars) ->
                 case ds of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 ds4 }) -}
c25162c17cf357aa77af36f47049c40f
  $tc'Vars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9512186802707788397##
                   3792258574536085116##
                   StreetRun.State.$trModule
                   StreetRun.State.$tc'Vars2
                   0#
                   StreetRun.State.$tc'Vars1) -}
45c5c06049b9b1dca5aec981912195ce
  $tc'Vars1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
61a8b4cf9b17733a24426326d5571bb1
  $tc'Vars2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.State.$tc'Vars3) -}
33ec8c08b23e4f4ad8b362591f3f3ac4
  $tc'Vars3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Vars"#) -}
4fce778e4af4edc2830c709419fbaee7
  $tcHasVars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4237547442222199907##
                   1390576690555438337##
                   StreetRun.State.$trModule
                   StreetRun.State.$tcHasVars2
                   0#
                   StreetRun.State.$tcHasVars1) -}
27e60ea5f7881a3fbf1f6254240bb021
  $tcHasVars1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1474b8c35a83fdebdfd39f228fa656f1
  $tcHasVars2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.State.$tcHasVars3) -}
a7401b214537a3332ae8270cc0a0edf9
  $tcHasVars3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HasVars"#) -}
8e1109def173a00ef8ae47124251440e
  $tcVars :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14256170631220530794##
                   13494224128928598222##
                   StreetRun.State.$trModule
                   StreetRun.State.$tcVars1
                   0#
                   GHC.Types.krep$*) -}
697caf8123398817fdcb1258b780e090
  $tcVars1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.State.$tcVars2) -}
34d60fca7de2ccdc9a099528ff78cfa9
  $tcVars2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Vars"#) -}
fb9785270723972263e2c87c1e8798c9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.State.$trModule3
                   StreetRun.State.$trModule1) -}
bf7e2a296f37abd15db5d7b7b95585fd
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.State.$trModule2) -}
3fdae6ef1f254d29ab0f24bb49d11f30
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.State"#) -}
8eedf3cec88a971b46c912dac003d891
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.State.$trModule4) -}
71a97a8ab2dfc6d17efc091c11d99377
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
ee5342ab5c5c1da380163d99ee94017e
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> StreetRun.Common.CommonVars
    -> StreetRun.Scenario.Scene
    -> StreetRun.Scenario.Scene
    -> StreetRun.Tag.TitleVars
    -> StreetRun.Work.PlayVars
    -> StreetRun.Out.GameOverVars
    -> StreetRun.Input.Input
    -> StreetRun.Camera.Camera
    -> GHC.Show.ShowS
  {- Arity: 9,
     Strictness: <S,U><L,1*U(U(U),1*U,U)><L,U><L,U><L,1*U(1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U))><L,1*U(U(U),U(U),1*U(U),1*U(U),1*U(U,1*U,1*U,1*U),U,1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,U(U),U,U),1*U(U,1*U,1*U,1*U),1*U(U),1*U(U),1*U(U),1*U(U),U,U)><L,1*U(1*U(U),1*U(U))><L,1*U(1*U(U,1*U),1*U(U,1*U),1*U(U,1*U),1*U(U,1*U),U)><L,1*U(1*U(U,U),1*U(U,U))>,
     Inline: [2] -}
650d39c4c257120a3a60af34d5d27c42
  class HasVars c where
    vars :: Control.Lens.Type.Lens' c StreetRun.State.Vars
    {-# MINIMAL vars #-}
94cac8e669b0992d9fdeb1c0cad361f9
  data Vars
    = Vars {vCommon :: StreetRun.Common.CommonVars,
            vScene :: StreetRun.Scenario.Scene,
            vNextScene :: StreetRun.Scenario.Scene,
            vTitle :: StreetRun.Tag.TitleVars,
            vPlay :: StreetRun.Work.PlayVars,
            vGameOver :: StreetRun.Out.GameOverVars,
            vInput :: StreetRun.Input.Input,
            vCamera :: StreetRun.Camera.Camera}
804dc814ad3dfd1100f71425f3dfa705
  initVars ::
    [(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)]
    -> StreetRun.State.Vars
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (mkObstacles :: [(GHC.Types.Int,
                                     StreetRun.Hurdle.ObstacleTag)]) ->
                 StreetRun.State.Vars
                   StreetRun.Common.initCommonVars
                   StreetRun.Scenario.Scene'Title
                   StreetRun.Scenario.Scene'Title
                   StreetRun.Tag_func.initTitleVars
                   (StreetRun.Work_func.initPlayVars mkObstacles)
                   StreetRun.Out_func.initGameOverVars
                   StreetRun.Input.initInput
                   StreetRun.Camera.initCamera) -}
instance GHC.Classes.Eq [StreetRun.State.Vars]
  = StreetRun.State.$fEqVars
instance StreetRun.Common.HasCommonVars [StreetRun.State.Vars]
  = StreetRun.State.$fHasCommonVarsVars
instance StreetRun.Out_func.HasGameOverVars [StreetRun.State.Vars]
  = StreetRun.State.$fHasGameOverVarsVars
instance StreetRun.Work_func.HasPlayVars [StreetRun.State.Vars]
  = StreetRun.State.$fHasPlayVarsVars
instance StreetRun.Tag_func.HasTitleVars [StreetRun.State.Vars]
  = StreetRun.State.$fHasTitleVarsVars
instance StreetRun.State.HasVars [StreetRun.State.Vars]
  = StreetRun.State.$fHasVarsVars
instance GHC.Show.Show [StreetRun.State.Vars]
  = StreetRun.State.$fShowVars
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

