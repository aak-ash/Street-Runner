
==================== FINAL INTERFACE ====================
2019-04-26 14:29:08.546408099 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.HUD 8064
  interface hash: 5ae24d091bf2d2cead7b5d3660af52ea
  ABI hash: 33ed45f0ee969474895a8614650a2f1b
  export-list hash: 7832e9cac015a5203f08d8c52ac8b9ae
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.HUD.drawControls'
  StreetRun.HUD.drawHiscore'
  StreetRun.HUD.drawNumbers
  StreetRun.HUD.drawScore'
  StreetRun.HUD.HUD{StreetRun.HUD.drawControls StreetRun.HUD.drawHiscore StreetRun.HUD.drawScore}
module dependencies: StreetRun.Assets StreetRun.Assets_1
                     StreetRun.Assets_2 StreetRun.CFL StreetRun.Camera StreetRun.Common
                     StreetRun.Config StreetRun.Font StreetRun.Font_functions
                     StreetRun.Hurdle StreetRun.Hurdle_1 StreetRun.Input
                     StreetRun.Physics StreetRun.Quake StreetRun.Quake_BackStreet
                     StreetRun.Quake_Building StreetRun.Quake_Grass
                     StreetRun.Quake_Street StreetRun.Renderer StreetRun.Renderer_func_1
                     StreetRun.Renderer_func_2 StreetRun.Runner StreetRun.Runner_func_1
                     StreetRun.Runner_func_2 StreetRun.SDLLayer StreetRun.Scenario
                     StreetRun.Sfx StreetRun.Snag StreetRun.Step StreetRun.Types
                     StreetRun.Work StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17 scientific-0.3.6.2
                      sdl2-2.4.1.0 sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         linear-1.20.8:Linear.Instances base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:Data.Foldable 5f70351366640f007be66681d2212df8
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
import  -/  lens-4.17:Control.Lens 02c38743366e4d3d260b71bddfddea13
import  -/  lens-4.17:Control.Lens.Getter 18b0523ecb5ed8cc7fa826ffd942da08
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  StreetRun.Common ec7a24ddc13a89793e354234ea8b6a8f
  exports: 5bf7e8807e04e9b7e18cf5c3f75b1f5b
  $sel:cvHiscore:CommonVars 1a70b4b7adfef4baee78b76f08e9c288
  HasCommonVars 78e2982dec7ad30766f890d3421b5154
  commonVars 2394ba70a1376f821bc3afbedd466646
import  -/  StreetRun.Font 34a23e060586d079dd0657583ffec0bf
  exports: 09e7f7e66762b635c22cb5644e292e72
import  -/  StreetRun.Font_functions 233513d294ddb4c635ea5e843e8f2bc1
  exports: c1863499f3ebc41d6a1caeb3c071141a
  toNumberReverse 1e3288a1964648de6cb5976aabe82b56
import  -/  StreetRun.Renderer 0519d22b921b8437012069e63a6f4fa6
  exports: 3ce23641af82250faf4b4afd515774b7
  Renderer 718a3d63cec016694ff0c781c86acdfc
  drawControlsText 76faa600e0a59dd6c1019a2728558ec4
  drawHiscoreText 3aececd03c6b18fda7ae5d49ef3491da
  drawNumber efc5747e03521eb7a6a30e323aefdf65
import  -/  StreetRun.Renderer_func_1 a9aeb84e666161fb4390884165deb075
  exports: 6a0ad2bf2ffcb5fd6ca93a687f153110
import  -/  StreetRun.Renderer_func_2 8e1829777a16c2ecd350a0a2077893e3
  exports: e72c1bc9f19fb36af370b60f395645dd
import  -/  StreetRun.Work 84c49625e5300d184b6b74d71a119d1f
  exports: be18f47a77094179ee18b27ca088c03e
  $sel:pvScore:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvSeconds:PlayVars 454bac6bacb8c3a13959acb3712742b4
import  -/  StreetRun.Work_func e74f2daf9d4710767ad8c2ada174399d
  exports: c79cba614ebcff5946e13d50725530aa
  HasPlayVars 9cbc89508257ef44e1f754bf3878ef7f
  playVars a16e4bec16bd99ad3c380a2d9a9d4a2c
a9288adb3c6870de6e3de5d760795123
  $tc'C:HUD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15141097494528897167##
                   3094018620200797137##
                   StreetRun.HUD.$trModule
                   StreetRun.HUD.$tc'C:HUD2
                   1#
                   StreetRun.HUD.$tc'C:HUD1) -}
3e6d288d77c97cb0244105ca0147a69e
  $tc'C:HUD1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
507b3746e179cc17c90499c10d2daba3
  $tc'C:HUD2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.HUD.$tc'C:HUD3) -}
14fc8f43bc7ff156e9423135e16b7253
  $tc'C:HUD3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:HUD"#) -}
b8702cbcf2d458d3f80f8e73c0dcc469
  $tcHUD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3776264625076898781##
                   8651596617328099463##
                   StreetRun.HUD.$trModule
                   StreetRun.HUD.$tcHUD2
                   0#
                   StreetRun.HUD.$tcHUD1) -}
8cda40767dc076d74db2736804deb34d
  $tcHUD1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
053ac583a6e48c83300664a8c7039ca7
  $tcHUD2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.HUD.$tcHUD3) -}
1f219bc861be99767e0d699c3e097c0d
  $tcHUD3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("HUD"#) -}
6b3c5cefd8ef648ac1a70caeb2518d18
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.HUD.$trModule3
                   StreetRun.HUD.$trModule1) -}
be873042eb836af092ae1686d950797b
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.HUD.$trModule2) -}
3eca081c2f00d2afe013991f6e6e9ba3
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.HUD"#) -}
d5d4be634ad4321d48d77ef744b1b7ba
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.HUD.$trModule4) -}
03be485ce5115dfda7a3281ead9006c5
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
45448efffee22b39cd922e74e8455b50
  $wdrawControls' ::
    GHC.Base.Applicative m =>
    (forall a b. m a -> (a -> m b) -> m b)
    -> ((GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (Control.Monad.State.Class.MonadState s m,
        StreetRun.Work_func.HasPlayVars s) =>
       m ()
  {- Arity: 5,
     Strictness: <L,1*U(A,1*C1(U),A,A,A,A)><C(C(S)),1*C1(C1(U))><L,1*C1(U)><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   @ s
                   (ww :: GHC.Base.Applicative m)
                   (ww1 :: forall a b. m a -> (a -> m b) -> m b)
                   (ww2 :: (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s) ->
                 let {
                   lvl :: m () = ww2 StreetRun.HUD.drawControls'2
                 } in
                 let {
                   lvl1 :: m () = GHC.Base.pure @ m ww @ () GHC.Tuple.()
                 } in
                 ww1
                   @ StreetRun.Work.PlayVars
                   @ ()
                   (case w of ww3 { Control.Monad.State.Class.C:MonadState ww4 ww5 ww6 ww7 ->
                    case ww4 of ww8 { GHC.Base.C:Monad ww9 ww10 ww11 ww12 ww13 ->
                    let {
                      w2 :: s -> Data.Functor.Const.Const StreetRun.Work.PlayVars s
                      = w1 `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Work.PlayVars)
                          (Data.Functor.Const.$fFunctorConst @ StreetRun.Work.PlayVars)
                          StreetRun.HUD.drawControls'1
                            `cast`
                          (<StreetRun.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Work.PlayVars>_R
                                         <StreetRun.Work.PlayVars>_P))
                    } in
                    ww10
                      @ s
                      @ StreetRun.Work.PlayVars
                      ww5
                      (\ (s1 :: s) ->
                       ww12
                         @ StreetRun.Work.PlayVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Work.PlayVars>_R <s>_P)) } })
                   (\ (pv :: StreetRun.Work.PlayVars) ->
                    case pv of wild { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                    case ds4
                           `cast`
                         (StreetRun.Types.N:Seconds[0]) of wild1 { GHC.Types.F# x ->
                    case GHC.Prim.ltFloat# x 0.0# of lwild {
                      DEFAULT -> lvl1 1# -> lvl } } })) -}
924e5ea5a4f217e5b45fd5d948adc232
  $wdrawHiscore' ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a b. m a -> m b -> m b)
    -> (forall a. a -> m a)
    -> ((GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (StreetRun.Font.Number
        -> (GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (Control.Monad.State.Class.MonadState s m,
        StreetRun.Common.HasCommonVars s) =>
       m ()
  {- Arity: 7,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,C(U)><L,1*C1(U)><L,C(C1(U))><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   @ s
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a b. m a -> m b -> m b)
                   (ww2 :: forall a. a -> m a)
                   (ww3 :: (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (ww4 :: StreetRun.Font.Number
                           -> (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Common.HasCommonVars s) ->
                 let {
                   lvl :: m () = ww3 StreetRun.HUD.drawHiscore'38
                 } in
                 let {
                   $dRenderer :: GHC.Base.Monad m
                   = GHC.Base.C:Monad
                       @ m
                       (StreetRun.HUD.drawHiscore'36 @ m)
                       ww
                       ww1
                       ww2
                       (StreetRun.HUD.drawHiscore'34 @ m)
                 } in
                 let {
                   $dRenderer1 :: StreetRun.Renderer.Renderer m
                   = StreetRun.Renderer.C:Renderer
                       @ m
                       $dRenderer
                       (StreetRun.HUD.drawHiscore'32 @ m)
                       (StreetRun.HUD.drawHiscore'32 @ m)
                       (StreetRun.HUD.drawHiscore'30 @ m)
                       (StreetRun.HUD.drawHiscore'28 @ m)
                       (StreetRun.HUD.drawHiscore'26 @ m)
                       (StreetRun.HUD.drawHiscore'24 @ m)
                       (StreetRun.HUD.drawHiscore'22 @ m)
                       (StreetRun.HUD.drawHiscore'20 @ m)
                       (StreetRun.HUD.drawHiscore'18 @ m)
                       (StreetRun.HUD.drawHiscore'16 @ m)
                       (StreetRun.HUD.drawHiscore'14 @ m)
                       (StreetRun.HUD.drawHiscore'12 @ m)
                       (StreetRun.HUD.drawHiscore'10 @ m)
                       (StreetRun.HUD.drawHiscore'8 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'4 @ m)
                       ww3
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       ww4
                       (StreetRun.HUD.drawHiscore'6 @ m)
                 } in
                 ww
                   @ StreetRun.Common.CommonVars
                   @ ()
                   (case w of ww5 { Control.Monad.State.Class.C:MonadState ww6 ww7 ww8 ww9 ->
                    case ww6 of ww10 { GHC.Base.C:Monad ww11 ww12 ww13 ww14 ww15 ->
                    let {
                      w2 :: s -> Data.Functor.Const.Const StreetRun.Common.CommonVars s
                      = w1 `cast` (StreetRun.Common.N:HasCommonVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Common.CommonVars)
                          (Data.Functor.Const.$fFunctorConst @ StreetRun.Common.CommonVars)
                          StreetRun.HUD.drawHiscore'3
                            `cast`
                          (<StreetRun.Common.CommonVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Common.CommonVars>_R
                                         <StreetRun.Common.CommonVars>_P))
                    } in
                    ww12
                      @ s
                      @ StreetRun.Common.CommonVars
                      ww7
                      (\ (s1 :: s) ->
                       ww14
                         @ StreetRun.Common.CommonVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Common.CommonVars>_R <s>_P)) } })
                   (\ (cv :: StreetRun.Common.CommonVars) ->
                    ww1
                      @ ()
                      @ ()
                      lvl
                      (case cv of wild { StreetRun.Common.CommonVars ds1 ds2 ds3 ->
                       case ds1
                              `cast`
                            (StreetRun.Types.N:Score[0]) of wild1 { GHC.Types.I# i ->
                       StreetRun.HUD.$wdrawNumbers
                         @ m
                         $dRenderer1
                         (GHC.Integer.Type.smallInteger i)
                         StreetRun.HUD.drawHiscore'2
                         StreetRun.HUD.drawHiscore'1 } }))) -}
a305de48ef6a823812df061010758ab8
  $wdrawNumbers ::
    StreetRun.Renderer.Renderer m =>
    GHC.Integer.Type.Integer -> GHC.Types.Int -> GHC.Types.Int -> m ()
  {- Arity: 4,
     Strictness: <L,U(1*U(A,A,C(C1(U)),1*C1(U),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(C1(U)),A)><S,U><L,U(U)><L,U>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   (w :: StreetRun.Renderer.Renderer m)
                   (w1 :: GHC.Integer.Type.Integer)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int) ->
                 let {
                   w2 :: GHC.Base.Monad m = StreetRun.Renderer.$p1Renderer @ m w
                 } in
                 let {
                   n :: m () = GHC.Base.return @ m w2 @ () GHC.Tuple.()
                 } in
                 letrec {
                   go :: GHC.Prim.Int# -> [StreetRun.Font.Number] -> m ()
                     {- Arity: 2, Strictness: <L,U><S,1*U> -}
                   = \ (x :: GHC.Prim.Int#) (eta :: [StreetRun.Font.Number]) ->
                     case eta of wild {
                       [] -> n
                       : y ys
                       -> GHC.Base.>>
                            @ m
                            w2
                            @ ()
                            @ ()
                            (StreetRun.Renderer.drawNumber
                               @ m
                               w
                               y
                               (case ww of wild1 { GHC.Types.I# x1 ->
                                GHC.Types.I# (GHC.Prim.-# x1 (GHC.Prim.*# x 16#)) },
                                ww1))
                            (case x of wild1 {
                               DEFAULT -> go (GHC.Prim.+# wild1 1#) ys
                               9223372036854775807# -> n }) }
                 } in
                 go
                   0#
                   (GHC.List.reverse1
                      @ StreetRun.Font.Number
                      (StreetRun.Font_functions.toNumber w1)
                      (GHC.Types.[] @ StreetRun.Font.Number))) -}
1756fcc5508a74c0925871fa3a924f09
  $wdrawScore' ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a b. m a -> m b -> m b)
    -> (forall a. a -> m a)
    -> (StreetRun.Font.Number
        -> (GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (Control.Monad.State.Class.MonadState s m,
        StreetRun.Work_func.HasPlayVars s) =>
       m ()
  {- Arity: 6,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,C(U)><L,C(C1(U))><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   @ s
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a b. m a -> m b -> m b)
                   (ww2 :: forall a. a -> m a)
                   (ww3 :: StreetRun.Font.Number
                           -> (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s) ->
                 let {
                   $dRenderer :: GHC.Base.Monad m
                   = GHC.Base.C:Monad
                       @ m
                       (StreetRun.HUD.drawHiscore'36 @ m)
                       ww
                       ww1
                       ww2
                       (StreetRun.HUD.drawHiscore'34 @ m)
                 } in
                 let {
                   $dRenderer1 :: StreetRun.Renderer.Renderer m
                   = StreetRun.Renderer.C:Renderer
                       @ m
                       $dRenderer
                       (StreetRun.HUD.drawHiscore'32 @ m)
                       (StreetRun.HUD.drawHiscore'32 @ m)
                       (StreetRun.HUD.drawHiscore'30 @ m)
                       (StreetRun.HUD.drawHiscore'28 @ m)
                       (StreetRun.HUD.drawHiscore'26 @ m)
                       (StreetRun.HUD.drawHiscore'24 @ m)
                       (StreetRun.HUD.drawHiscore'22 @ m)
                       (StreetRun.HUD.drawHiscore'20 @ m)
                       (StreetRun.HUD.drawHiscore'18 @ m)
                       (StreetRun.HUD.drawHiscore'16 @ m)
                       (StreetRun.HUD.drawHiscore'14 @ m)
                       (StreetRun.HUD.drawHiscore'12 @ m)
                       (StreetRun.HUD.drawHiscore'10 @ m)
                       (StreetRun.HUD.drawHiscore'8 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'4 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       (StreetRun.HUD.drawHiscore'6 @ m)
                       ww3
                       (StreetRun.HUD.drawHiscore'6 @ m)
                 } in
                 ww
                   @ StreetRun.Work.PlayVars
                   @ ()
                   (case w of ww4 { Control.Monad.State.Class.C:MonadState ww5 ww6 ww7 ww8 ->
                    case ww5 of ww9 { GHC.Base.C:Monad ww10 ww11 ww12 ww13 ww14 ->
                    let {
                      w2 :: s -> Data.Functor.Const.Const StreetRun.Work.PlayVars s
                      = w1 `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Work.PlayVars)
                          (Data.Functor.Const.$fFunctorConst @ StreetRun.Work.PlayVars)
                          StreetRun.HUD.drawControls'1
                            `cast`
                          (<StreetRun.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Work.PlayVars>_R
                                         <StreetRun.Work.PlayVars>_P))
                    } in
                    ww11
                      @ s
                      @ StreetRun.Work.PlayVars
                      ww6
                      (\ (s1 :: s) ->
                       ww13
                         @ StreetRun.Work.PlayVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Work.PlayVars>_R <s>_P)) } })
                   (\ (pv :: StreetRun.Work.PlayVars) ->
                    case pv of wild { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                    case ds1
                           `cast`
                         (StreetRun.Types.N:Score[0]) of wild1 { GHC.Types.I# i ->
                    StreetRun.HUD.$wdrawNumbers
                      @ m
                      $dRenderer1
                      (GHC.Integer.Type.smallInteger i)
                      StreetRun.HUD.drawHiscore'2
                      StreetRun.HUD.drawScore'1 } })) -}
910cd3343cd00cd8902c09529859c02a
  class GHC.Base.Monad m => HUD (m :: * -> *) where
    drawHiscore :: m ()
    drawScore :: m ()
    drawControls :: m ()
    {-# MINIMAL drawHiscore, drawScore, drawControls #-}
d52431e5918ea475379194d1b2b14cd4
  drawControls' ::
    (StreetRun.Renderer.Renderer m,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s) =>
    m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(1*U(A,1*C1(U),A,A,A,A),1*C1(C1(U)),A,A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U))><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: StreetRun.Renderer.Renderer m)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Work_func.HasPlayVars s) ->
                 case w of ww { StreetRun.Renderer.C:Renderer ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 case ww1 of ww27 { GHC.Base.C:Monad ww28 ww29 ww30 ww31 ww32 ->
                 StreetRun.HUD.$wdrawControls' @ m @ s ww28 ww29 ww26 w1 w2 } }) -}
68b91529158b8f8a0a4715ce672c857a
  drawControls'1 ::
    StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Work.PlayVars) -> v) -}
b81b0ce9f36a2dcb779629f2863f654c
  drawControls'2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((StreetRun.HUD.drawControls'4,
                  StreetRun.HUD.drawControls'3)) -}
c334554a4cb6309222504a8dd9432541
  drawControls'3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 470#) -}
128bb4a997f8f09de6f6478d5cea1b18
  drawControls'4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 200#) -}
0ed06d0c764870decd9971b5fe230c57
  drawHiscore' ::
    (StreetRun.Renderer.Renderer m,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Common.HasCommonVars s) =>
    m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(A,1*C1(C1(U)),C(C1(U)),C(U),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*C1(U),A,A,A,A,A,C(C1(U)),A)><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: StreetRun.Renderer.Renderer m)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Common.HasCommonVars s) ->
                 case w of ww { StreetRun.Renderer.C:Renderer ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 case ww1 of ww27 { GHC.Base.C:Monad ww28 ww29 ww30 ww31 ww32 ->
                 StreetRun.HUD.$wdrawHiscore'
                   @ m
                   @ s
                   ww29
                   ww30
                   ww31
                   ww19
                   ww25
                   w1
                   w2 } }) -}
f06aef4892cf69a5930bbf633f0abb6a
  drawHiscore'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 50#) -}
819c2c7a038d2716cca00379ec7448f6
  drawHiscore'10 ::
    StreetRun.Types.DrawSprite StreetRun.Scenario.BuildingKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Types.DrawSprite StreetRun.Scenario.BuildingKey m)
                   StreetRun.HUD.drawHiscore'11) -}
26b240e3967185fb94d71781343b7cf9
  drawHiscore'11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite BuildingKey m"#) -}
98eb4a671f4d82d23e5e5f696e942b16
  drawHiscore'12 ::
    StreetRun.Types.DrawSprite StreetRun.Snag.BirdKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Types.DrawSprite StreetRun.Snag.BirdKey m)
                   StreetRun.HUD.drawHiscore'13) -}
93aa16912f9b667b8a803a7109ac8f14
  drawHiscore'13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite BirdKey m"#) -}
3ef6c0d1f2eb51a15927b5ee306ba9f4
  drawHiscore'14 ::
    StreetRun.Types.DrawSprite StreetRun.Snag.RockKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Types.DrawSprite StreetRun.Snag.RockKey m)
                   StreetRun.HUD.drawHiscore'15) -}
3752efd26a584a8b5a91e8092f67a2f8
  drawHiscore'15 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite RockKey m"#) -}
15682896764ef82b7d1d7f602d6044fc
  drawHiscore'16 ::
    StreetRun.Types.DrawSprite StreetRun.Snag.LavaKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Types.DrawSprite StreetRun.Snag.LavaKey m)
                   StreetRun.HUD.drawHiscore'17) -}
6b7c049c5f7425501d2a8067de7d0e00
  drawHiscore'17 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite LavaKey m"#) -}
702e43f79f432f79fff8ce3a326b1c29
  drawHiscore'18 ::
    StreetRun.Types.DrawSprite StreetRun.Runner.RunnerKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Types.DrawSprite StreetRun.Runner.RunnerKey m)
                   StreetRun.HUD.drawHiscore'19) -}
f5ffbc3199fdb9063d9da761fa27ec4e
  drawHiscore'19 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite RunnerKey m"#) -}
adfd976244550fff228b5f24d32bc0c8
  drawHiscore'2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1234#) -}
c67608fb48e8903aefad249b74895529
  drawHiscore'20 ::
    m (StreetRun.Types.Animations StreetRun.Scenario.GrassKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Types.Animations StreetRun.Scenario.GrassKey))
                   StreetRun.HUD.drawHiscore'21) -}
152f114c2db2c76c7391ebcdf01e04c2
  drawHiscore'21 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations GrassKey)"#) -}
4008fae669acf98866636a546f93a8f5
  drawHiscore'22 ::
    m (StreetRun.Types.Animations StreetRun.Scenario.BuildingKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Types.Animations StreetRun.Scenario.BuildingKey))
                   StreetRun.HUD.drawHiscore'23) -}
1393cbde170d70e8033f42d57f1e3ed2
  drawHiscore'23 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations BuildingKey)"#) -}
f2aaccb17d3c536fba957b92a8df3080
  drawHiscore'24 ::
    m (StreetRun.Types.Animations StreetRun.Snag.BirdKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Types.Animations StreetRun.Snag.BirdKey))
                   StreetRun.HUD.drawHiscore'25) -}
7d536c6005d7cd82c7c1880543eed54e
  drawHiscore'25 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations BirdKey)"#) -}
43bce45f3713d38784e13650e384710a
  drawHiscore'26 ::
    m (StreetRun.Types.Animations StreetRun.Snag.RockKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Types.Animations StreetRun.Snag.RockKey))
                   StreetRun.HUD.drawHiscore'27) -}
244ff9622f752a9aeefd03c731266db1
  drawHiscore'27 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations RockKey)"#) -}
6b63d8f04502c79216280fdfa145e2cf
  drawHiscore'28 ::
    m (StreetRun.Types.Animations StreetRun.Snag.LavaKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Types.Animations StreetRun.Snag.LavaKey))
                   StreetRun.HUD.drawHiscore'29) -}
7f53d84b660c0de859a104b3fbca71de
  drawHiscore'29 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations LavaKey)"#) -}
ab26a2ce7c85fcaece202691d4d72f5d
  drawHiscore'3 ::
    StreetRun.Common.CommonVars -> StreetRun.Common.CommonVars
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Common.CommonVars) -> v) -}
b9e85c8aaffb8630db0a2771c8704f59
  drawHiscore'30 ::
    m (StreetRun.Types.Animations StreetRun.Runner.RunnerKey)
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m (StreetRun.Types.Animations StreetRun.Runner.RunnerKey))
                   StreetRun.HUD.drawHiscore'31) -}
6d0e4f3248fc3d95d1bb2be872baf833
  drawHiscore'31 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m (Animations RunnerKey)"#) -}
874f5f09fb2886fab0a78ca8d9183c33
  drawHiscore'32 :: m ()
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (m ())
                   StreetRun.HUD.drawHiscore'33) -}
d90c4e357eabdfc386cd9c371aac3f2e
  drawHiscore'33 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww m ()"#) -}
c5a433b1e86daaa602da978ce62c965c
  drawHiscore'34 :: GHC.Base.String -> m a
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (forall a. GHC.Base.String -> m a)
                   StreetRun.HUD.drawHiscore'35) -}
db00873709905037388c5727eacad1b2
  drawHiscore'35 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww forall a. String -> m a"#) -}
b006e82b6aef0d8cfa89a91a0744901b
  drawHiscore'36 :: GHC.Base.Applicative m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (GHC.Base.Applicative m)
                   StreetRun.HUD.drawHiscore'37) -}
e2566ae732f23e7c8b2708a244894c9d
  drawHiscore'37 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww Applicative m"#) -}
c1110f964487c74b9a950eb74adc82e7
  drawHiscore'38 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((StreetRun.HUD.drawHiscore'40,
                  StreetRun.HUD.drawHiscore'39)) -}
ce9e6962872b2f14d64ad074d991ed59
  drawHiscore'39 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
97817229cf0edc89ca8fd7436c9b82e9
  drawHiscore'4 :: StreetRun.Types.Percent -> m ()
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Types.Percent -> m ())
                   StreetRun.HUD.drawHiscore'5) -}
836a5dbf1576f428b47928b00f6d8a81
  drawHiscore'40 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 1180#) -}
f310175a6fada1589acef5ab5567b90a
  drawHiscore'5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww Percent -> m ()"#) -}
1a80452119623e75d92322935e38572b
  drawHiscore'6 :: (GHC.Types.Int, GHC.Types.Int) -> m ()
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ ((GHC.Types.Int, GHC.Types.Int) -> m ())
                   StreetRun.HUD.drawHiscore'7) -}
acc9cfc7ba9d07fc825687f878faad06
  drawHiscore'7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww (Int, Int) -> m ()"#) -}
0e28b6d61ba9b3852cbf023e117f3866
  drawHiscore'8 ::
    StreetRun.Types.DrawSprite StreetRun.Scenario.GrassKey m
  {- Unfolding: (\ @ m :: * -> * ->
                 Control.Exception.Base.absentError
                   @ (StreetRun.Types.DrawSprite StreetRun.Scenario.GrassKey m)
                   StreetRun.HUD.drawHiscore'9) -}
2d31e32ebc75a90055557a773ac42739
  drawHiscore'9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ww DrawSprite GrassKey m"#) -}
0460193ebb688acded79f56a0ef87953
  drawNumbers ::
    StreetRun.Renderer.Renderer m =>
    GHC.Integer.Type.Integer -> (GHC.Types.Int, GHC.Types.Int) -> m ()
  {- Arity: 3,
     Strictness: <L,U(U(A,A,C(C1(U)),C(U),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(C1(U)),A)><S,U><S,1*U(U(U),U)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   (w :: StreetRun.Renderer.Renderer m)
                   (w1 :: GHC.Integer.Type.Integer)
                   (w2 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w2 of ww { (,) ww1 ww2 ->
                 StreetRun.HUD.$wdrawNumbers @ m w w1 ww1 ww2 }) -}
c5e3b6255c9d5772ce3393324bacdbe5
  drawScore' ::
    (StreetRun.Renderer.Renderer m,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s) =>
    m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(A,1*C1(C1(U)),C(C1(U)),C(U),A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(C1(U)),A)><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: StreetRun.Renderer.Renderer m)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Work_func.HasPlayVars s) ->
                 case w of ww { StreetRun.Renderer.C:Renderer ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 case ww1 of ww27 { GHC.Base.C:Monad ww28 ww29 ww30 ww31 ww32 ->
                 StreetRun.HUD.$wdrawScore'
                   @ m
                   @ s
                   ww29
                   ww30
                   ww31
                   ww25
                   w1
                   w2 } }) -}
35103a64e0e821e73c310f389dba80eb
  drawScore'1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 100#) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

