
==================== FINAL INTERFACE ====================
2019-04-26 14:29:09.080993447 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Play 8064
  interface hash: a66152727be32fb96d61ce89ac452522
  ABI hash: 5e1759185369f3a2fb6cea30997a29a1
  export-list hash: a72549fdc40fd458e99f01bb54a263bc
  orphan hash: 59e671b01933d5ec97053a9c6b768dc0
  flag hash: e9979ed0ba295133ef8188aa5e696ffc
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Play.detectCollision
  StreetRun.Play.drawObstacles
  StreetRun.Play.drawPlay
  StreetRun.Play.getDead
  StreetRun.Play.modifyPlayVars
  StreetRun.Play.playStep'
  StreetRun.Play.tryCollision
  StreetRun.Play.updateHiscore
  StreetRun.Play.updateObstacles
  StreetRun.Play.updatePlay
  StreetRun.Play.updateRunner
  StreetRun.Play.updateScrolling
  StreetRun.Play.updateSeconds
  StreetRun.Play.updateSpeed
  StreetRun.Play.updateStocks
  StreetRun.Play.Play{StreetRun.Play.playStep}
module dependencies: StreetRun.Assets StreetRun.Assets_1
                     StreetRun.Assets_2 StreetRun.Audio StreetRun.CFL StreetRun.Camera
                     StreetRun.Common StreetRun.Config StreetRun.Font
                     StreetRun.Font_functions StreetRun.HUD StreetRun.Hurdle
                     StreetRun.Hurdle_1 StreetRun.Input StreetRun.Load StreetRun.Out
                     StreetRun.Out_func StreetRun.Physics StreetRun.Picture
                     StreetRun.Quake StreetRun.Quake_BackStreet StreetRun.Quake_Building
                     StreetRun.Quake_Grass StreetRun.Quake_Street StreetRun.Renderer
                     StreetRun.Renderer_func_1 StreetRun.Renderer_func_2
                     StreetRun.Runner StreetRun.Runner_func_1 StreetRun.Runner_func_2
                     StreetRun.SDLLayer StreetRun.Scenario StreetRun.Scene StreetRun.Sfx
                     StreetRun.Snag StreetRun.Sound_effects StreetRun.State
                     StreetRun.Step StreetRun.Tag StreetRun.Tag_func StreetRun.Types
                     StreetRun.Work StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate cf529f033c38156be2990062be8eb570
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:Data.Foldable 5f70351366640f007be66681d2212df8
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  key-state-0.2.0:KeyState f505d200ccd373546afa68666240df7e
import  -/  lens-4.17:Control.Lens 02c38743366e4d3d260b71bddfddea13
import  -/  lens-4.17:Control.Lens.Getter 18b0523ecb5ed8cc7fa826ffd942da08
import  -/  lens-4.17:Control.Lens.Setter 7961fe073f63bb6246bee7094d4bca17
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  StreetRun.Audio 91f095936fecbb9f076d29d5950c869b
  exports: 778206d5370172e5e0ea84450aec5c45
  Audio 4ba14999075ad68ce5a755a8d89bcb9d
import  -/  StreetRun.CFL 22aaa7e917fe6023bc75b650c540e607
  exports: f389828e267831208731f8c3eb015474
  Clock 7a224d3c24f27ab5449750b94a90522b
  Logger 1754f757febcf328080928cadc0ce029
  frameDeltaSeconds 9605a9c4d4e8e9e818a55364604b43d7
import  -/  StreetRun.Camera 15520c15c72428459c71d35d468598c8
  exports: 445eb368813d35f6641c1446797753f7
import  -/  StreetRun.Common ec7a24ddc13a89793e354234ea8b6a8f
  exports: 5bf7e8807e04e9b7e18cf5c3f75b1f5b
  $sel:cvHiscore:CommonVars 1a70b4b7adfef4baee78b76f08e9c288
  $sel:cvQuake:CommonVars 1a70b4b7adfef4baee78b76f08e9c288
  HasCommonVars 78e2982dec7ad30766f890d3421b5154
  commonVars 2394ba70a1376f821bc3afbedd466646
import  -/  StreetRun.HUD 33ed45f0ee969474895a8614650a2f1b
  exports: 7832e9cac015a5203f08d8c52ac8b9ae
  HUD 910cd3343cd00cd8902c09529859c02a
  drawControls d5d5e5bac4f9f314625845630c86d5cb
  drawHiscore 1844561d5282f8253fb45bae9bfafaf4
  drawScore 9e18e54c86359c908d3735ba2181bbb5
import  -/  StreetRun.Hurdle 38a26fa541ce5ced9eea0f70d3aa69b6
  exports: ccac325c207e939d1f0d01c3da87ee30
  $sel:osDistance:ObstacleState 95c2800d9f00728984a40ce71c8f5ddb
  $sel:osInfo:ObstacleState 95c2800d9f00728984a40ce71c8f5ddb
  ObstacleInfo'Bird ccccae1530dc8bd901d7158bbcf74e40
  ObstacleInfo'Lava 4e5c5aba543882a230926828de4a48aa
  ObstacleInfo'Rock d2f0dba6425cf0a273123b80bb6c9499
  ObstacleState f35d4f34b2a1f4b6dadbc707870d147a
  ObstacleState 95c2800d9f00728984a40ce71c8f5ddb
  ObstacleTag'Bird 70a1f6d4c3b86d544572eecd826a4a64
  ObstacleTag'Lava ed433d5b396f1137814a4380606c538e
  ObstacleTag'Rock 770d2ca50a94dd8dea509e443e13376e
  birdY 7193f7bf2a627e7b5bd560b5eb135a97
  lavaY 58e67e5b07377f4d36fa776e595d4385
  obstacleAabb a5327c186bfc058418e706146ebd9908
  rockY d7f9380ab0d3b3bdb40701f60199e545
import  -/  StreetRun.Hurdle_1 c9e76027407717b022743d66c2f85407
  exports: be3dc5eb0f18c89559dce1b425bb13f5
  iterateObstacles 4fafebfc116744e6f440ad43e6ec3d18
import  -/  StreetRun.Input 2b2882bb9ccf0deac02d72ccd2af9474
  exports: 794b8afcff1485016b9c41551ca5bab1
  $sel:iSpace:Input f50c2ab9e2082623275c9cc57e0e92df
import  -/  StreetRun.Load b854b61e5394a1e0d9cd4b9313a268b0
  exports: 4cddd7fe752b7b923c34c3b71e404029
  HasInput ba70c797691329d224bd192290501ef6
  getInput 191f425c4d27320b241e01dc8844e1d0
import  -/  StreetRun.Physics 913327b3ebcb9b45610bccf968b96819
  exports: 9d3a92dda1fb515a473dcd811827989d
  collisionIntersect cb8debe291605a263e6f28e6cb560d2f
import  -/  StreetRun.Picture b3a434655916c9bd40f5e83b30c22973
  exports: 3a912206f39fec45a542e7a9b7b90546
  CameraControl 4fbff540ba209f3d818863d970cdf797
import  -/  StreetRun.Quake b6a124c4030dd8107fa49ff2cc71f4ef
  exports: 1b20d2e9b9ea83d46fe981dd6ab66f9e
  Quake 1a9c7230fc5b6045929623cb4b581a74
import  -/  StreetRun.Quake_BackStreet ebd66aa7fea9a4375db34319ddddfe2a
  exports: 578e5b9ec1aaacc51172575d1af9f5be
  applyQuakeToBackStreet ae610989547ea9f445521321c10d41c9
import  -/  StreetRun.Quake_Building 7b28d20ae17511fa922d20e9819b3dc0
  exports: 6525757d6f3314b41ce008ffadedcbcd
  applyQuakeToBuilding 75f95d76f94aadf9fbde79f512e1287d
import  -/  StreetRun.Quake_Grass 5769fbd4058b117d8edf4d5fb329570b
  exports: 7f02c80c1b0edff6e6cef90cfed2f356
  applyQuakeToGrass 746ef2a7bfdacb0ce16c6331ddfdf993
import  -/  StreetRun.Quake_Street 0639936fb2089261a1b9959dd9fae6ce
  exports: 945f767c32e91e3edb88f6795d3a025e
  applyQuakeToStreet cbc3186ba29eec598941c9d02b611e73
import  -/  StreetRun.Renderer 0519d22b921b8437012069e63a6f4fa6
  exports: 3ce23641af82250faf4b4afd515774b7
  Renderer 718a3d63cec016694ff0c781c86acdfc
  backStreetY d6d18a9a691e8c838d2cdefb408516e2
  buildingY fd12705178fd95b18142e8b8b595fc90
  drawBackStreet a256bda3269dd49460279d1a5af46e6c
  drawBird efe3b76a2a645c00e74c37ec9760135a
  drawBuilding 9162a3ec484098740d63d08b41ba8b08
  drawGrass 1c222f81d1ad0ae6611d3a64f4ce5df9
  drawLava a045cd1431b2c5da04d3c7f6f98698d1
  drawRock ace760f317a242fd3618c402bdea298d
  drawRunner 135ef7a866989d944f40576be2e3f3b4
  drawStreet 56481eb6410660724e0c6477d55a660e
  getBirdAnimations b76b8aeed279815ee92c45c9f61ba7ad
  getBuildingAnimations 0aae0f4093ec2823e58e7ba08120c3a5
  getGrassAnimations 7490e1214f10ead45cd2c92a5b22c5be
  getLavaAnimations 12511df4726afaed0bd4f4974d309500
  getRockAnimations b9bba666b47210162aa627dd8934d470
  getRunnerAnimations 2fcaf83fcbda5f1bc7a60f13b946af8e
  grassY 3f786eac2f607352fc5a43167b9f58be
  streetY fe01709c343458dc4f3317788fb8ff29
import  -/  StreetRun.Renderer_func_1 a9aeb84e666161fb4390884165deb075
  exports: 6a0ad2bf2ffcb5fd6ca93a687f153110
import  -/  StreetRun.Renderer_func_2 8e1829777a16c2ecd350a0a2077893e3
  exports: e72c1bc9f19fb36af370b60f395645dd
  stepHorizontalDistance 997ba6800346daa12b9fffb369625004
import  -/  StreetRun.Runner a6abbd291e744158bf9018a60f48d314
  exports: ae88bb9ed2797ab0ae7bfb3fb6716c40
  $sel:dsHeight:RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
  $sel:dsRecover:RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
  RunnerAction 96b981a2adf5042b7be2258f10bd37f0
  RunnerAction'Duck aa99514d3c4d70fb8300e8d80209d403
  RunnerAction'Hurt 0b414f4d4215180b5f3dd3d581dcc132
  RunnerAction'Jump a4fd8fd2893a082d05e81ff1c9516470
  RunnerAction'Move 909c36157f46dd71ce486c75b2b34ef1
  RunnerKey'Kick 3cd65175a6bf6c6362b9251f8d73343d
  RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
import  -/  StreetRun.Runner_func_1 bdddcc72b2b205ac6ed65be0261303a7
  exports: 5dd8b90845ed790a7a36c82e6f4d7138
  addStocks 8244adc782f840dc6aa2cb2ed93cdde2
  applyHurt 7cfed591a1d0e562745bbbc1acbdc0fe
  nextStocks 95091e4c4c96f00db43792d0f2d244e2
  showRunner 6b858db2d1e4cba16b18d0910487a076
  stepRunnerAction b4371f6a54e7937123a4fde4dd7d6c20
  stepRunnerPosition 0cd78cf599b749a9b36710fbc9c5d9ca
  stepRunnerState 6c7b3d2368272533d67c45a9670266ac
  stepSpeed 233a3703617a1cea97480394db34f5b2
import  -/  StreetRun.Runner_func_2 850b3567ef6c7c4675339eaa541ca68a
  exports: 132f0584768b112cf2826c60192e01cb
  runnerAabb 54de8432ba781659c545a143a4670baf
  runnerHeight 44cf67928099d4364d2fec25627443a3
  runnerX fd3805a2c9f39bc5c408a2b656b47006
import  -/  StreetRun.Scenario 354a54748ba84a3c008f8f16b2acd94c
  Scene'Death 9194253026f1630590baed668e875f0f
  Scene'Pause 1296e9eeda51de3aaff7f8a38cbd5ca4
import  -/  StreetRun.Scene 77553ca4972702fc9ed9a930428c3b84
  exports: e5cf8e79f9eac931695eddae8a179fc0
  SceneManager 8a74b8a4c9e990537b0f35c67b38d826
  toScene d29769eae987e04902c8094df1bb527e
import  -/  StreetRun.Sfx 188ad4f30736accf16515482a6965264
  exports: 029fd02878001f540ae45828c6e7c393
  Sfx'Bird 1f1ba1728d237b5d51b72b3daf99d1d1
  Sfx'Duck eb77abe0c091145f00bdaff90b40ea21
  Sfx'Hurt 3c96acc933522ccaabee8a638f05522e
  Sfx'Jump d3f376393e045f258d4e4e5ddfe7404d
  Sfx'Lava 9d2afb631f8fa581f2d96fc1060f962a
  Sfx'Point 10fa82efc274b76820ab3985e983a1e0
  Sfx'Recover de8bbbbbcb8df0922fccd5201cf41108
  Sfx'Rock 09d3a0d7bd4375c4ec54e20275c0f938
  Sfx'Stock d1d978543e45439a3cea625161ca468a
import  -/  StreetRun.Sound_effects d6b1e92985bd34983de20a110cbdad5e
  exports: eb4fe4175b79b0dda794b44c2a2faa67
  AudioSfx 61b40e20c8ad121c087626bea3914def
  addSfxs e9af88e331891550fe436b3269b71c3e
import  -/  StreetRun.Step 290ae331db595dd4cf6d5e1e70227106
  exports: 719fef8fe6a2dea83d42318f70df48fb
  Step daa3ab940f53a2ea3c69c832d1d2d582
  Step'Change cd810651f7950f648570405c0497b830
  Step'Sustain 3fd1f4686ef7e95fd855f3c5806c6dc9
import  -/  StreetRun.Work 84c49625e5300d184b6b74d71a119d1f
  exports: be18f47a77094179ee18b27ca088c03e
  $sel:pvBackStreetScroll:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvBuildingPos:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvBuildingScroll:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvGrassPos:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvGrassScroll:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvObstacles:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvRunnerPos:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvRunnerState:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvScore:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvSeconds:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvShowRunner:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvSpeed:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvStocks:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvStreetScroll:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvUpcomingObstacles:PlayVars 454bac6bacb8c3a13959acb3712742b4
  PlayVars 12c1c425261e618b7431ebe375200883
  PlayVars 454bac6bacb8c3a13959acb3712742b4
import  -/  StreetRun.Work_func e74f2daf9d4710767ad8c2ada174399d
  exports: c79cba614ebcff5946e13d50725530aa
  HasPlayVars 9cbc89508257ef44e1f754bf3878ef7f
  playVars a16e4bec16bd99ad3c380a2d9a9d4a2c
919a88bb5e09979c382dbf47157cd340
  $sbirdY :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Inline: [2],
     Unfolding: InlineRule (0, True, False) (GHC.Types.I# 352#) -}
2b6ddcef764cdb39c92187db31f320cf
  $slavaY :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Inline: [2],
     Unfolding: InlineRule (0, True, False) (GHC.Types.I# 448#) -}
48e78e5160aaa05f4732eb11ed04aae6
  $srockY :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Inline: [2],
     Unfolding: InlineRule (0, True, False) (GHC.Types.I# 418#) -}
5e4c0a316917747b45262661f0f187ea
  $tc'C:Play :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17508976505737179464##
                   16739932661646519659##
                   StreetRun.Play.$trModule
                   StreetRun.Play.$tc'C:Play2
                   1#
                   StreetRun.Play.$tc'C:Play1) -}
849612f3700e06825835f271399bc1f8
  $tc'C:Play1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
cde36e48c29943c2a8b29399e9dffb22
  $tc'C:Play2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Play.$tc'C:Play3) -}
24204e9935dae5cc5339f924a916d5c9
  $tc'C:Play3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Play"#) -}
5426fe43d305b9e2d69ab66f83e440a6
  $tcPlay :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4479254180270356094##
                   13132134128911118149##
                   StreetRun.Play.$trModule
                   StreetRun.Play.$tcPlay2
                   0#
                   StreetRun.Play.$tcPlay1) -}
57e60d0a0a76dd6ce9be94838881928e
  $tcPlay1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6068954347f4d112e571ab56e6a8fd8a
  $tcPlay2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Play.$tcPlay3) -}
f641074f06773626bd946fb1fe8a071e
  $tcPlay3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Play"#) -}
d2f72a3f03c321528d8bb7d91f8fad95
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Play.$trModule3
                   StreetRun.Play.$trModule1) -}
91bddd5beb6828a4ba1dcbb164994292
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Play.$trModule2) -}
4ee0dba2148bc4a5295f69b2598c2322
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Play"#) -}
1e17ff2eaa09f9b156086cfc9b100a48
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Play.$trModule4) -}
41e54df5c1e466c17e20255929da132b
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
49c2f24781d2f58ccd1242e3e7d87d10
  $wdrawPlay ::
    (StreetRun.Work_func.HasPlayVars s,
     StreetRun.Common.HasCommonVars s, GHC.Base.Applicative m) =>
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a b. m a -> m b -> m b)
    -> (forall a. a -> m a)
    -> m s
    -> (StreetRun.Renderer.Renderer m, StreetRun.HUD.HUD m) => m ()
  {- Arity: 9,
     Strictness: <L,1*C1(C1(C(U)))><L,1*C1(C1(C(U)))><L,1*U(A,1*C1(U),A,A,A,A)><C(C(S)),C(C1(U))><L,C(C1(U))><L,C(U)><L,U><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,1*U,U,U,U,1*U,1*U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(U),C(U),A,A,A,A,A,A,A,A,A)><L,U(A,1*U,1*U,1*U)>,
     Inline: [2] -}
3ddabb04e79ee5a5fa1238c92ae85f47
  $wgetDead ::
    (forall a b. (a -> b) -> m a -> m b)
    -> (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> m s
    -> StreetRun.Work_func.HasPlayVars s => m GHC.Types.Bool
  {- Arity: 5,
     Strictness: <C(C(S)),1*C1(C1(U))><L,1*C1(C1(U))><L,C(U)><L,U><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (ww :: forall a b. (a -> b) -> m a -> m b)
                   (ww1 :: forall a b. m a -> (a -> m b) -> m b)
                   (ww2 :: forall a. a -> m a)
                   (ww3 :: m s)
                   (w :: StreetRun.Work_func.HasPlayVars s) ->
                 ww
                   @ StreetRun.Types.Stocks
                   @ GHC.Types.Bool
                   StreetRun.Play.getDead2
                   (let {
                      g :: s -> Data.Functor.Const.Const StreetRun.Work.PlayVars s
                      = w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Work.PlayVars)
                          (Data.Functor.Const.$fFunctorConst @ StreetRun.Work.PlayVars)
                          StreetRun.Play.getDead1
                            `cast`
                          (<StreetRun.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Work.PlayVars>_R
                                         <StreetRun.Work.PlayVars>_P))
                    } in
                    ww1
                      @ s
                      @ StreetRun.Types.Stocks
                      ww3
                      (\ (s1 :: s) ->
                       ww2
                         @ StreetRun.Types.Stocks
                         (case (g s1)
                                 `cast`
                               (Data.Functor.Const.N:Const[0]
                                    <*>_N
                                    <StreetRun.Work.PlayVars>_R
                                    <s>_P) of wild { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                          ds2 })))) -}
65676035001b67c60ed7823d6c649c03
  $wmodifyPlayVars ::
    (forall a. (s -> (a, s)) -> m a)
    -> StreetRun.Work_func.HasPlayVars s =>
       (StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars) -> m ()
  {- Arity: 3, Strictness: <C(S),1*C1(U)><L,1*C1(C1(C(U)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (ww :: forall a. (s -> (a, s)) -> m a)
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (w1 :: StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars) ->
                 let {
                   f :: s -> Data.Functor.Identity.Identity s
                   = w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                       @ Data.Functor.Identity.Identity
                       Data.Functor.Identity.$fFunctorIdentity
                       w1
                         `cast`
                       (<StreetRun.Work.PlayVars>_R
                        ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                      <StreetRun.Work.PlayVars>_R))
                 } in
                 ww
                   @ ()
                   (\ (s1 :: s) ->
                    (GHC.Tuple.(),
                     (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <s>_R)))) -}
5a7b08e8f7fd291b62f616e7410f3543
  $wtryCollision ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> m s
    -> StreetRun.Work_func.HasPlayVars s =>
       StreetRun.Step.Step StreetRun.Runner.RunnerAction
       -> m (GHC.Types.Bool,
             StreetRun.Step.Step StreetRun.Runner.RunnerAction)
  {- Arity: 5,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,1*C1(C1(C(U)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: m s)
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (w1 :: StreetRun.Step.Step StreetRun.Runner.RunnerAction) ->
                 ww
                   @ StreetRun.Work.PlayVars
                   @ (GHC.Types.Bool,
                      StreetRun.Step.Step StreetRun.Runner.RunnerAction)
                   (let {
                      w2 :: s -> Data.Functor.Const.Const StreetRun.Work.PlayVars s
                      = w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Work.PlayVars)
                          (Data.Functor.Const.$fFunctorConst @ StreetRun.Work.PlayVars)
                          StreetRun.Play.getDead1
                            `cast`
                          (<StreetRun.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Work.PlayVars>_R
                                         <StreetRun.Work.PlayVars>_P))
                    } in
                    ww
                      @ s
                      @ StreetRun.Work.PlayVars
                      ww2
                      (\ (s1 :: s) ->
                       ww1
                         @ StreetRun.Work.PlayVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Work.PlayVars>_R <s>_P)))
                   (\ (pv :: StreetRun.Work.PlayVars) ->
                    let {
                      collision :: GHC.Types.Bool
                      = case pv of wild { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                        case (StreetRun.Play.detectCollision1 ds15 ds10)
                               `cast`
                             (Data.Semigroup.Internal.N:Any[0]) of wild1 {
                          GHC.Types.False -> GHC.Types.False
                          GHC.Types.True
                          -> case ds10 of wild2 { StreetRun.Runner.RunnerState ds22 ds23 ds24 ds25 ->
                             case ds25 of wild3 {
                               GHC.Maybe.Nothing -> GHC.Types.True
                               GHC.Maybe.Just a1 -> GHC.Types.False } } } }
                    } in
                    ww1
                      @ (GHC.Types.Bool,
                         StreetRun.Step.Step StreetRun.Runner.RunnerAction)
                      (collision,
                       case collision of wild {
                         GHC.Types.False -> w1
                         GHC.Types.True
                         -> case pv of wild1 { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                            case ds10 of wild2 { StreetRun.Runner.RunnerState ds22 ds23 ds24 ds25 ->
                            case ds25 of wild3 {
                              GHC.Maybe.Nothing
                              -> case w1 of wild4 {
                                   StreetRun.Step.Step'Change da ds
                                   -> StreetRun.Step.Step'Change
                                        @ StreetRun.Runner.RunnerAction
                                        da
                                        StreetRun.Runner.RunnerAction'Hurt
                                   StreetRun.Step.Step'Sustain ds
                                   -> case ds of wild5 {
                                        DEFAULT
                                        -> StreetRun.Step.Step'Change
                                             @ StreetRun.Runner.RunnerAction
                                             wild5
                                             StreetRun.Runner.RunnerAction'Hurt
                                        StreetRun.Runner.RunnerAction'Hurt -> wild4 } }
                              GHC.Maybe.Just a1 -> w1 } } } }))) -}
4d0c7e370c8557b5a2b120ef5806e4c6
  $wupdateHiscore ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. a -> m a)
    -> m s
    -> (forall a. (s -> (a, s)) -> m a)
    -> (StreetRun.Common.HasCommonVars s,
        StreetRun.Work_func.HasPlayVars s) =>
       m ()
  {- Arity: 6,
     Strictness: <C(C(S)),C(C1(U))><L,C(U)><L,U><L,C(U)><L,C(C1(C(U)))><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. a -> m a)
                   (ww2 :: m s)
                   (ww3 :: forall a. (s -> (a, s)) -> m a)
                   (w :: StreetRun.Common.HasCommonVars s)
                   (w1 :: StreetRun.Work_func.HasPlayVars s) ->
                 ww
                   @ StreetRun.Types.Score
                   @ ()
                   (let {
                      g :: s -> Data.Functor.Const.Const StreetRun.Work.PlayVars s
                      = w1 `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Work.PlayVars)
                          (Data.Functor.Const.$fFunctorConst @ StreetRun.Work.PlayVars)
                          StreetRun.Play.getDead1
                            `cast`
                          (<StreetRun.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Work.PlayVars>_R
                                         <StreetRun.Work.PlayVars>_P))
                    } in
                    ww
                      @ s
                      @ StreetRun.Types.Score
                      ww2
                      (\ (s1 :: s) ->
                       ww1
                         @ StreetRun.Types.Score
                         (case (g s1)
                                 `cast`
                               (Data.Functor.Const.N:Const[0]
                                    <*>_N
                                    <StreetRun.Work.PlayVars>_R
                                    <s>_P) of wild { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                          ds1 })))
                   (\ (score :: StreetRun.Types.Score) ->
                    let {
                      f :: s -> Data.Functor.Identity.Identity s
                      = w `cast` (StreetRun.Common.N:HasCommonVars[0] <s>_N)
                          @ Data.Functor.Identity.Identity
                          Data.Functor.Identity.$fFunctorIdentity
                          (\ (cv :: StreetRun.Common.CommonVars) ->
                           case cv of wild { StreetRun.Common.CommonVars ds ds1 ds2 ->
                           StreetRun.Common.CommonVars
                             (GHC.Classes.$fOrdInt_$cmax
                                ds `cast` (StreetRun.Types.N:Score[0])
                                score `cast` (StreetRun.Types.N:Score[0]))
                               `cast`
                             (Sym (StreetRun.Types.N:Score[0]))
                             ds1
                             ds2 })
                            `cast`
                          (<StreetRun.Common.CommonVars>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <StreetRun.Common.CommonVars>_R))
                    } in
                    ww3
                      @ ()
                      (\ (s1 :: s) ->
                       (GHC.Tuple.(),
                        (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <s>_R))))) -}
da2b9f30cc07b2dd586b97502fc963c2
  $wupdateObstacles ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a b. m a -> m b -> m b)
    -> (forall a. a -> m a)
    -> m s
    -> (forall a. (s -> (a, s)) -> m a)
    -> (StreetRun.Work_func.HasPlayVars s,
        StreetRun.Renderer.Renderer m,
        StreetRun.Sound_effects.AudioSfx m) =>
       m ()
  {- Arity: 8,
     Strictness: <C(C(S)),C(C1(U))><L,C(C1(U))><L,C(U)><L,U><L,C(U)><L,C(C1(C(U)))><L,U(A,A,A,A,1*U,1*U,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,C(U),A)>,
     Inline: [2] -}
56ea54a3727a81e2dd0254ff89f6da9d
  $wupdateRunner ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a b. m a -> m b -> m b)
    -> (forall a. (s -> (a, s)) -> m a)
    -> (StreetRun.Work_func.HasPlayVars s,
        StreetRun.Renderer.Renderer m,
        StreetRun.Sound_effects.AudioSfx m) =>
       StreetRun.Step.Step StreetRun.Runner.RunnerAction -> m ()
  {- Arity: 7,
     Strictness: <C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,C(U)><L,C(C1(C(U)))><L,1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,A,1*C1(U),A)><L,U>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a b. m a -> m b -> m b)
                   (ww2 :: forall a. (s -> (a, s)) -> m a)
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (w1 :: StreetRun.Renderer.Renderer m)
                   (w2 :: StreetRun.Sound_effects.AudioSfx m)
                   (w3 :: StreetRun.Step.Step StreetRun.Runner.RunnerAction) ->
                 let {
                   lvl6 :: m ()
                   = StreetRun.Sound_effects.addSfxs
                       @ m
                       w2
                       (case w3 of wild {
                          StreetRun.Step.Step'Change da da'
                          -> case da' of wild1 {
                               StreetRun.Runner.RunnerAction'Move
                               -> case da of wild2 {
                                    DEFAULT -> GHC.Types.[] @ StreetRun.Sfx.Sfx
                                    StreetRun.Runner.RunnerAction'Hurt
                                    -> StreetRun.Play.updateRunner4 }
                               StreetRun.Runner.RunnerAction'Duck -> StreetRun.Play.updateRunner3
                               StreetRun.Runner.RunnerAction'Jump -> StreetRun.Play.updateRunner2
                               StreetRun.Runner.RunnerAction'Hurt
                               -> StreetRun.Play.updateRunner1 }
                          StreetRun.Step.Step'Sustain ds
                          -> GHC.Types.[] @ StreetRun.Sfx.Sfx })
                 } in
                 ww
                   @ (StreetRun.Types.Animations StreetRun.Runner.RunnerKey)
                   @ ()
                   (StreetRun.Renderer.getRunnerAnimations @ m w1)
                   (\ (runnerAnimations :: StreetRun.Types.Animations
                                             StreetRun.Runner.RunnerKey) ->
                    ww1
                      @ ()
                      @ ()
                      lvl6
                      (let {
                         f :: s -> Data.Functor.Identity.Identity s
                         = w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                             @ Data.Functor.Identity.Identity
                             Data.Functor.Identity.$fFunctorIdentity
                             (\ (pv :: StreetRun.Work.PlayVars) ->
                              case pv of wild { StreetRun.Work.PlayVars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                              let {
                                ds16 :: StreetRun.Runner.RunnerState
                                = case StreetRun.Runner_func_1.$wstepRunnerState
                                         w3
                                         ds9 of ww3 { (#,,,#) ww4 ww5 ww6 ww7 ->
                                  StreetRun.Runner.RunnerState ww4 ww5 ww6 ww7 }
                              } in
                              StreetRun.Work.PlayVars
                                ds
                                ds1
                                ds2
                                ds3
                                ds4
                                (StreetRun.Runner_func_1.showRunner ds16)
                                (StreetRun.Runner_func_1.stepRunnerPosition
                                   w3
                                   runnerAnimations
                                   ds6)
                                ds7
                                ds8
                                ds16
                                ds10
                                ds11
                                ds12
                                ds13
                                ds14
                                ds15 })
                               `cast`
                             (<StreetRun.Work.PlayVars>_R
                              ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                            <StreetRun.Work.PlayVars>_R))
                       } in
                       ww2
                         @ ()
                         (\ (s1 :: s) ->
                          (GHC.Tuple.(),
                           (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <s>_R)))))) -}
afa07c3920d058b60371d26769ace481
  $wupdateScrolling ::
    (forall a b. m a -> (a -> m b) -> m b)
    -> m (StreetRun.Types.Animations StreetRun.Scenario.BuildingKey)
    -> m (StreetRun.Types.Animations StreetRun.Scenario.GrassKey)
    -> (StreetRun.Work_func.HasPlayVars s,
        Control.Monad.State.Class.MonadState s m) =>
       m ()
  {- Arity: 5,
     Strictness: <C(C(S)),C(C1(U))><L,U><L,U><L,C(C1(C(U)))><L,U(A,A,A,C(U))>,
     Inline: [2] -}
1093724cef0431f1f45d9a60f19ec69a
  $wupdateStocks ::
    (forall a. (s -> (a, s)) -> m a)
    -> StreetRun.Work_func.HasPlayVars s => GHC.Types.Bool -> m ()
  {- Arity: 3, Strictness: <C(S),1*C1(U)><L,1*C1(C1(C(U)))><L,U>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (ww :: forall a. (s -> (a, s)) -> m a)
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (w1 :: GHC.Types.Bool) ->
                 let {
                   f :: s -> Data.Functor.Identity.Identity s
                   = w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                       @ Data.Functor.Identity.Identity
                       Data.Functor.Identity.$fFunctorIdentity
                       (\ (pv :: StreetRun.Work.PlayVars) ->
                        case pv of wild { StreetRun.Work.PlayVars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                        StreetRun.Work.PlayVars
                          ds
                          (case ds1
                                  `cast`
                                (StreetRun.Types.N:Stocks[0]) of wild1 { GHC.Types.I# x ->
                           case w1 of wild2 {
                             GHC.Types.False -> wild1 `cast` (Sym (StreetRun.Types.N:Stocks[0]))
                             GHC.Types.True
                             -> (GHC.Types.I# (GHC.Prim.-# x 1#))
                                  `cast`
                                (Sym (StreetRun.Types.N:Stocks[0])) } })
                          ds2
                          ds3
                          ds4
                          ds5
                          ds6
                          ds7
                          ds8
                          ds9
                          ds10
                          ds11
                          ds12
                          ds13
                          ds14
                          ds15 })
                         `cast`
                       (<StreetRun.Work.PlayVars>_R
                        ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                      <StreetRun.Work.PlayVars>_R))
                 } in
                 ww
                   @ ()
                   (\ (s1 :: s) ->
                    (GHC.Tuple.(),
                     (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <s>_R)))) -}
1344a38a4da89055a099f436a0851b57
  class GHC.Base.Monad m => Play (m :: * -> *) where
    playStep :: m ()
    {-# MINIMAL playStep #-}
cf71ba334a1891fda9f55c7a3d84b964
  detectCollision ::
    [StreetRun.Hurdle.ObstacleState]
    -> StreetRun.Runner.RunnerState -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><L,1*U(A,1*U,A,A)>,
     Unfolding: InlineRule (0, True, True)
                StreetRun.Play.detectCollision1
                  `cast`
                (<[StreetRun.Hurdle.ObstacleState]>_R
                 ->_R <StreetRun.Runner.RunnerState>_R
                 ->_R Data.Semigroup.Internal.N:Any[0]) -}
3401ef8b3304159bc04e921fcb8f4fa3
  detectCollision1 ::
    [StreetRun.Hurdle.ObstacleState]
    -> StreetRun.Runner.RunnerState -> Data.Semigroup.Internal.Any
  {- Arity: 2, Strictness: <S,1*U><L,1*U(A,1*U,A,A)>,
     Unfolding: (\ (obstacles :: [StreetRun.Hurdle.ObstacleState])
                   (runnerState :: StreetRun.Runner.RunnerState) ->
                 let {
                   y :: GHC.Types.Float
                   = case runnerState of wild { StreetRun.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds2 of wild1 {
                       GHC.Maybe.Nothing -> StreetRun.Runner_func_2.runnerAabb_$srunnerY
                       GHC.Maybe.Just ds
                       -> case ds
                                 `cast`
                               (StreetRun.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          GHC.Types.F#
                            (GHC.Prim.plusFloat#
                               (GHC.Prim.timesFloat#
                                  (GHC.Prim.sinFloat# (GHC.Prim.timesFloat# x 3.1415927#))
                                  -224.0#)
                               408.0#) } } }
                 } in
                 let {
                   lvl6 :: Linear.V2.V2 GHC.Types.Float
                   = case y of wild { GHC.Types.F# x ->
                     Linear.V2.V2
                       @ GHC.Types.Float
                       StreetRun.Runner_func_2.runnerAabb1
                       (GHC.Types.F# (GHC.Prim.plusFloat# x 48.0#)) }
                 } in
                 letrec {
                   go :: [StreetRun.Hurdle.ObstacleState]
                         -> Data.Semigroup.Internal.Any
                     <join 1> {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [StreetRun.Hurdle.ObstacleState]) ->
                     case ds of wild {
                       []
                       -> GHC.Types.False `cast` (Sym (Data.Semigroup.Internal.N:Any[0]))
                       : y1 ys
                       -> case y of dt { GHC.Types.F# ipv ->
                          case lvl6 of ww10 { Linear.V2.V2 ww11 ww12 ->
                          case ww11 of ww13 { GHC.Types.F# ww14 ->
                          case ww12 of ww15 { GHC.Types.F# ww16 ->
                          case y1 of ww { StreetRun.Hurdle.ObstacleState ww1 ww2 ->
                          case StreetRun.Hurdle.$wobstacleAabb
                                 ww1
                                 ww2 of ww3 { (#,#) ww4 ww5 ->
                          case ww4 of ww20 { Linear.V2.V2 ww21 ww22 ->
                          case ww21 of ww23 { GHC.Types.F# ww24 ->
                          case ww22 of ww25 { GHC.Types.F# ww26 ->
                          case ww5 of ww27 { Linear.V2.V2 ww28 ww29 ->
                          case ww28 of ww30 { GHC.Types.F# ww31 ->
                          case ww29 of ww32 { GHC.Types.F# ww33 ->
                          case GHC.Prim.geFloat# ww14 ww24 of lwild {
                            DEFAULT -> go ys
                            1#
                            -> case GHC.Prim.leFloat# 204.0# ww31 of lwild1 {
                                 DEFAULT -> go ys
                                 1#
                                 -> case GHC.Prim.geFloat# ww16 ww26 of lwild2 {
                                      DEFAULT -> go ys
                                      1#
                                      -> case GHC.Prim.leFloat# ipv ww33 of lwild4 {
                                           DEFAULT -> go ys
                                           1#
                                           -> GHC.Types.True
                                                `cast`
                                              (Sym (Data.Semigroup.Internal.N:Any[0])) } } } } } } } } } } } } } } } } }
                 } in
                 go obstacles) -}
cd1d3b3677de0ad844f851a580023c7f
  drawObstacles ::
    StreetRun.Renderer.Renderer m =>
    StreetRun.Quake.Quake -> [StreetRun.Hurdle.ObstacleState] -> m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),U(1*U(A,C(C1(U)),C(C1(U)),1*C1(U),A),A,A,A,1*U,1*U,1*U,A,A,A,C(C1(U)),C(C1(U)),C(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U><L,U> -}
2d161bb4ba69e327c7b99d0e8e3033b6
  drawPlay ::
    (StreetRun.Work_func.HasPlayVars s,
     StreetRun.Common.HasCommonVars s,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Renderer.Renderer m, StreetRun.Picture.CameraControl m,
     StreetRun.HUD.HUD m) =>
    m ()
  {- Arity: 6,
     Strictness: <L,1*C1(C1(C(U)))><L,1*C1(C1(C(U)))><S(S(LC(C(S))LLL)LLL),1*U(1*U(1*U(A,1*C1(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,A)><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,U,U,U,U,U,U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(U),C(U),A,A,A,A,A,A,A,A,A)><L,A><L,U(A,U,U,U)>,
     Inline: [2],
     Unfolding: InlineRule (6, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (w1 :: StreetRun.Common.HasCommonVars s)
                   (w2 :: Control.Monad.State.Class.MonadState s m)
                   (w3 :: StreetRun.Renderer.Renderer m)
                   (w4 :: StreetRun.Picture.CameraControl m)
                   (w5 :: StreetRun.HUD.HUD m) ->
                 case w2 of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Play.$wdrawPlay
                   @ s
                   @ m
                   w
                   w1
                   ww6
                   ww7
                   ww8
                   ww9
                   ww2
                   w3
                   w5 } }) -}
7a6f6e10f5d976e96cc321e48291099b
  getDead ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s) =>
    m GHC.Types.Bool
  {- Arity: 2,
     Strictness: <S(S(S(S(C(C(S))L)LLLLL)LLLL)LLL),1*U(1*U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s) ->
                 case w of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 case ww6 of ww11 { GHC.Base.C:Applicative ww12 ww13 ww14 ww15 ww16 ww17 ->
                 case ww12 of ww18 { GHC.Base.C:Functor ww19 ww20 ->
                 StreetRun.Play.$wgetDead @ s @ m ww19 ww7 ww9 ww2 w1 } } } }) -}
2174dce25dfc370c3088acd66d0c59b4
  getDead1 :: StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Work.PlayVars) -> v) -}
38d55866ac2ba6a7b5bd9a4d609fb3db
  getDead2 :: StreetRun.Types.Stocks -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.Types.Stocks) ->
                 case ds
                        `cast`
                      (StreetRun.Types.N:Stocks[0]) of wild { GHC.Types.I# x ->
                 GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.<=# x 0#) }) -}
7212d1f75fb00121324a8daebf64fa50
  modifyPlayVars ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s) =>
    (StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars) -> m ()
  {- Arity: 3,
     Strictness: <S(LLLC(S)),1*U(A,A,A,1*C1(U))><L,1*C1(C1(C(U)))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s)
                   (w2 :: StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars) ->
                 case w of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 StreetRun.Play.$wmodifyPlayVars @ s @ m ww4 w1 w2 }) -}
bfe2a4e8ce1ff3585caa7209fbb5a9c4
  playStep' ::
    (StreetRun.Work_func.HasPlayVars s,
     StreetRun.Common.HasCommonVars s,
     Control.Monad.State.Class.MonadState s m, StreetRun.CFL.Logger m,
     StreetRun.Picture.CameraControl m, StreetRun.CFL.Clock m,
     StreetRun.Renderer.Renderer m, StreetRun.Audio.Audio m,
     StreetRun.Sound_effects.AudioSfx m, StreetRun.Load.HasInput m,
     StreetRun.Scene.SceneManager m, StreetRun.HUD.HUD m) =>
    m ()
  {- Arity: 12,
     Strictness: <L,C(C1(C(U)))><L,C(C1(C(U)))><S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),C(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,A><L,A><L,A><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,U,U,U,U,U,U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(U),C(U),A,A,A,A,A,A,A,A,A)><L,A><L,U(A,A,C(U),A)><L,U(A,A,A,U)><L,U(A,C(U))><L,U(A,U,U,U)>,
     Unfolding: (\ @ s
                   @ m :: * -> *
                   ($dHasPlayVars :: StreetRun.Work_func.HasPlayVars s)
                   ($dHasCommonVars :: StreetRun.Common.HasCommonVars s)
                   ($dMonadState :: Control.Monad.State.Class.MonadState s m)
                   ($dLogger :: StreetRun.CFL.Logger m)
                   ($dCameraControl :: StreetRun.Picture.CameraControl m)
                   ($dClock :: StreetRun.CFL.Clock m)
                   ($dRenderer :: StreetRun.Renderer.Renderer m)
                   ($dAudio :: StreetRun.Audio.Audio m)
                   ($dAudioSfx :: StreetRun.Sound_effects.AudioSfx m)
                   ($dHasInput :: StreetRun.Load.HasInput m)
                   ($dSceneManager :: StreetRun.Scene.SceneManager m)
                   ($dHUD :: StreetRun.HUD.HUD m) ->
                 case Control.Monad.State.Class.$p1MonadState
                        @ s
                        @ m
                        $dMonadState of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 let {
                   lvl6 :: m ()
                   = StreetRun.Scene.toScene
                       @ m
                       $dSceneManager
                       StreetRun.Scenario.Scene'Pause
                 } in
                 let {
                   lvl7 :: m ()
                   = ww3
                       @ ()
                       @ ()
                       (StreetRun.Play.updatePlay
                          @ s
                          @ m
                          $dHasPlayVars
                          $dHasCommonVars
                          $dMonadState
                          $dLogger
                          $dClock
                          $dCameraControl
                          $dRenderer
                          $dHasInput
                          $dAudioSfx
                          $dSceneManager)
                       (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                        case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                        StreetRun.Play.$wdrawPlay
                          @ s
                          @ m
                          $dHasPlayVars
                          $dHasCommonVars
                          ww12
                          ww13
                          ww14
                          ww15
                          ww8
                          $dRenderer
                          $dHUD } })
                 } in
                 let {
                   lvl8 :: m () = GHC.Base.pure @ m ww1 @ () GHC.Tuple.()
                 } in
                 ww2
                   @ StreetRun.Input.Input
                   @ ()
                   (StreetRun.Load.getInput @ m $dHasInput)
                   (\ (input :: StreetRun.Input.Input) ->
                    ww3
                      @ ()
                      @ ()
                      (case input of wild { StreetRun.Input.Input ds1 ds2 ds3 ds4 ds5 ->
                       case ds1 of wild1 { KeyState.KeyState ds7 ds8 ->
                       case ds7 of wild2 {
                         DEFAULT -> lvl8 KeyState.KeyStatus'Pressed -> lvl6 } } })
                      lvl7) }) -}
e2ff9d30ed403e9f1e755e4cde92db00
  tryCollision ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s) =>
    StreetRun.Step.Step StreetRun.Runner.RunnerAction
    -> m (GHC.Types.Bool,
          StreetRun.Step.Step StreetRun.Runner.RunnerAction)
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLL),1*U(1*U(A,C(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s)
                   (w2 :: StreetRun.Step.Step StreetRun.Runner.RunnerAction) ->
                 case w of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Play.$wtryCollision @ s @ m ww7 ww9 ww2 w1 w2 } }) -}
61c56554769089189a1a2f5ba9187994
  updateHiscore ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Common.HasCommonVars s,
     StreetRun.Work_func.HasPlayVars s) =>
    m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLL),1*U(1*U(A,C(C1(U)),A,C(U),A),U,A,C(U))><L,C(C1(C(U)))><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Common.HasCommonVars s)
                   (w2 :: StreetRun.Work_func.HasPlayVars s) ->
                 case w of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Play.$wupdateHiscore
                   @ s
                   @ m
                   ww7
                   ww9
                   ww2
                   ww4
                   w1
                   w2 } }) -}
1ed21df83c071ac8e7fcca0e17ea0a96
  updateObstacles ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s, StreetRun.Renderer.Renderer m,
     StreetRun.Sound_effects.AudioSfx m) =>
    m ()
  {- Arity: 4,
     Strictness: <S(S(LC(C(S))LLL)LLL),1*U(1*U(A,C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,C(C1(C(U)))><L,U(A,A,A,A,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,U(A,A,C(U),A)>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s)
                   (w2 :: StreetRun.Renderer.Renderer m)
                   (w3 :: StreetRun.Sound_effects.AudioSfx m) ->
                 case w of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Play.$wupdateObstacles
                   @ s
                   @ m
                   ww7
                   ww8
                   ww9
                   ww2
                   ww4
                   w1
                   w2
                   w3 } }) -}
677de2f732010c1409968ecd557cc89c
  updatePlay ::
    (StreetRun.Work_func.HasPlayVars s,
     StreetRun.Common.HasCommonVars s,
     Control.Monad.State.Class.MonadState s m, StreetRun.CFL.Logger m,
     StreetRun.CFL.Clock m, StreetRun.Picture.CameraControl m,
     StreetRun.Renderer.Renderer m, StreetRun.Load.HasInput m,
     StreetRun.Sound_effects.AudioSfx m,
     StreetRun.Scene.SceneManager m) =>
    m ()
  {- Arity: 10,
     Strictness: <L,C(C1(C(U)))><L,C(C1(C(U)))><S(S(LC(C(S))LLL)LLL),U(U(U(U(C(C1(U)),A),1*C1(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,A><L,A><L,A><L,U(1*U(A,C(C1(U)),A,A,A),A,A,U,U,U,U,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,A,A,1*U)><L,U(A,A,C(U),A)><L,1*U(A,1*C1(U))> -}
0e67f578ca33ce26d617bbeb801f4d7e
  updateRunner ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s, StreetRun.Renderer.Renderer m,
     StreetRun.Sound_effects.AudioSfx m) =>
    StreetRun.Step.Step StreetRun.Runner.RunnerAction -> m ()
  {- Arity: 5,
     Strictness: <S(S(LC(C(S))LLL)LLL),1*U(1*U(A,1*C1(C1(U)),C(C1(U)),A,A),A,A,C(U))><L,C(C1(C(U)))><L,1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,1*U(A,A,1*C1(U),A)><L,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s)
                   (w2 :: StreetRun.Renderer.Renderer m)
                   (w3 :: StreetRun.Sound_effects.AudioSfx m)
                   (w4 :: StreetRun.Step.Step StreetRun.Runner.RunnerAction) ->
                 case w of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Play.$wupdateRunner
                   @ s
                   @ m
                   ww7
                   ww8
                   ww4
                   w1
                   w2
                   w3
                   w4 } }) -}
1f87d90d40e23160c4f6b77ac9cd8e6a
  updateRunner1 :: [StreetRun.Sfx.Sfx]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ StreetRun.Sfx.Sfx
                   StreetRun.Sfx.Sfx'Hurt
                   (GHC.Types.[] @ StreetRun.Sfx.Sfx)) -}
f721858de40b8c69a562f75cea81a661
  updateRunner2 :: [StreetRun.Sfx.Sfx]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ StreetRun.Sfx.Sfx
                   StreetRun.Sfx.Sfx'Jump
                   (GHC.Types.[] @ StreetRun.Sfx.Sfx)) -}
4af415028fb0898cf10e9e6291e86840
  updateRunner3 :: [StreetRun.Sfx.Sfx]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ StreetRun.Sfx.Sfx
                   StreetRun.Sfx.Sfx'Duck
                   (GHC.Types.[] @ StreetRun.Sfx.Sfx)) -}
8f33636e3c01ba03c0af6c1e09f8170c
  updateRunner4 :: [StreetRun.Sfx.Sfx]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ StreetRun.Sfx.Sfx
                   StreetRun.Sfx.Sfx'Recover
                   (GHC.Types.[] @ StreetRun.Sfx.Sfx)) -}
33558ffbe3055c1e7cdbe3a5d9013cce
  updateScrolling ::
    (StreetRun.Renderer.Renderer m, StreetRun.Work_func.HasPlayVars s,
     Control.Monad.State.Class.MonadState s m) =>
    m ()
  {- Arity: 3,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(A,C(C1(U)),A,A,A),A,A,A,A,A,A,U,U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)><L,C(C1(C(U)))><L,U(A,A,A,C(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: StreetRun.Renderer.Renderer m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s)
                   (w2 :: Control.Monad.State.Class.MonadState s m) ->
                 case w of ww { StreetRun.Renderer.C:Renderer ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 case ww1 of ww27 { GHC.Base.C:Monad ww28 ww29 ww30 ww31 ww32 ->
                 StreetRun.Play.$wupdateScrolling @ m @ s ww29 ww8 ww9 w1 w2 } }) -}
901392d1485515e287b01778fa3af992
  updateSeconds ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s) =>
    m ()
  {- Arity: 2,
     Strictness: <S(LLLC(S)),1*U(A,A,A,1*C1(U))><L,1*C1(C1(C(U)))>,
     Unfolding: InlineRule (2, True, False)
                (\ @ s
                   @ m :: * -> *
                   ($dMonadState :: Control.Monad.State.Class.MonadState s m)
                   ($dHasPlayVars :: StreetRun.Work_func.HasPlayVars s) ->
                 StreetRun.Play.modifyPlayVars
                   @ s
                   @ m
                   $dMonadState
                   $dHasPlayVars
                   StreetRun.Play.updateSeconds1) -}
64e7407eb1daee401b0d0aa25ab32136
  updateSeconds1 ::
    StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,1*U(U),U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (pv :: StreetRun.Work.PlayVars) ->
                 case pv of wild { StreetRun.Work.PlayVars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                 StreetRun.Work.PlayVars
                   ds
                   ds1
                   ds2
                   (case ds3
                           `cast`
                         (StreetRun.Types.N:Seconds[0]) of wild1 { GHC.Types.F# x ->
                    (GHC.Types.F# (GHC.Prim.plusFloat# x 1.6667e-2#))
                      `cast`
                    (Sym (StreetRun.Types.N:Seconds[0])) })
                   ds4
                   ds5
                   ds6
                   ds7
                   ds8
                   ds9
                   ds10
                   ds11
                   ds12
                   ds13
                   ds14
                   ds15 }) -}
2dab6437b7d4abd83fc8b59987fdf03a
  updateSpeed ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s) =>
    StreetRun.Step.Step StreetRun.Runner.RunnerAction -> m ()
  {- Arity: 3,
     Strictness: <S(LLLC(S)),1*U(A,A,A,1*C1(U))><L,1*C1(C1(C(U)))><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   ($dMonadState :: Control.Monad.State.Class.MonadState s m)
                   ($dHasPlayVars :: StreetRun.Work_func.HasPlayVars s)
                   (da :: StreetRun.Step.Step StreetRun.Runner.RunnerAction) ->
                 StreetRun.Play.modifyPlayVars
                   @ s
                   @ m
                   $dMonadState
                   $dHasPlayVars
                   (\ (pv :: StreetRun.Work.PlayVars) ->
                    case pv of wild { StreetRun.Work.PlayVars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                    StreetRun.Work.PlayVars
                      ds
                      ds1
                      (StreetRun.Runner_func_1.stepSpeed da ds2)
                      ds3
                      ds4
                      ds5
                      ds6
                      ds7
                      ds8
                      ds9
                      ds10
                      ds11
                      ds12
                      ds13
                      ds14
                      ds15 })) -}
2a03c070df0514ab54a2d16855f6ae90
  updateStocks ::
    (Control.Monad.State.Class.MonadState s m,
     StreetRun.Work_func.HasPlayVars s) =>
    GHC.Types.Bool -> m ()
  {- Arity: 3,
     Strictness: <S(LLLC(S)),1*U(A,A,A,1*C1(U))><L,1*C1(C1(C(U)))><L,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Work_func.HasPlayVars s)
                   (w2 :: GHC.Types.Bool) ->
                 case w of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 StreetRun.Play.$wupdateStocks @ s @ m ww4 w1 w2 }) -}
"SPEC/StreetRun.Play birdY @ Int" [orphan] [2] forall (w :: GHC.Num.Num
                                                              GHC.Types.Int)
  StreetRun.Hurdle.birdY @ GHC.Types.Int w = StreetRun.Play.$sbirdY
"SPEC/StreetRun.Play lavaY @ Int" [orphan] [2] forall (w :: GHC.Num.Num
                                                              GHC.Types.Int)
  StreetRun.Hurdle.lavaY @ GHC.Types.Int w = StreetRun.Play.$slavaY
"SPEC/StreetRun.Play rockY @ Int" [orphan] [2] forall (w :: GHC.Num.Num
                                                              GHC.Types.Int)
  StreetRun.Hurdle.rockY @ GHC.Types.Int w = StreetRun.Play.$srockY
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

