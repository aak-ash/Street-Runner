
==================== FINAL INTERFACE ====================
2019-04-26 14:29:02.675208867 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Quake 8064
  interface hash: 46e0f44435d8c4dc33e6670ed72a44ac
  ABI hash: b6a124c4030dd8107fa49ff2cc71f4ef
  export-list hash: 1b20d2e9b9ea83d46fe981dd6ab66f9e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Quake.applyQuake
  StreetRun.Quake.quakeAdjust
  StreetRun.Quake.startQuake
  StreetRun.Quake.stepQuake
  StreetRun.Quake.Quake{StreetRun.Quake.Quake'Dormant StreetRun.Quake.Quake'Progress}
module dependencies: StreetRun.CFL StreetRun.Step StreetRun.Types
package dependencies: aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0
                      attoparsec-0.13.2.2 base-4.12.0.0 base-compat-0.10.5 binary-0.8.6.0
                      bytestring-0.10.8.2 conduit-1.3.1.1 containers-0.6.0.1
                      deepseq-1.4.4.0 dlist-0.8.0.6 exceptions-0.10.1 ghc-boot-th-8.6.4
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 libyaml-0.1.1.0 mtl-2.2.2
                      primitive-0.6.4.0 random-1.1 resourcet-1.2.2 scientific-0.3.6.2
                      stm-2.5.0.0 tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      time-1.8.0.2 time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      unliftio-core-0.1.2.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.2 yaml-0.11.0.0
orphans: stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.2.0:Data.Aeson.Types.Internal
                         animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Float ccb68fbeaab348f60d11c8132d51af5d
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  StreetRun.CFL 22aaa7e917fe6023bc75b650c540e607
  exports: f389828e267831208731f8c3eb015474
  frameDeltaSeconds 9605a9c4d4e8e9e818a55364604b43d7
import  -/  StreetRun.Step 290ae331db595dd4cf6d5e1e70227106
  exports: 719fef8fe6a2dea83d42318f70df48fb
  Step daa3ab940f53a2ea3c69c832d1d2d582
  Step'Change cd810651f7950f648570405c0497b830
  Step'Sustain 3fd1f4686ef7e95fd855f3c5806c6dc9
import  -/  StreetRun.Types fe57a12901e3ac69e610bc5ec1ffe588
  exports: 68eec0a854069d6ebcc9ba499b980fc6
  Percent ba7abb7eeed8b328d8b72349c7c4fef0
  Seconds a9822968438ab4a0fccda00b12150109
1a9c7230fc5b6045929623cb4b581a74
  $fEqQuake :: GHC.Classes.Eq StreetRun.Quake.Quake
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Quake.Quake
                  StreetRun.Quake.$fEqQuake_$c==
                  StreetRun.Quake.$fEqQuake_$c/= -}
1a9c7230fc5b6045929623cb4b581a74
  $fEqQuake_$c/= ::
    StreetRun.Quake.Quake -> StreetRun.Quake.Quake -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: StreetRun.Quake.Quake) (y :: StreetRun.Quake.Quake) ->
                 case x of wild {
                   StreetRun.Quake.Quake'Progress a1
                   -> case y of wild1 {
                        StreetRun.Quake.Quake'Progress b1
                        -> case GHC.Classes.eqFloat
                                  a1 `cast` (StreetRun.Types.N:Percent[0])
                                  b1 `cast` (StreetRun.Types.N:Percent[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False }
                        StreetRun.Quake.Quake'Dormant ipv -> GHC.Types.True }
                   StreetRun.Quake.Quake'Dormant a1
                   -> case y of wild1 {
                        StreetRun.Quake.Quake'Progress ipv -> GHC.Types.True
                        StreetRun.Quake.Quake'Dormant b1
                        -> case GHC.Classes.eqFloat
                                  a1 `cast` (StreetRun.Types.N:Seconds[0])
                                  b1 `cast` (StreetRun.Types.N:Seconds[0]) of wild2 {
                             GHC.Types.False -> GHC.Types.True
                             GHC.Types.True -> GHC.Types.False } } }) -}
1a9c7230fc5b6045929623cb4b581a74
  $fEqQuake_$c== ::
    StreetRun.Quake.Quake -> StreetRun.Quake.Quake -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: StreetRun.Quake.Quake)
                   (ds1 :: StreetRun.Quake.Quake) ->
                 case ds of wild {
                   StreetRun.Quake.Quake'Progress a1
                   -> case ds1 of wild1 {
                        StreetRun.Quake.Quake'Progress b1
                        -> GHC.Classes.eqFloat
                             a1 `cast` (StreetRun.Types.N:Percent[0])
                             b1 `cast` (StreetRun.Types.N:Percent[0])
                        StreetRun.Quake.Quake'Dormant ipv -> GHC.Types.False }
                   StreetRun.Quake.Quake'Dormant a1
                   -> case ds1 of wild1 {
                        StreetRun.Quake.Quake'Progress ipv -> GHC.Types.False
                        StreetRun.Quake.Quake'Dormant b1
                        -> GHC.Classes.eqFloat
                             a1 `cast` (StreetRun.Types.N:Seconds[0])
                             b1 `cast` (StreetRun.Types.N:Seconds[0]) } }) -}
1a9c7230fc5b6045929623cb4b581a74
  $fShowQuake :: GHC.Show.Show StreetRun.Quake.Quake
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Quake.Quake
                  StreetRun.Quake.$fShowQuake_$cshowsPrec
                  StreetRun.Quake.$fShowQuake_$cshow
                  StreetRun.Quake.$fShowQuake_$cshowList -}
1a9c7230fc5b6045929623cb4b581a74
  $fShowQuake1 :: StreetRun.Quake.Quake -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (w :: StreetRun.Quake.Quake) ->
                 StreetRun.Quake.$w$cshowsPrec 0# w) -}
d05eda1c33e93356e6d89bcb505083ca
  $fShowQuake2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Quake.$fShowQuake3) -}
91d632e0f1854976c349b47cb41d09c8
  $fShowQuake3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quake'Dormant "#) -}
2dd4efdb4f43fa75e2e4f04f7a299ac1
  $fShowQuake4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Quake.$fShowQuake5) -}
d01dc1b9662842ed8ebff7bc84312fec
  $fShowQuake5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quake'Progress "#) -}
414260cbe3770d3ce45597fec07d9119
  $fShowQuake6 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)2
                   (GHC.Types.[] @ GHC.Types.Char)) -}
1a9c7230fc5b6045929623cb4b581a74
  $fShowQuake_$cshow :: StreetRun.Quake.Quake -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x :: StreetRun.Quake.Quake) ->
                 case x of wild {
                   StreetRun.Quake.Quake'Progress b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        StreetRun.Quake.$fShowQuake4
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.Base.++
                              @ GHC.Types.Char
                              StreetRun.Types.$fShowPercent2
                              (case b1
                                      `cast`
                                    (StreetRun.Types.N:Percent[0]) of ww1 { GHC.Types.F# ww2 ->
                               GHC.Float.$w$sshowSignedFloat1
                                 GHC.Float.$fShowFloat2
                                 StreetRun.Types.$fShowDistance4
                                 ww2
                                 StreetRun.Quake.$fShowQuake6 })))
                   StreetRun.Quake.Quake'Dormant b1
                   -> GHC.Base.++
                        @ GHC.Types.Char
                        StreetRun.Quake.$fShowQuake2
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)4
                           (GHC.Base.++
                              @ GHC.Types.Char
                              StreetRun.Types.$fShowSeconds2
                              (case b1
                                      `cast`
                                    (StreetRun.Types.N:Seconds[0]) of ww1 { GHC.Types.F# ww2 ->
                               GHC.Float.$w$sshowSignedFloat1
                                 GHC.Float.$fShowFloat2
                                 StreetRun.Types.$fShowDistance4
                                 ww2
                                 StreetRun.Quake.$fShowQuake6 }))) }) -}
1a9c7230fc5b6045929623cb4b581a74
  $fShowQuake_$cshowList :: [StreetRun.Quake.Quake] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Quake.Quake]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Quake.Quake
                   StreetRun.Quake.$fShowQuake1
                   ls
                   s) -}
1a9c7230fc5b6045929623cb4b581a74
  $fShowQuake_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Quake.Quake -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><S,1*U>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: StreetRun.Quake.Quake) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Quake.$w$cshowsPrec ww1 w1 }) -}
f6f2fd418e5c527fae03b7407a8600a9
  $tc'Quake'Dormant :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13979586251627315356##
                   5470180459871649479##
                   StreetRun.Quake.$trModule
                   StreetRun.Quake.$tc'Quake'Dormant2
                   0#
                   StreetRun.Quake.$tc'Quake'Dormant1) -}
48f0abc782897ae8a59ac3840f4b1336
  $tc'Quake'Dormant1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d78cebd2b563f77a0406e216b684a7cc
  $tc'Quake'Dormant2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Quake.$tc'Quake'Dormant3) -}
90dc2e49d9181826a641cf9642ce0afe
  $tc'Quake'Dormant3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quake'Dormant"#) -}
4742423e902504650cbc9d8c4cb64314
  $tc'Quake'Progress :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5506660301336421872##
                   10366597590685379604##
                   StreetRun.Quake.$trModule
                   StreetRun.Quake.$tc'Quake'Progress2
                   0#
                   StreetRun.Quake.$tc'Quake'Progress1) -}
0762c33dfae34a7b2d9a3ab4c5f09366
  $tc'Quake'Progress1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a9fbc3acfea452b3023368b67284185e
  $tc'Quake'Progress2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Quake.$tc'Quake'Progress3) -}
29a019ff60f009372cbd4afccfb058b0
  $tc'Quake'Progress3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Quake'Progress"#) -}
eca0d55e94dff96c4ee6889300819f15
  $tcQuake :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15536885310880748013##
                   11924106605846539131##
                   StreetRun.Quake.$trModule
                   StreetRun.Quake.$tcQuake1
                   0#
                   GHC.Types.krep$*) -}
a3d9fda787379107d67edbec4219a804
  $tcQuake1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Quake.$tcQuake2) -}
3c1b9f11a4e9c9e4f377823bcc4e84c7
  $tcQuake2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Quake"#) -}
79bf5d61f7faa12dff863f779356a9f4
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Quake.$trModule3
                   StreetRun.Quake.$trModule1) -}
fd3946e3577b9f51db679b35092516f7
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Quake.$trModule2) -}
919855cee8656c2166fc12bb862ab977
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Quake"#) -}
ad1421fb1392de5e2dc8065a740e4a38
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Quake.$trModule4) -}
f8f9b6d8e315667556ea09856d707414
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
1a9c7230fc5b6045929623cb4b581a74
  $w$cshowsPrec ::
    GHC.Prim.Int# -> StreetRun.Quake.Quake -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (w :: StreetRun.Quake.Quake) ->
                 case w of wild {
                   StreetRun.Quake.Quake'Progress b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = StreetRun.Types.$w$cshowsPrec1 11# b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char StreetRun.Quake.$fShowQuake4 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                StreetRun.Quake.$fShowQuake4
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }
                   StreetRun.Quake.Quake'Dormant b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = StreetRun.Types.$w$cshowsPrec3 11# b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char StreetRun.Quake.$fShowQuake2 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                StreetRun.Quake.$fShowQuake2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
1a9c7230fc5b6045929623cb4b581a74
  data Quake
    = Quake'Progress StreetRun.Types.Percent
    | Quake'Dormant StreetRun.Types.Seconds
783eb91b6f759b985e1ba0f7ec57d9d6
  applyQuake ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Quake.Quake
    -> (GHC.Types.Int, GHC.Types.Int)
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 4,
     Strictness: <L,U(U)><L,U(U)><L,1*U><S,1*U(1*U(U),1*U(U))>m,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: StreetRun.Quake.Quake)
                   (w3 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w3 of ww { (,) ww1 ww2 ->
                 let {
                   ds :: (GHC.Types.Int, GHC.Types.Int)
                   = case w2 of wild {
                       StreetRun.Quake.Quake'Progress p
                       -> (case p `cast`
                                (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                           case w of wild2 { GHC.Types.I# i ->
                           case w1 of wild3 { GHC.Types.I# i1 ->
                           case GHC.Float.$w$cproperFraction1
                                  @ GHC.Types.Int
                                  GHC.Real.$fIntegralInt
                                  (GHC.Prim.timesFloat#
                                     (GHC.Prim.cosFloat#
                                        (GHC.Prim.timesFloat#
                                           (GHC.Prim.timesFloat#
                                              (GHC.Prim.timesFloat# x 4.0#)
                                              3.1415927#)
                                           (GHC.Prim.double2Float# (GHC.Prim.int2Double# i))))
                                     (GHC.Prim.double2Float#
                                        (GHC.Prim.int2Double# i1))) of ww3 { (#,#) ww4 ww5 ->
                           ww4 } } } },
                           case p `cast`
                                (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                           case w of wild2 { GHC.Types.I# i ->
                           case w1 of wild3 { GHC.Types.I# i1 ->
                           case GHC.Float.$w$cproperFraction1
                                  @ GHC.Types.Int
                                  GHC.Real.$fIntegralInt
                                  (GHC.Prim.timesFloat#
                                     (GHC.Prim.sinFloat#
                                        (GHC.Prim.timesFloat#
                                           (GHC.Prim.timesFloat#
                                              (GHC.Prim.plusFloat# x x)
                                              3.1415927#)
                                           (GHC.Prim.double2Float# (GHC.Prim.int2Double# i))))
                                     (GHC.Prim.double2Float#
                                        (GHC.Prim.int2Double# i1))) of ww3 { (#,#) ww4 ww5 ->
                           ww4 } } } })
                       StreetRun.Quake.Quake'Dormant ipv
                       -> (StreetRun.Quake.applyQuake1, StreetRun.Quake.applyQuake1) }
                 } in
                 (case ww1 of wild { GHC.Types.I# x ->
                  case ds of wild1 { (,) x' y' ->
                  case x' of wild2 { GHC.Types.I# y ->
                  GHC.Types.I# (GHC.Prim.+# x y) } } },
                  case ww2 of wild { GHC.Types.I# x ->
                  case ds of wild1 { (,) x' y' ->
                  case y' of wild2 { GHC.Types.I# y ->
                  GHC.Types.I# (GHC.Prim.+# x y) } } }) }) -}
cfc6f1542e605fd5f9e1ee084cc03b5c
  applyQuake1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
befce6a55c0187df888e8eb2f49f30a5
  quakeAdjust ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Quake.Quake
    -> (GHC.Types.Int, GHC.Types.Int)
  {- Arity: 3, Strictness: <L,U(U)><L,U(U)><S,1*U>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: GHC.Types.Int)
                   (w2 :: StreetRun.Quake.Quake) ->
                 case w2 of wild {
                   StreetRun.Quake.Quake'Progress p
                   -> (case p `cast`
                            (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                       case w of wild2 { GHC.Types.I# i ->
                       case w1 of wild3 { GHC.Types.I# i1 ->
                       case GHC.Float.$w$cproperFraction1
                              @ GHC.Types.Int
                              GHC.Real.$fIntegralInt
                              (GHC.Prim.timesFloat#
                                 (GHC.Prim.cosFloat#
                                    (GHC.Prim.timesFloat#
                                       (GHC.Prim.timesFloat#
                                          (GHC.Prim.timesFloat# x 4.0#)
                                          3.1415927#)
                                       (GHC.Prim.double2Float# (GHC.Prim.int2Double# i))))
                                 (GHC.Prim.double2Float#
                                    (GHC.Prim.int2Double# i1))) of ww2 { (#,#) ww3 ww4 ->
                       ww3 } } } },
                       case p `cast`
                            (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                       case w of wild2 { GHC.Types.I# i ->
                       case w1 of wild3 { GHC.Types.I# i1 ->
                       case GHC.Float.$w$cproperFraction1
                              @ GHC.Types.Int
                              GHC.Real.$fIntegralInt
                              (GHC.Prim.timesFloat#
                                 (GHC.Prim.sinFloat#
                                    (GHC.Prim.timesFloat#
                                       (GHC.Prim.timesFloat# (GHC.Prim.plusFloat# x x) 3.1415927#)
                                       (GHC.Prim.double2Float# (GHC.Prim.int2Double# i))))
                                 (GHC.Prim.double2Float#
                                    (GHC.Prim.int2Double# i1))) of ww2 { (#,#) ww3 ww4 ->
                       ww3 } } } })
                   StreetRun.Quake.Quake'Dormant ipv
                   -> (StreetRun.Quake.applyQuake1, StreetRun.Quake.applyQuake1) }) -}
1fe8d332d3cf59b7b7ab747fccd17c2a
  startQuake ::
    StreetRun.Step.Step StreetRun.Quake.Quake -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.Step.Step StreetRun.Quake.Quake) ->
                 case ds of wild {
                   StreetRun.Step.Step'Change ds1 ds2
                   -> case ds2 of wild1 {
                        StreetRun.Quake.Quake'Progress ds3 -> GHC.Types.True
                        StreetRun.Quake.Quake'Dormant ipv -> GHC.Types.False }
                   StreetRun.Step.Step'Sustain ipv -> GHC.Types.False }) -}
a525ba97ef20b55e0890e2086574afb9
  stepQuake ::
    StreetRun.Quake.Quake -> StreetRun.Step.Step StreetRun.Quake.Quake
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (q :: StreetRun.Quake.Quake) ->
                 case q of wild {
                   StreetRun.Quake.Quake'Progress p
                   -> case p `cast`
                           (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                      let {
                        x1 :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 2.0e-2#
                      } in
                      case GHC.Prim.geFloat# x1 1.0# of lwild {
                        DEFAULT
                        -> StreetRun.Step.Step'Sustain
                             @ StreetRun.Quake.Quake
                             (StreetRun.Quake.Quake'Progress
                                (GHC.Types.F# x1) `cast` (Sym (StreetRun.Types.N:Percent[0])))
                        1#
                        -> StreetRun.Step.Step'Change
                             @ StreetRun.Quake.Quake
                             wild
                             StreetRun.Quake.stepQuake3 } }
                   StreetRun.Quake.Quake'Dormant s
                   -> case s `cast`
                           (StreetRun.Types.N:Seconds[0]) of wild1 { GHC.Types.F# x ->
                      let {
                        x1 :: GHC.Prim.Float# = GHC.Prim.minusFloat# x 1.6667e-2#
                      } in
                      case GHC.Prim.leFloat# x1 0.0# of lwild {
                        DEFAULT
                        -> StreetRun.Step.Step'Sustain
                             @ StreetRun.Quake.Quake
                             (StreetRun.Quake.Quake'Dormant
                                (GHC.Types.F# x1) `cast` (Sym (StreetRun.Types.N:Seconds[0])))
                        1#
                        -> StreetRun.Step.Step'Change
                             @ StreetRun.Quake.Quake
                             wild
                             StreetRun.Quake.stepQuake1 } } }) -}
5bf034c9599bd7cbb00cd6c2b43622cf
  stepQuake1 :: StreetRun.Quake.Quake
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Quake.Quake'Progress
                   StreetRun.Quake.stepQuake2
                     `cast`
                   (Sym (StreetRun.Types.N:Percent[0]))) -}
a4e9d1e0f3677b507f954eaa2e6dca71
  stepQuake2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
9adc5821e0963f7c1cc789433ac28598
  stepQuake3 :: StreetRun.Quake.Quake
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Quake.Quake'Dormant
                   StreetRun.Quake.stepQuake4
                     `cast`
                   (Sym (StreetRun.Types.N:Seconds[0]))) -}
62a756bdf23bd00cf8df754075946f8b
  stepQuake4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 30.0#) -}
instance GHC.Classes.Eq [StreetRun.Quake.Quake]
  = StreetRun.Quake.$fEqQuake
instance GHC.Show.Show [StreetRun.Quake.Quake]
  = StreetRun.Quake.$fShowQuake
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

