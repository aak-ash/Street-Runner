
==================== FINAL INTERFACE ====================
2019-04-26 14:29:04.99995715 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Hurdle_1 8064
  interface hash: 05de59411f307692266d7fddf3e206f5
  ABI hash: c9e76027407717b022743d66c2f85407
  export-list hash: be3dc5eb0f18c89559dce1b425bb13f5
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Hurdle_1.canAddObstacle
  StreetRun.Hurdle_1.iterateObstacles
  StreetRun.Hurdle_1.lastObstacleDistance
  StreetRun.Hurdle_1.placeObstacle
  StreetRun.Hurdle_1.removeOutOfBoundObstacles
module dependencies: StreetRun.Hurdle StreetRun.Physics
                     StreetRun.Snag StreetRun.Types
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 deepseq-1.4.4.0
                      distributive-0.6 dlist-0.8.0.6 exceptions-0.10.1 free-5.1
                      ghc-boot-th-8.6.4 ghc-prim-0.5.3 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2 kan-extensions-5.2
                      lens-4.17 libyaml-0.1.1.0 linear-1.20.8 mtl-2.2.2 pretty-1.1.3.6
                      primitive-0.6.4.0 profunctors-5.3 random-1.1 reflection-2.1.4
                      resourcet-1.2.2 scientific-0.3.6.2 semigroupoids-5.3.2 stm-2.5.0.0
                      tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show linear-1.20.8:Linear.Instances
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Plucker linear-1.20.8:Linear.Quaternion
                         linear-1.20.8:Linear.V linear-1.20.8:Linear.V0
                         linear-1.20.8:Linear.V1 linear-1.20.8:Linear.V2
                         linear-1.20.8:Linear.V3 linear-1.20.8:Linear.V4
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate cf529f033c38156be2990062be8eb570
import  -/  base-4.12.0.0:Data.Foldable 5f70351366640f007be66681d2212df8
import  -/  base-4.12.0.0:Data.Tuple c719fc29608fe81c10bee9a1bf1e05ff
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.List 4014a3c8a3b7c31c8325f6bcf1feea4a
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  linear-1.20.8:Linear 04ff2913b766e124dece4465ec5ad3d4
import  -/  random-1.1:System.Random a2913fef910fa7846b8be540f8dcdaf5
import  -/  StreetRun.Hurdle 38a26fa541ce5ced9eea0f70d3aa69b6
  exports: ccac325c207e939d1f0d01c3da87ee30
  $sel:osDistance:ObstacleState 95c2800d9f00728984a40ce71c8f5ddb
  $sel:osInfo:ObstacleState 95c2800d9f00728984a40ce71c8f5ddb
  ObstacleInfo'Bird ccccae1530dc8bd901d7158bbcf74e40
  ObstacleInfo'Lava 4e5c5aba543882a230926828de4a48aa
  ObstacleInfo'Rock d2f0dba6425cf0a273123b80bb6c9499
  ObstacleState f35d4f34b2a1f4b6dadbc707870d147a
  ObstacleState 95c2800d9f00728984a40ce71c8f5ddb
  ObstacleTag 87a5d4ad614d614ae5f2b575cc03f725
  ObstacleTag'Bird 70a1f6d4c3b86d544572eecd826a4a64
  ObstacleTag'Lava ed433d5b396f1137814a4380606c538e
  ObstacleTag'Rock 770d2ca50a94dd8dea509e443e13376e
  stepObstacles 178c3a1a8aa9d61ae951021edab10adc
import  -/  StreetRun.Physics 913327b3ebcb9b45610bccf968b96819
  exports: 9d3a92dda1fb515a473dcd811827989d
  arenaWidth 720fa9caa92593fe12c8c368a7042a57
import  -/  StreetRun.Snag 91cafec8e0a3bc8aded7f9bc89567610
  exports: c07ed761210af14f8b0800e144209504
  BirdKey'Idle 2abdde2c198427c8bb5c35ac31f3e153
  LavaKey'Idle 23a176317b26b645346237a49cfeb5de
  RockKey'Idle 54dfdba2abbd029caf142c814365a8e4
import  -/  StreetRun.Types fe57a12901e3ac69e610bc5ec1ffe588
  exports: 68eec0a854069d6ebcc9ba499b980fc6
  Distance b4174e484e1fd82b32e71de2fbcef362
  Percent ba7abb7eeed8b328d8b72349c7c4fef0
d7a5565d7e3ebd0c4542dcd3f7b56d8c
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Hurdle_1.$trModule3
                   StreetRun.Hurdle_1.$trModule1) -}
c4493eebd91a34a6eac2b058ae14307f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Hurdle_1.$trModule2) -}
b1438fa9a239ee8a677bd26932738d65
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Hurdle_1"#) -}
90e942701c0e44b313f9680cbc473865
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Hurdle_1.$trModule4) -}
ceb40d807faa5b4e02aa0c135d5891c4
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
7bac4e064467f07ac287a10fecedf014
  $wgo ::
    [StreetRun.Hurdle.ObstacleState]
    -> (# [StreetRun.Hurdle.ObstacleState],
          [StreetRun.Hurdle.ObstacleState] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [2] -}
3d346994c89ffa95b2e2aea6039fc2fe
  $wgo1 ::
    [StreetRun.Hurdle.ObstacleState]
    -> GHC.Prim.Float# -> GHC.Prim.Float#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [2] -}
a3a3f62b8a6f3b6f8080d5cd244da66f
  $witerateObstacles ::
    [(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)]
    -> StreetRun.Types.Percent
    -> [StreetRun.Hurdle.ObstacleState]
    -> (# [StreetRun.Hurdle.ObstacleState], GHC.Types.Int,
          [(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)],
          GHC.Maybe.Maybe StreetRun.Hurdle.ObstacleTag #)
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,1*U>, Inline: [2],
     Unfolding: (\ (w :: [(GHC.Types.Int,
                           StreetRun.Hurdle.ObstacleTag)])
                   (w1 :: StreetRun.Types.Percent)
                   (w2 :: [StreetRun.Hurdle.ObstacleState]) ->
                 let {
                   ds :: ([StreetRun.Hurdle.ObstacleState],
                          [StreetRun.Hurdle.ObstacleState])
                   = case StreetRun.Hurdle_1.$wgo
                            (StreetRun.Hurdle.stepObstacles
                               (case w1
                                       `cast`
                                     (StreetRun.Types.N:Percent[0]) of ww { GHC.Types.F# ww1 ->
                                case GHC.Float.$w$ctoRational1 ww1 of ww2 { (#,#) ww3 ww4 ->
                                (GHC.Float.rationalToFloat ww3 ww4)
                                  `cast`
                                (Sym (StreetRun.Types.N:Distance[0])) } })
                               w2) of ww { (#,#) ww1 ww2 ->
                     (ww1, ww2) }
                 } in
                 let {
                   remained :: [StreetRun.Hurdle.ObstacleState]
                   = case ds of wild { (,) removed remained1 -> remained1 }
                 } in
                 let {
                   newObstacle :: GHC.Maybe.Maybe
                                    (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleState)
                   = case StreetRun.Hurdle_1.iterateObstacles1 of ww { GHC.Types.F# ww1 ->
                     let {
                       $j :: GHC.Prim.Float#
                             -> GHC.Maybe.Maybe
                                  (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleState)
                         <join 1> {- Arity: 1, Strictness: <S,U> -}
                       = \ (x :: GHC.Prim.Float#)[OneShot] ->
                         case StreetRun.Hurdle_1.canAddObstacle1
                                `cast`
                              (StreetRun.Types.N:Distance[0]) of wild1 { GHC.Types.F# y ->
                         case GHC.Prim.ltFloat# x y of lwild {
                           DEFAULT
                           -> GHC.Maybe.Nothing
                                @ (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleState)
                           1#
                           -> let {
                                pair :: (GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)
                                = case w of wild {
                                    []
                                    -> GHC.List.badHead
                                         @ (GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)
                                    : x1 ds1 -> x1 }
                              } in
                              GHC.Maybe.Just
                                @ (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleState)
                                (Data.Tuple.snd
                                   @ GHC.Types.Int
                                   @ StreetRun.Hurdle.ObstacleTag
                                   pair,
                                 StreetRun.Hurdle_1.placeObstacle pair) } }
                     } in
                     letrec {
                       $wgo2 :: [StreetRun.Hurdle.ObstacleState]
                                -> GHC.Prim.Float#
                                -> GHC.Maybe.Maybe
                                     (StreetRun.Hurdle.ObstacleTag, StreetRun.Hurdle.ObstacleState)
                         <join 2> {- Arity: 2, Strictness: <S,1*U><S,U>, Inline: [2] -}
                       = \ (w3 :: [StreetRun.Hurdle.ObstacleState])
                           (ww2 :: GHC.Prim.Float#) ->
                         case w3 of wild {
                           [] -> $j ww2
                           : y ys
                           -> case y of wild1 { StreetRun.Hurdle.ObstacleState ds1 ds2 ->
                              case ds2
                                     `cast`
                                   (StreetRun.Types.N:Distance[0]) of wild2 { GHC.Types.F# y1 ->
                              case GHC.Prim.leFloat# ww2 y1 of lwild {
                                DEFAULT -> $wgo2 ys ww2 1# -> $wgo2 ys y1 } } } }
                     } in
                     $wgo2 remained ww1 }
                 } in
                 let {
                   ds1 :: ([(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)],
                           [StreetRun.Hurdle.ObstacleState])
                   = case newObstacle of wild {
                       GHC.Maybe.Nothing -> (w, remained)
                       GHC.Maybe.Just a1
                       -> (GHC.List.tail
                             @ (GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)
                             w,
                           GHC.Types.:
                             @ StreetRun.Hurdle.ObstacleState
                             (Data.Tuple.snd
                                @ StreetRun.Hurdle.ObstacleTag
                                @ StreetRun.Hurdle.ObstacleState
                                a1)
                             remained) }
                 } in
                 (# case ds1 of wild { (,) upcomingObstacles' obstacles' ->
                    obstacles' },
                    case ds of wild { (,) removed remained1 ->
                    case GHC.List.$wlenAcc
                           @ StreetRun.Hurdle.ObstacleState
                           removed
                           0# of ww2 { DEFAULT ->
                    GHC.Types.I# ww2 } },
                    case ds1 of wild { (,) upcomingObstacles' obstacles' ->
                    upcomingObstacles' },
                    case newObstacle of wild {
                      GHC.Maybe.Nothing
                      -> GHC.Maybe.Nothing @ StreetRun.Hurdle.ObstacleTag
                      GHC.Maybe.Just a1
                      -> GHC.Maybe.Just
                           @ StreetRun.Hurdle.ObstacleTag
                           (Data.Tuple.fst
                              @ StreetRun.Hurdle.ObstacleTag
                              @ StreetRun.Hurdle.ObstacleState
                              a1) } #)) -}
a1d1442a50876f0f0ad01b6c80a9f312
  canAddObstacle :: StreetRun.Types.Distance -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S(S),1*U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (dist :: StreetRun.Types.Distance) ->
                 case dist
                        `cast`
                      (StreetRun.Types.N:Distance[0]) of wild { GHC.Types.F# x ->
                 case StreetRun.Hurdle_1.canAddObstacle1
                        `cast`
                      (StreetRun.Types.N:Distance[0]) of wild1 { GHC.Types.F# y ->
                 GHC.Prim.tagToEnum#
                   @ GHC.Types.Bool
                   (GHC.Prim.ltFloat# x y) } }) -}
affdc9689f9860b546d88bc37b919af0
  canAddObstacle1 :: StreetRun.Types.Distance
  {- Unfolding: (case GHC.Float.$w$ctoRational1
                        1280.0# of ww2 { (#,#) ww3 ww4 ->
                 (GHC.Float.rationalToFloat ww3 ww4)
                   `cast`
                 (Sym (StreetRun.Types.N:Distance[0])) }) -}
4fafebfc116744e6f440ad43e6ec3d18
  iterateObstacles ::
    [(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)]
    -> StreetRun.Types.Percent
    -> [StreetRun.Hurdle.ObstacleState]
    -> ([StreetRun.Hurdle.ObstacleState], GHC.Types.Int,
        [(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)],
        GHC.Maybe.Maybe StreetRun.Hurdle.ObstacleTag)
  {- Arity: 3, Strictness: <L,U><L,1*U(U)><L,1*U>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: [(GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)])
                   (w1 :: StreetRun.Types.Percent)
                   (w2 :: [StreetRun.Hurdle.ObstacleState]) ->
                 case StreetRun.Hurdle_1.$witerateObstacles
                        w
                        w1
                        w2 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 (ww1, ww2, ww3, ww4) }) -}
7ffaac1c6724b39827b97c0cd3779edf
  iterateObstacles1 :: GHC.Types.Float
  {- Unfolding: (case GHC.Float.$w$ctoRational1
                        1280.0# of ww2 { (#,#) ww3 ww4 ->
                 case GHC.Float.rationalToFloat ww3 ww4 of wild { GHC.Types.F# x ->
                 GHC.Types.F# (GHC.Prim.minusFloat# x 1.0#) } }) -}
428982a00df600543f7d432d7faecc7e
  lastObstacleDistance ::
    [StreetRun.Hurdle.ObstacleState] -> StreetRun.Types.Distance
  {- Arity: 1, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [StreetRun.Hurdle.ObstacleState]) ->
                 case StreetRun.Hurdle_1.iterateObstacles1 of ww { GHC.Types.F# ww1 ->
                 case StreetRun.Hurdle_1.$wgo1 w ww1 of ww2 { DEFAULT ->
                 (GHC.Types.F# ww2)
                   `cast`
                 (Sym (StreetRun.Types.N:Distance[0])) } }) -}
4b294d07cdc18238bfd134e93b1d2608
  placeObstacle ::
    (GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)
    -> StreetRun.Hurdle.ObstacleState
  {- Arity: 1, Strictness: <S,1*U(1*U(U),1*U)>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, StreetRun.Hurdle.ObstacleTag)) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.Hurdle.ObstacleState
                   (case ww2 of wild {
                      StreetRun.Hurdle.ObstacleTag'Lava
                      -> StreetRun.Hurdle_1.placeObstacle6
                      StreetRun.Hurdle.ObstacleTag'Rock
                      -> StreetRun.Hurdle_1.placeObstacle4
                      StreetRun.Hurdle.ObstacleTag'Bird
                      -> StreetRun.Hurdle_1.placeObstacle1 })
                   (case ww1 of wild { GHC.Types.I# x ->
                    case GHC.Integer.Type.smallInteger
                           (GHC.Prim.*# x 32#) of dt { DEFAULT ->
                    case GHC.Float.rationalToFloat
                           dt
                           GHC.Real.$fEnumRatio1 of wild1 { GHC.Types.F# x1 ->
                    case StreetRun.Hurdle_1.canAddObstacle1
                           `cast`
                         (StreetRun.Types.N:Distance[0]) of wild2 { GHC.Types.F# y ->
                    (GHC.Types.F# (GHC.Prim.plusFloat# x1 y))
                      `cast`
                    (Sym (StreetRun.Types.N:Distance[0])) } } } }) }) -}
befdb611b9deb39369e1cf21a678391e
  placeObstacle1 :: StreetRun.Hurdle.ObstacleInfo
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (StreetRun.Hurdle.ObstacleInfo'Bird
                   StreetRun.Hurdle_1.placeObstacle2) -}
1f3c8a4fb3662bbc10ac38214bd975c1
  placeObstacle2 ::
    Animate.Position StreetRun.Snag.BirdKey StreetRun.Types.Seconds
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Animate.Position
                   @ StreetRun.Snag.BirdKey
                   @ StreetRun.Types.Seconds
                   StreetRun.Snag.BirdKey'Idle
                   Animate.$fShowAnimations1
                   StreetRun.Hurdle_1.placeObstacle3
                     `cast`
                   (Sym (StreetRun.Types.N:Seconds[0]))
                   Animate.Loop'Always) -}
c5f438bfdf8a5931338764b1f338177b
  placeObstacle3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
7bc24b3aa00562f441b0cc9fa84124fc
  placeObstacle4 :: StreetRun.Hurdle.ObstacleInfo
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Hurdle.ObstacleInfo'Rock
                   StreetRun.Hurdle_1.placeObstacle5) -}
8611a4a6a4d980857f2a62d098fc8437
  placeObstacle5 ::
    Animate.Position StreetRun.Snag.RockKey StreetRun.Types.Seconds
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Animate.Position
                   @ StreetRun.Snag.RockKey
                   @ StreetRun.Types.Seconds
                   StreetRun.Snag.RockKey'Idle
                   Animate.$fShowAnimations1
                   StreetRun.Hurdle_1.placeObstacle3
                     `cast`
                   (Sym (StreetRun.Types.N:Seconds[0]))
                   Animate.Loop'Always) -}
3524bc9cd734092ae7704d81ed2c98d4
  placeObstacle6 :: StreetRun.Hurdle.ObstacleInfo
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Hurdle.ObstacleInfo'Lava
                   StreetRun.Hurdle_1.placeObstacle7) -}
ffd8234883814362288e8cdab06976a3
  placeObstacle7 ::
    Animate.Position StreetRun.Snag.LavaKey StreetRun.Types.Seconds
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Animate.Position
                   @ StreetRun.Snag.LavaKey
                   @ StreetRun.Types.Seconds
                   StreetRun.Snag.LavaKey'Idle
                   Animate.$fShowAnimations1
                   StreetRun.Hurdle_1.placeObstacle3
                     `cast`
                   (Sym (StreetRun.Types.N:Seconds[0]))
                   Animate.Loop'Always) -}
c99757663dd84d07b8ce3ab86968df7e
  removeOutOfBoundObstacles ::
    [StreetRun.Hurdle.ObstacleState]
    -> ([StreetRun.Hurdle.ObstacleState],
        [StreetRun.Hurdle.ObstacleState])
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: [StreetRun.Hurdle.ObstacleState]) ->
                 case StreetRun.Hurdle_1.$wgo w of ww { (#,#) ww1 ww2 ->
                 (ww1, ww2) }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

