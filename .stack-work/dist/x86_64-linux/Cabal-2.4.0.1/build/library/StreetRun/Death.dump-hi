
==================== FINAL INTERFACE ====================
2019-04-26 06:47:55.561571775 UTC

interface street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE:StreetRun.Death 8064
  interface hash: c3cedc6eb00559e1ecb64e998c9f4403
  ABI hash: 4f7eacbaac739ee4d5621e77a22fbbe0
  export-list hash: 14743785934f7ec3332ecd60bf49379e
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Death.deathStep'
  StreetRun.Death.updateDeath
  StreetRun.Death.Death{StreetRun.Death.deathStep}
module dependencies: StreetRun.Audio StreetRun.Building
                     StreetRun.Camera StreetRun.Clock StreetRun.Common StreetRun.Config
                     StreetRun.Font StreetRun.Font_functions StreetRun.Frame
                     StreetRun.Grass StreetRun.HUD StreetRun.Hurdle StreetRun.Hurdle_1
                     StreetRun.Input StreetRun.Load StreetRun.Logger StreetRun.Out
                     StreetRun.Out_func StreetRun.Physics StreetRun.Picture
                     StreetRun.Play StreetRun.Quake StreetRun.Quake_BackStreet
                     StreetRun.Quake_Building StreetRun.Quake_Grass
                     StreetRun.Quake_Street StreetRun.Renderer StreetRun.Renderer_func_1
                     StreetRun.Renderer_func_2 StreetRun.Resource StreetRun.Runner
                     StreetRun.Runner_func_1 StreetRun.Runner_func_2 StreetRun.SDLInput
                     StreetRun.SDLRenderer StreetRun.Scenario StreetRun.Scene
                     StreetRun.Sfx StreetRun.Snag StreetRun.Sound_effects
                     StreetRun.State StreetRun.Step StreetRun.Tag StreetRun.Tag_func
                     StreetRun.Types StreetRun.Work StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate 7c6496232245300f888f7e0dafeb231c
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Float ccb68fbeaab348f60d11c8132d51af5d
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  lens-4.17:Control.Lens 531af2b540e6d8d8ce856b6f46207d94
import  -/  lens-4.17:Control.Lens.Getter 79a8b254c85ab59ff7c11b644140539d
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  StreetRun.Common ae88f6983cc973a550c263b8148feda8
  exports: 61e4030ffa8e91db9a54c7154cc3d232
  HasCommonVars 919b4731c41ba51a047a083b8a4cc9c7
import  -/  StreetRun.Frame bcb622c9bc5c55d3184ab58affcc1b5b
  exports: 061806fa76aa4b4d9f3c174ee83d7084
  frameDeltaSeconds f3a7e06e5c0381d3a81fcee62fef3367
import  -/  StreetRun.HUD 67c25875c022a2408906d37d63f0510d
  exports: e799087feb519c2fa6ec11e1bcb9834b
  HUD dd3aec2a82456c62e19ed6e64162878f
import  -/  StreetRun.Load 16e217d4e0c253fb423fa049ddaea289
  exports: bb94dee51103db3de49f80223cdee067
  HasInput a827a1b40b93ca24fd0678aff14a3874
import  -/  StreetRun.Picture 75395a4c252b8548400a323f40a76527
  exports: babc26a2152d66639b7a47ea4c5947f4
  CameraControl 886c953787575a6ab7b91f5818c72b74
import  -/  StreetRun.Play fde39e25142d663f83ffdc7c478d68a3
  exports: fddfe503c07894a36563a64c1e4547d3
  drawPlay c6ebab1eb6b97a8395051df7a792e079
  modifyPlayVars 987b668df3cefbd20f7940434ad8e7aa
import  -/  StreetRun.Renderer eba9a9e4c8700e42ea509a1bf564c30b
  exports: bdc569cebfaf1503ce959a9192a1814c
  Renderer 879b383bd7b1ca67a12fca41ecb57c3d
  getRunnerAnimations 359e34639657617fa9e732d909871035
import  -/  StreetRun.Renderer_func_1 b2f8a68dbebb4a5575e9c9404df81f49
  exports: cd995c9f02033435bf3d7151e24e6a3d
import  -/  StreetRun.Renderer_func_2 4d5a7c4dba8ccd5d139bd424e7e60331
  exports: acb7c593e3b7f4916cf72f231a22b161
import  -/  StreetRun.Runner d3359c007392b06d1628d1e8bb37f9ba
  exports: 07dc0a302095db6221f41ecc2db9aec7
  $sel:dsHeight:RunnerState ba3a4953300a8a7970962fa07fd443a5
import  -/  StreetRun.Runner_func_1 1928ba54f43a20365598e5563c7061e0
  exports: 3aace68dd54e293b9e7cb9629aa29f15
import  -/  StreetRun.Runner_func_2 f8a14e2b7b30d725c8ce0939a4c26918
  exports: fc83ba710a96fc8b5794a82f528d2b01
import  -/  StreetRun.Scenario 3d565e4d4fcefb40de1d348ddc5508f1
  Scene'GameOver d6d74f7b1099ec47643260db8a409509
import  -/  StreetRun.Scene af7d6d54736d3642cc86bcfab3e76781
  exports: 07dad99016b354b41a3f7ae55850c26a
  SceneManager 63d1267c6f32ccbcb6cd361a33bac81a
  toScene 1edb960cc18f68f27f8817e7a98f03a1
import  -/  StreetRun.Work 3611973cdf8488c3a5964c00b99590c8
  exports: ffd7a4165016a00bc61ed7371fce244a
  $sel:pvRunnerPos:PlayVars 05b27afb2a000fc455265545d1f3ef8b
  $sel:pvRunnerState:PlayVars 05b27afb2a000fc455265545d1f3ef8b
import  -/  StreetRun.Work_func 0e86a93f8906c4018fd2b1e24c18ab52
  exports: 0632c1ae56fdb446c1bb6a552db25704
  HasPlayVars 7c21393bf018dbd7864889724c1b555b
  playVars 189c6f7e94884827f037d5be1ee00734
3f8c293a598c055c13d4a425169a6878
  $tc'C:Death :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15129259457649480633##
                   14418804958156768900##
                   StreetRun.Death.$trModule
                   StreetRun.Death.$tc'C:Death2
                   1#
                   StreetRun.Death.$tc'C:Death1) -}
07e8635ff71788a3a7fba83ef1010fcd
  $tc'C:Death1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c3c747257b74e0af8758b2443f60317
  $tc'C:Death2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Death.$tc'C:Death3) -}
fd2e2764d23c4b474e3cb87dda6b7eeb
  $tc'C:Death3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Death"#) -}
101b5e754f57e0a53778ae386ea175f3
  $tcDeath :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8272875983655061546##
                   15449919037938246225##
                   StreetRun.Death.$trModule
                   StreetRun.Death.$tcDeath2
                   0#
                   StreetRun.Death.$tcDeath1) -}
fdbfc912c3e4136bdab8b4b957a39609
  $tcDeath1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
848f6f530c02f13913e88db4c5d3e3bf
  $tcDeath2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Death.$tcDeath3) -}
7d59ba41508c6d4741be300ac82a0d41
  $tcDeath3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Death"#) -}
e6849602bd75fe59a58ba038991d86d2
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Death.$trModule3
                   StreetRun.Death.$trModule1) -}
f88f984ecf93920c8a9f0290921f2bc2
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Death.$trModule2) -}
d8ffa1cbd19cac249cd3c71684025708
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Death"#) -}
525077b7c977cf3cb7e04509e5c518bb
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Death.$trModule4) -}
d7a783a0a537b1fcd065b26bf1bcde22
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE"#) -}
8266b9828ab27da7649f85fe9be6d50c
  $wupdateDeath ::
    StreetRun.Work_func.HasPlayVars s =>
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. (s -> (a, s)) -> m a)
    -> StreetRun.Renderer.Renderer m => m ()
  {- Arity: 4,
     Strictness: <L,C(C1(C(U)))><C(C(S)),1*C1(C1(U))><L,C(U)><L,1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. (s -> (a, s)) -> m a)
                   (w1 :: StreetRun.Renderer.Renderer m) ->
                 ww
                   @ (StreetRun.Types.Animations StreetRun.Runner.RunnerKey)
                   @ ()
                   (StreetRun.Renderer.getRunnerAnimations @ m w1)
                   (\ (animations :: StreetRun.Types.Animations
                                       StreetRun.Runner.RunnerKey) ->
                    let {
                      f :: s -> Data.Functor.Identity.Identity s
                      = w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                          @ Data.Functor.Identity.Identity
                          Data.Functor.Identity.$fFunctorIdentity
                          (\ (pv :: StreetRun.Work.PlayVars) ->
                           case pv of wild { StreetRun.Work.PlayVars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                           StreetRun.Work.PlayVars
                             ds
                             ds1
                             ds2
                             ds3
                             ds4
                             ds5
                             (Animate.stepPosition
                                @ StreetRun.Runner.RunnerKey
                                @ StreetRun.Types.Seconds
                                @ (Animate.SpriteClip StreetRun.Runner.RunnerKey)
                                StreetRun.Runner.$fEnumRunnerKey
                                StreetRun.Types.$fNumSeconds
                                StreetRun.Types.$fOrdSeconds
                                animations
                                ds6
                                StreetRun.Death.deathStep'4
                                  `cast`
                                (Sym (StreetRun.Types.N:Seconds[0])))
                             ds7
                             ds8
                             (case ds9 of wild1 { StreetRun.Runner.RunnerState ds16 ds17 ds18 ds19 ->
                              StreetRun.Runner.RunnerState
                                ds16
                                (case ds17 of wild2 {
                                   GHC.Maybe.Nothing -> StreetRun.Death.deathStep'2
                                   GHC.Maybe.Just x
                                   -> GHC.Maybe.Just
                                        @ StreetRun.Types.Percent
                                        (case x `cast`
                                              (StreetRun.Types.N:Percent[0]) of wild3 { GHC.Types.F# x1 ->
                                         (GHC.Types.F# (GHC.Prim.plusFloat# x1 3.0e-2#))
                                           `cast`
                                         (Sym (StreetRun.Types.N:Percent[0])) }) })
                                ds18
                                ds19 })
                             ds10
                             ds11
                             ds12
                             ds13
                             ds14
                             ds15 })
                            `cast`
                          (<StreetRun.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <StreetRun.Work.PlayVars>_R))
                    } in
                    ww1
                      @ ()
                      (\ (s1 :: s) ->
                       (GHC.Tuple.(),
                        (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <s>_R))))) -}
de140fce135b19484db7562249d763a3
  class GHC.Base.Monad m => Death (m :: * -> *) where
    deathStep :: m ()
    {-# MINIMAL deathStep #-}
5ed0ab25b5cc8602421dfe8fc945c228
  deathStep' ::
    (StreetRun.Work_func.HasPlayVars s,
     StreetRun.Common.HasCommonVars s,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Scene.SceneManager m, StreetRun.Load.HasInput m,
     StreetRun.Renderer.Renderer m, StreetRun.Picture.CameraControl m,
     StreetRun.HUD.HUD m) =>
    m ()
  {- Arity: 8,
     Strictness: <L,C(C1(C(U)))><L,1*C1(C1(C(U)))><S(S(LLC(C(S))LL)LLL),U(U(U(A,C(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,1*U(A,1*C1(U))><L,A><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,U,U,U,U,U,U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(U),C(U),A,A,A,A,A,A,A,A,A)><L,A><L,U(A,U,U,U)>,
     Unfolding: (\ @ s
                   @ m :: * -> *
                   ($dHasPlayVars :: StreetRun.Work_func.HasPlayVars s)
                   ($dHasCommonVars :: StreetRun.Common.HasCommonVars s)
                   ($dMonadState :: Control.Monad.State.Class.MonadState s m)
                   ($dSceneManager :: StreetRun.Scene.SceneManager m)
                   ($dHasInput :: StreetRun.Load.HasInput m)
                   ($dRenderer :: StreetRun.Renderer.Renderer m)
                   ($dCameraControl :: StreetRun.Picture.CameraControl m)
                   ($dHUD :: StreetRun.HUD.HUD m) ->
                 case Control.Monad.State.Class.$p1MonadState
                        @ s
                        @ m
                        $dMonadState of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 ww3
                   @ ()
                   @ ()
                   (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                    case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                    StreetRun.Death.$wupdateDeath
                      @ s
                      @ m
                      $dHasPlayVars
                      ww13
                      ww10
                      $dRenderer } })
                   (ww3
                      @ ()
                      @ ()
                      (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                       case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                       StreetRun.Play.$wdrawPlay
                         @ s
                         @ m
                         $dHasPlayVars
                         $dHasCommonVars
                         ww12
                         ww13
                         ww14
                         ww15
                         ww8
                         $dRenderer
                         $dHUD } })
                      (let {
                         lvl :: m ()
                         = StreetRun.Scene.toScene
                             @ m
                             $dSceneManager
                             StreetRun.Scenario.Scene'GameOver
                       } in
                       let {
                         lvl1 :: m () = ww4 @ () GHC.Tuple.()
                       } in
                       let {
                         lvl2 :: m () = GHC.Base.pure @ m ww1 @ () GHC.Tuple.()
                       } in
                       ww2
                         @ (GHC.Maybe.Maybe StreetRun.Types.Percent)
                         @ ()
                         (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                          case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                          let {
                            g :: s -> Data.Functor.Const.Const StreetRun.Work.PlayVars s
                            = $dHasPlayVars `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                                @ (Data.Functor.Const.Const StreetRun.Work.PlayVars)
                                (Data.Functor.Const.$fFunctorConst @ StreetRun.Work.PlayVars)
                                StreetRun.Death.deathStep'1
                                  `cast`
                                (<StreetRun.Work.PlayVars>_R
                                 ->_R Sym (Data.Functor.Const.N:Const[0]
                                               <*>_N
                                               <StreetRun.Work.PlayVars>_R
                                               <StreetRun.Work.PlayVars>_P))
                          } in
                          ww13
                            @ s
                            @ (GHC.Maybe.Maybe StreetRun.Types.Percent)
                            ww8
                            (\ (s1 :: s) ->
                             ww15
                               @ (GHC.Maybe.Maybe StreetRun.Types.Percent)
                               (case (g s1)
                                       `cast`
                                     (Data.Functor.Const.N:Const[0]
                                          <*>_N
                                          <StreetRun.Work.PlayVars>_R
                                          <s>_P) of wild { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                                case ds10 of wild1 { StreetRun.Runner.RunnerState ds22 ds23 ds24 ds25 ->
                                ds23 } })) } })
                         (\ (height :: GHC.Maybe.Maybe StreetRun.Types.Percent) ->
                          case height of wild {
                            GHC.Maybe.Nothing -> lvl1
                            GHC.Maybe.Just h
                            -> case h `cast`
                                    (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                               case GHC.Prim.gtFloat# x 1.5707964# of lwild {
                                 DEFAULT -> lvl2 1# -> lvl } } }))) }) -}
38677df3f7e8210d204beff83a944f53
  deathStep'1 :: StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Work.PlayVars) -> v) -}
c6025ae1f214737339c24a78bb14eeee
  deathStep'2 :: GHC.Maybe.Maybe StreetRun.Types.Percent
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ StreetRun.Types.Percent
                   StreetRun.Death.deathStep'3
                     `cast`
                   (Sym (StreetRun.Types.N:Percent[0]))) -}
9e430cc8556ea74ec9ac331f9cf812e9
  deathStep'3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
5111f621b1b95e5bd13180679a828815
  deathStep'4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 1.6667e-2#) -}
19ff19630652f67004bcc922b83bb065
  updateDeath ::
    (StreetRun.Work_func.HasPlayVars s,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Renderer.Renderer m) =>
    m ()
  {- Arity: 3,
     Strictness: <L,C(C1(C(U)))><S(S(LC(C(S))LLL)LLL),1*U(1*U(A,1*C1(C1(U)),A,A,A),A,A,C(U))><L,1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Renderer.Renderer m) ->
                 case w1 of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Death.$wupdateDeath @ s @ m w ww7 ww4 w2 } }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

