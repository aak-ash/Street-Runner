
==================== FINAL INTERFACE ====================
2019-04-26 14:29:09.539486555 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Death 8064
  interface hash: 6c350a2e2526afaca70c5805d1c6f26a
  ABI hash: 3736750ea403d6c2a935ce3e3e1829bd
  export-list hash: eeb974f5063b6e179132d6dcd1281d6b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Death.deathStep'
  StreetRun.Death.updateDeath
  StreetRun.Death.Death{StreetRun.Death.deathStep}
module dependencies: StreetRun.Assets StreetRun.Assets_1
                     StreetRun.Assets_2 StreetRun.Audio StreetRun.CFL StreetRun.Camera
                     StreetRun.Common StreetRun.Config StreetRun.Font
                     StreetRun.Font_functions StreetRun.HUD StreetRun.Hurdle
                     StreetRun.Hurdle_1 StreetRun.Input StreetRun.Load StreetRun.Out
                     StreetRun.Out_func StreetRun.Physics StreetRun.Picture
                     StreetRun.Play StreetRun.Quake StreetRun.Quake_BackStreet
                     StreetRun.Quake_Building StreetRun.Quake_Grass
                     StreetRun.Quake_Street StreetRun.Renderer StreetRun.Renderer_func_1
                     StreetRun.Renderer_func_2 StreetRun.Runner StreetRun.Runner_func_1
                     StreetRun.Runner_func_2 StreetRun.SDLLayer StreetRun.Scenario
                     StreetRun.Scene StreetRun.Sfx StreetRun.Snag
                     StreetRun.Sound_effects StreetRun.State StreetRun.Step
                     StreetRun.Tag StreetRun.Tag_func StreetRun.Types StreetRun.Work
                     StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate cf529f033c38156be2990062be8eb570
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:Data.Maybe 9b76a39e833465c3c5b3c078b431417f
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Float ccb68fbeaab348f60d11c8132d51af5d
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  lens-4.17:Control.Lens 02c38743366e4d3d260b71bddfddea13
import  -/  lens-4.17:Control.Lens.Getter 18b0523ecb5ed8cc7fa826ffd942da08
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  StreetRun.CFL 22aaa7e917fe6023bc75b650c540e607
  exports: f389828e267831208731f8c3eb015474
  frameDeltaSeconds 9605a9c4d4e8e9e818a55364604b43d7
import  -/  StreetRun.Common ec7a24ddc13a89793e354234ea8b6a8f
  exports: 5bf7e8807e04e9b7e18cf5c3f75b1f5b
  HasCommonVars 78e2982dec7ad30766f890d3421b5154
import  -/  StreetRun.HUD 33ed45f0ee969474895a8614650a2f1b
  exports: 7832e9cac015a5203f08d8c52ac8b9ae
  HUD 910cd3343cd00cd8902c09529859c02a
import  -/  StreetRun.Load b854b61e5394a1e0d9cd4b9313a268b0
  exports: 4cddd7fe752b7b923c34c3b71e404029
  HasInput ba70c797691329d224bd192290501ef6
import  -/  StreetRun.Picture b3a434655916c9bd40f5e83b30c22973
  exports: 3a912206f39fec45a542e7a9b7b90546
  CameraControl 4fbff540ba209f3d818863d970cdf797
import  -/  StreetRun.Play 5e1759185369f3a2fb6cea30997a29a1
  exports: a72549fdc40fd458e99f01bb54a263bc
  drawPlay 2d161bb4ba69e327c7b99d0e8e3033b6
  modifyPlayVars 7212d1f75fb00121324a8daebf64fa50
import  -/  StreetRun.Renderer 0519d22b921b8437012069e63a6f4fa6
  exports: 3ce23641af82250faf4b4afd515774b7
  Renderer 718a3d63cec016694ff0c781c86acdfc
  getRunnerAnimations 2fcaf83fcbda5f1bc7a60f13b946af8e
import  -/  StreetRun.Renderer_func_1 a9aeb84e666161fb4390884165deb075
  exports: 6a0ad2bf2ffcb5fd6ca93a687f153110
import  -/  StreetRun.Renderer_func_2 8e1829777a16c2ecd350a0a2077893e3
  exports: e72c1bc9f19fb36af370b60f395645dd
import  -/  StreetRun.Runner a6abbd291e744158bf9018a60f48d314
  exports: ae88bb9ed2797ab0ae7bfb3fb6716c40
  $sel:dsHeight:RunnerState 47dad745455c1bb3aa6466e0dcf4a02c
import  -/  StreetRun.Runner_func_1 bdddcc72b2b205ac6ed65be0261303a7
  exports: 5dd8b90845ed790a7a36c82e6f4d7138
import  -/  StreetRun.Runner_func_2 850b3567ef6c7c4675339eaa541ca68a
  exports: 132f0584768b112cf2826c60192e01cb
import  -/  StreetRun.Scenario 354a54748ba84a3c008f8f16b2acd94c
  Scene'GameOver d8d6b39c31265c252eb4d435b4bc9d0f
import  -/  StreetRun.Scene 77553ca4972702fc9ed9a930428c3b84
  exports: e5cf8e79f9eac931695eddae8a179fc0
  SceneManager 8a74b8a4c9e990537b0f35c67b38d826
  toScene d29769eae987e04902c8094df1bb527e
import  -/  StreetRun.Work 84c49625e5300d184b6b74d71a119d1f
  exports: be18f47a77094179ee18b27ca088c03e
  $sel:pvRunnerPos:PlayVars 454bac6bacb8c3a13959acb3712742b4
  $sel:pvRunnerState:PlayVars 454bac6bacb8c3a13959acb3712742b4
import  -/  StreetRun.Work_func e74f2daf9d4710767ad8c2ada174399d
  exports: c79cba614ebcff5946e13d50725530aa
  HasPlayVars 9cbc89508257ef44e1f754bf3878ef7f
  playVars a16e4bec16bd99ad3c380a2d9a9d4a2c
e2286afe22a8d5595213667b47043e36
  $tc'C:Death :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9401505886989119513##
                   9541935714450025831##
                   StreetRun.Death.$trModule
                   StreetRun.Death.$tc'C:Death2
                   1#
                   StreetRun.Death.$tc'C:Death1) -}
b00ccafc94578c996ecff47d639bc1dc
  $tc'C:Death1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
079da08cdce60080706e3193d2f2a750
  $tc'C:Death2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Death.$tc'C:Death3) -}
84c5d809ba9f254ede58c5d0b8e3c014
  $tc'C:Death3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:Death"#) -}
35810590efdfbe2b8063d694a7720650
  $tcDeath :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16847990499517116146##
                   2588749826481686494##
                   StreetRun.Death.$trModule
                   StreetRun.Death.$tcDeath2
                   0#
                   StreetRun.Death.$tcDeath1) -}
2394d48015a13390508d0dd65850b025
  $tcDeath1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
356ef95a573111362ce94c7cf647f529
  $tcDeath2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Death.$tcDeath3) -}
3f04c3ccb57bb76ec2f9490c5e4c21bd
  $tcDeath3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Death"#) -}
b243578ae328db6280e23d1c3aa7fd4e
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Death.$trModule3
                   StreetRun.Death.$trModule1) -}
bcb5e1372cdc3eb4229c04ac8412c857
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Death.$trModule2) -}
2a0417f2a0a2415c0ebb5bb5a707f278
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Death"#) -}
df449c31b94062fb2de63f73911c273b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Death.$trModule4) -}
4bf42867ece0bd769a647c456173f7d8
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
9da905b612dcf352ae0061cf4f36269c
  $wupdateDeath ::
    StreetRun.Work_func.HasPlayVars s =>
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a. (s -> (a, s)) -> m a)
    -> StreetRun.Renderer.Renderer m => m ()
  {- Arity: 4,
     Strictness: <L,C(C1(C(U)))><C(C(S)),1*C1(C1(U))><L,C(U)><L,1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (ww :: forall a b. m a -> (a -> m b) -> m b)
                   (ww1 :: forall a. (s -> (a, s)) -> m a)
                   (w1 :: StreetRun.Renderer.Renderer m) ->
                 ww
                   @ (StreetRun.Types.Animations StreetRun.Runner.RunnerKey)
                   @ ()
                   (StreetRun.Renderer.getRunnerAnimations @ m w1)
                   (\ (animations :: StreetRun.Types.Animations
                                       StreetRun.Runner.RunnerKey) ->
                    let {
                      f :: s -> Data.Functor.Identity.Identity s
                      = w `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                          @ Data.Functor.Identity.Identity
                          Data.Functor.Identity.$fFunctorIdentity
                          (\ (pv :: StreetRun.Work.PlayVars) ->
                           case pv of wild { StreetRun.Work.PlayVars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ->
                           StreetRun.Work.PlayVars
                             ds
                             ds1
                             ds2
                             ds3
                             ds4
                             ds5
                             (Animate.stepPosition
                                @ StreetRun.Runner.RunnerKey
                                @ StreetRun.Types.Seconds
                                @ (Animate.SpriteClip StreetRun.Runner.RunnerKey)
                                StreetRun.Runner.$fEnumRunnerKey
                                StreetRun.Types.$fNumSeconds
                                StreetRun.Types.$fOrdSeconds
                                animations
                                ds6
                                StreetRun.Death.deathStep'4
                                  `cast`
                                (Sym (StreetRun.Types.N:Seconds[0])))
                             ds7
                             ds8
                             (case ds9 of wild1 { StreetRun.Runner.RunnerState ds16 ds17 ds18 ds19 ->
                              StreetRun.Runner.RunnerState
                                ds16
                                (case ds17 of wild2 {
                                   GHC.Maybe.Nothing -> StreetRun.Death.deathStep'2
                                   GHC.Maybe.Just x
                                   -> GHC.Maybe.Just
                                        @ StreetRun.Types.Percent
                                        (case x `cast`
                                              (StreetRun.Types.N:Percent[0]) of wild3 { GHC.Types.F# x1 ->
                                         (GHC.Types.F# (GHC.Prim.plusFloat# x1 3.0e-2#))
                                           `cast`
                                         (Sym (StreetRun.Types.N:Percent[0])) }) })
                                ds18
                                ds19 })
                             ds10
                             ds11
                             ds12
                             ds13
                             ds14
                             ds15 })
                            `cast`
                          (<StreetRun.Work.PlayVars>_R
                           ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                         <StreetRun.Work.PlayVars>_R))
                    } in
                    ww1
                      @ ()
                      (\ (s1 :: s) ->
                       (GHC.Tuple.(),
                        (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <s>_R))))) -}
ba62fe1977cc43c295ad3e800eb6583f
  class GHC.Base.Monad m => Death (m :: * -> *) where
    deathStep :: m ()
    {-# MINIMAL deathStep #-}
f48e6c046145349a9cd289c79187e874
  deathStep' ::
    (StreetRun.Work_func.HasPlayVars s,
     StreetRun.Common.HasCommonVars s,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Scene.SceneManager m, StreetRun.Load.HasInput m,
     StreetRun.Renderer.Renderer m, StreetRun.Picture.CameraControl m,
     StreetRun.HUD.HUD m) =>
    m ()
  {- Arity: 8,
     Strictness: <L,C(C1(C(U)))><L,1*C1(C1(C(U)))><S(S(LLC(C(S))LL)LLL),U(U(U(A,C(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,C(U))><L,1*U(A,1*C1(U))><L,A><L,U(U(A,C(C1(U)),C(C1(U)),C(U),A),A,A,U,U,U,U,U,U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(U),C(U),A,A,A,A,A,A,A,A,A)><L,A><L,U(A,U,U,U)>,
     Unfolding: (\ @ s
                   @ m :: * -> *
                   ($dHasPlayVars :: StreetRun.Work_func.HasPlayVars s)
                   ($dHasCommonVars :: StreetRun.Common.HasCommonVars s)
                   ($dMonadState :: Control.Monad.State.Class.MonadState s m)
                   ($dSceneManager :: StreetRun.Scene.SceneManager m)
                   ($dHasInput :: StreetRun.Load.HasInput m)
                   ($dRenderer :: StreetRun.Renderer.Renderer m)
                   ($dCameraControl :: StreetRun.Picture.CameraControl m)
                   ($dHUD :: StreetRun.HUD.HUD m) ->
                 case Control.Monad.State.Class.$p1MonadState
                        @ s
                        @ m
                        $dMonadState of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 ww3
                   @ ()
                   @ ()
                   (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                    case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                    StreetRun.Death.$wupdateDeath
                      @ s
                      @ m
                      $dHasPlayVars
                      ww13
                      ww10
                      $dRenderer } })
                   (ww3
                      @ ()
                      @ ()
                      (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                       case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                       StreetRun.Play.$wdrawPlay
                         @ s
                         @ m
                         $dHasPlayVars
                         $dHasCommonVars
                         ww12
                         ww13
                         ww14
                         ww15
                         ww8
                         $dRenderer
                         $dHUD } })
                      (let {
                         lvl :: m ()
                         = StreetRun.Scene.toScene
                             @ m
                             $dSceneManager
                             StreetRun.Scenario.Scene'GameOver
                       } in
                       let {
                         lvl1 :: m () = ww4 @ () GHC.Tuple.()
                       } in
                       let {
                         lvl2 :: m () = GHC.Base.pure @ m ww1 @ () GHC.Tuple.()
                       } in
                       ww2
                         @ (GHC.Maybe.Maybe StreetRun.Types.Percent)
                         @ ()
                         (case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                          case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                          let {
                            g :: s -> Data.Functor.Const.Const StreetRun.Work.PlayVars s
                            = $dHasPlayVars `cast` (StreetRun.Work_func.N:HasPlayVars[0] <s>_N)
                                @ (Data.Functor.Const.Const StreetRun.Work.PlayVars)
                                (Data.Functor.Const.$fFunctorConst @ StreetRun.Work.PlayVars)
                                StreetRun.Death.deathStep'1
                                  `cast`
                                (<StreetRun.Work.PlayVars>_R
                                 ->_R Sym (Data.Functor.Const.N:Const[0]
                                               <*>_N
                                               <StreetRun.Work.PlayVars>_R
                                               <StreetRun.Work.PlayVars>_P))
                          } in
                          ww13
                            @ s
                            @ (GHC.Maybe.Maybe StreetRun.Types.Percent)
                            ww8
                            (\ (s1 :: s) ->
                             ww15
                               @ (GHC.Maybe.Maybe StreetRun.Types.Percent)
                               (case (g s1)
                                       `cast`
                                     (Data.Functor.Const.N:Const[0]
                                          <*>_N
                                          <StreetRun.Work.PlayVars>_R
                                          <s>_P) of wild { StreetRun.Work.PlayVars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ->
                                case ds10 of wild1 { StreetRun.Runner.RunnerState ds22 ds23 ds24 ds25 ->
                                ds23 } })) } })
                         (\ (height :: GHC.Maybe.Maybe StreetRun.Types.Percent) ->
                          case height of wild {
                            GHC.Maybe.Nothing -> lvl1
                            GHC.Maybe.Just h
                            -> case h `cast`
                                    (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                               case GHC.Prim.gtFloat# x 1.5707964# of lwild {
                                 DEFAULT -> lvl2 1# -> lvl } } }))) }) -}
8fe15d0bad0880531de6d1dcd703b2a0
  deathStep'1 :: StreetRun.Work.PlayVars -> StreetRun.Work.PlayVars
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S,1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Work.PlayVars) -> v) -}
0c0651bd6673ac71edcdef6e02f52927
  deathStep'2 :: GHC.Maybe.Maybe StreetRun.Types.Percent
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ StreetRun.Types.Percent
                   StreetRun.Death.deathStep'3
                     `cast`
                   (Sym (StreetRun.Types.N:Percent[0]))) -}
5e5d8a2500ab9e313a0953b6d4741fe6
  deathStep'3 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
da9bbbc02a53d8f2cb6e8558141bd783
  deathStep'4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 1.6667e-2#) -}
74f68c3c3d660e7dc7baa5cf8bfc83aa
  updateDeath ::
    (StreetRun.Work_func.HasPlayVars s,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Renderer.Renderer m) =>
    m ()
  {- Arity: 3,
     Strictness: <L,C(C1(C(U)))><S(S(LC(C(S))LLL)LLL),1*U(1*U(A,1*C1(C1(U)),A,A,A),A,A,C(U))><L,1*U(A,A,A,1*U,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Work_func.HasPlayVars s)
                   (w1 :: Control.Monad.State.Class.MonadState s m)
                   (w2 :: StreetRun.Renderer.Renderer m) ->
                 case w1 of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { GHC.Base.C:Monad ww6 ww7 ww8 ww9 ww10 ->
                 StreetRun.Death.$wupdateDeath @ s @ m w ww7 ww4 w2 } }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

