
==================== FINAL INTERFACE ====================
2019-04-25 21:19:31.464480479 UTC

interface street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE:StreetRun.Rock 8064
  interface hash: 46688c7d1408fc8d5872b3f17d1dba1c
  ABI hash: 6fd05ea3a8f90e243d20adb54dbfaa0b
  export-list hash: d376ab1fede8504deb475f4104d6a3a6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Rock.rockKey'keyName
  StreetRun.Rock.RockKey{StreetRun.Rock.RockKey'Idle}
module dependencies:
package dependencies: aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0
                      attoparsec-0.13.2.2 base-4.12.0.0 base-compat-0.10.5 binary-0.8.6.0
                      bytestring-0.10.8.2 conduit-1.3.1.1 containers-0.6.0.1
                      deepseq-1.4.4.0 dlist-0.8.0.6 exceptions-0.10.1 ghc-boot-th-8.6.4
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 libyaml-0.1.1.0 mtl-2.2.2
                      primitive-0.6.4.0 random-1.1 resourcet-1.2.2 scientific-0.3.6.2
                      stm-2.5.0.0 tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      time-1.8.0.2 time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      unliftio-core-0.1.2.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.2 yaml-0.11.0.0
orphans: stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.2.0:Data.Aeson.Types.Internal
                         animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate 7c6496232245300f888f7e0dafeb231c
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Enum 87204abed08db8735fc0be5ab48689aa
import  -/  base-4.12.0.0:GHC.Err ea5e313ef4146b40b5d8b27aa168e736
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  text-1.2.3.1:Data.Text 1e51a010d8f8a6fa41d8ea82d69faf13
import  -/  text-1.2.3.1:Data.Text.Internal 537e168590e8068f673f691833f78483
d3104c5c60b387ae34f8abd0d177eec8
  $fBoundedRockKey :: GHC.Enum.Bounded StreetRun.Rock.RockKey
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Rock.RockKey
                  StreetRun.Rock.RockKey'Idle
                  StreetRun.Rock.RockKey'Idle -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey :: GHC.Enum.Enum StreetRun.Rock.RockKey
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Rock.RockKey
                  StreetRun.Rock.$fEnumRockKey_$csucc
                  StreetRun.Rock.$fEnumRockKey_$cpred
                  StreetRun.Rock.$fEnumRockKey_$ctoEnum
                  StreetRun.Rock.$fEnumRockKey_$cfromEnum
                  StreetRun.Rock.$fEnumRockKey_$cenumFrom
                  StreetRun.Rock.$fEnumRockKey_$cenumFromThen
                  StreetRun.Rock.$fEnumRockKey_$cenumFromTo
                  StreetRun.Rock.$fEnumRockKey_$cenumFromThenTo -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey1 :: [StreetRun.Rock.RockKey]
  {- Unfolding: (StreetRun.Rock.$fEnumRockKey_go_up 0#) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey2 :: [StreetRun.Rock.RockKey]
  {- Unfolding: (StreetRun.Rock.$fEnumRockKey_go 0#) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey3 :: [StreetRun.Rock.RockKey]
  {- Unfolding: (StreetRun.Rock.$fEnumRockKey_go1 0#) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey4 :: StreetRun.Rock.RockKey
  {- Strictness: x -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey5 :: StreetRun.Rock.RockKey
  {- Strictness: x -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_$cenumFrom ::
    StreetRun.Rock.RockKey -> [StreetRun.Rock.RockKey]
  {- Arity: 1, Strictness: <S,1*H>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: StreetRun.Rock.RockKey) ->
                 case w of w1 { StreetRun.Rock.RockKey'Idle ->
                 StreetRun.Rock.$fEnumRockKey3 }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_$cenumFromThen ::
    StreetRun.Rock.RockKey
    -> StreetRun.Rock.RockKey -> [StreetRun.Rock.RockKey]
  {- Arity: 2, Strictness: <S,1*H><S,1*H>m2, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Rock.RockKey) (w1 :: StreetRun.Rock.RockKey) ->
                 case w of w2 { StreetRun.Rock.RockKey'Idle ->
                 case w1 of w3 { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.:
                   @ StreetRun.Rock.RockKey
                   StreetRun.Rock.RockKey'Idle
                   (letrec {
                      go_up1 :: GHC.Prim.Int# -> [StreetRun.Rock.RockKey]
                        {- Arity: 1, Strictness: <S,U> -}
                      = \ (x :: GHC.Prim.Int#) ->
                        case GHC.Prim.># x 0# of lwild1 {
                          DEFAULT
                          -> GHC.Types.:
                               @ StreetRun.Rock.RockKey
                               (GHC.Prim.tagToEnum# @ StreetRun.Rock.RockKey x)
                               (go_up1 x)
                          1#
                          -> GHC.Types.:
                               @ StreetRun.Rock.RockKey
                               (GHC.Prim.tagToEnum# @ StreetRun.Rock.RockKey x)
                               (GHC.Types.[] @ StreetRun.Rock.RockKey) }
                    } in
                    go_up1 0#) } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_$cenumFromThenTo ::
    StreetRun.Rock.RockKey
    -> StreetRun.Rock.RockKey
    -> StreetRun.Rock.RockKey
    -> [StreetRun.Rock.RockKey]
  {- Arity: 3, Strictness: <S,1*H><S,1*H><S,1*H>m2, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Rock.RockKey)
                   (w1 :: StreetRun.Rock.RockKey)
                   (w2 :: StreetRun.Rock.RockKey) ->
                 case w of w3 { StreetRun.Rock.RockKey'Idle ->
                 case w1 of w4 { StreetRun.Rock.RockKey'Idle ->
                 case w2 of w5 { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.:
                   @ StreetRun.Rock.RockKey
                   StreetRun.Rock.RockKey'Idle
                   StreetRun.Rock.$fEnumRockKey1 } } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_$cenumFromTo ::
    StreetRun.Rock.RockKey
    -> StreetRun.Rock.RockKey -> [StreetRun.Rock.RockKey]
  {- Arity: 2, Strictness: <S,1*H><S,1*H>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Rock.RockKey) (w1 :: StreetRun.Rock.RockKey) ->
                 case w of w2 { StreetRun.Rock.RockKey'Idle ->
                 case w1 of w3 { StreetRun.Rock.RockKey'Idle ->
                 StreetRun.Rock.$fEnumRockKey2 } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_$cfromEnum :: StreetRun.Rock.RockKey -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*H>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: StreetRun.Rock.RockKey) ->
                 case a of wild { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.I# 0# }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_$cpred ::
    StreetRun.Rock.RockKey -> StreetRun.Rock.RockKey
  {- Arity: 1, Strictness: <B,1*H>x,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: StreetRun.Rock.RockKey) ->
                 case a of wild { StreetRun.Rock.RockKey'Idle ->
                 StreetRun.Rock.$fEnumRockKey4 }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_$csucc ::
    StreetRun.Rock.RockKey -> StreetRun.Rock.RockKey
  {- Arity: 1, Strictness: <B,1*H>x,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: StreetRun.Rock.RockKey) ->
                 case a of wild { StreetRun.Rock.RockKey'Idle ->
                 StreetRun.Rock.$fEnumRockKey5 }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_$ctoEnum :: GHC.Types.Int -> StreetRun.Rock.RockKey
  {- Arity: 1, Strictness: <S(S),1*U(U)>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: GHC.Types.Int) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Rock.$w$ctoEnum ww1 }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_go :: GHC.Prim.Int# -> [StreetRun.Rock.RockKey]
  {- Arity: 1, Strictness: <L,U>m2 -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_go1 :: GHC.Prim.Int# -> [StreetRun.Rock.RockKey]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2 -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEnumRockKey_go_up :: GHC.Prim.Int# -> [StreetRun.Rock.RockKey]
  {- Arity: 1, Strictness: <S,U>m2 -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEqRockKey :: GHC.Classes.Eq StreetRun.Rock.RockKey
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Rock.RockKey
                  StreetRun.Rock.$fEqRockKey_$c==
                  StreetRun.Rock.$fEqRockKey_$c/= -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEqRockKey_$c/= ::
    StreetRun.Rock.RockKey -> StreetRun.Rock.RockKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x :: StreetRun.Rock.RockKey) (y :: StreetRun.Rock.RockKey) ->
                 case x of wild { StreetRun.Rock.RockKey'Idle ->
                 case y of wild1 { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.False } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fEqRockKey_$c== ::
    StreetRun.Rock.RockKey -> StreetRun.Rock.RockKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: StreetRun.Rock.RockKey)
                   (ds1 :: StreetRun.Rock.RockKey) ->
                 case ds of wild { StreetRun.Rock.RockKey'Idle ->
                 case ds1 of wild1 { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.True } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fKeyNameRockKey :: Animate.KeyName StreetRun.Rock.RockKey
  DFunId
  {- Arity: 1, Strictness: <S,1*H>, Inline: (sat-args=0),
     Unfolding: InlineRule (0, False, True)
                StreetRun.Rock.rockKey'keyName
                  `cast`
                (Sym (Animate.N:KeyName[0] <StreetRun.Rock.RockKey>_N)) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fOrdRockKey :: GHC.Classes.Ord StreetRun.Rock.RockKey
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Rock.RockKey
                  StreetRun.Rock.$fEqRockKey
                  StreetRun.Rock.$fOrdRockKey_$ccompare
                  StreetRun.Rock.$fOrdRockKey_$c<
                  StreetRun.Rock.$fOrdRockKey_$c<=
                  StreetRun.Rock.$fOrdRockKey_$c>
                  StreetRun.Rock.$fEqRockKey_$c==
                  StreetRun.Rock.$fOrdRockKey_$cmax
                  StreetRun.Rock.$fOrdRockKey_$cmax -}
d3104c5c60b387ae34f8abd0d177eec8
  $fOrdRockKey_$c< ::
    StreetRun.Rock.RockKey -> StreetRun.Rock.RockKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: StreetRun.Rock.RockKey) (b :: StreetRun.Rock.RockKey) ->
                 case a of wild { StreetRun.Rock.RockKey'Idle ->
                 case b of wild1 { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.False } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fOrdRockKey_$c<= ::
    StreetRun.Rock.RockKey -> StreetRun.Rock.RockKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: StreetRun.Rock.RockKey) (b :: StreetRun.Rock.RockKey) ->
                 case b of wild { StreetRun.Rock.RockKey'Idle ->
                 case a of wild1 { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.True } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fOrdRockKey_$c> ::
    StreetRun.Rock.RockKey -> StreetRun.Rock.RockKey -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: StreetRun.Rock.RockKey) (b :: StreetRun.Rock.RockKey) ->
                 case b of wild { StreetRun.Rock.RockKey'Idle ->
                 case a of wild1 { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.False } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fOrdRockKey_$ccompare ::
    StreetRun.Rock.RockKey
    -> StreetRun.Rock.RockKey -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*H><S,1*H>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: StreetRun.Rock.RockKey) (b :: StreetRun.Rock.RockKey) ->
                 case a of wild { StreetRun.Rock.RockKey'Idle ->
                 case b of wild1 { StreetRun.Rock.RockKey'Idle ->
                 GHC.Types.EQ } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fOrdRockKey_$cmax ::
    StreetRun.Rock.RockKey
    -> StreetRun.Rock.RockKey -> StreetRun.Rock.RockKey
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U()><S,1*H>m,
     Unfolding: InlineRule (2, True, False)
                (\ (x :: StreetRun.Rock.RockKey) (y :: StreetRun.Rock.RockKey) ->
                 case y of wild { StreetRun.Rock.RockKey'Idle -> x }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fShowRockKey :: GHC.Show.Show StreetRun.Rock.RockKey
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Rock.RockKey
                  StreetRun.Rock.$fShowRockKey_$cshowsPrec
                  StreetRun.Rock.$fShowRockKey_$cshow
                  StreetRun.Rock.$fShowRockKey_$cshowList -}
d3104c5c60b387ae34f8abd0d177eec8
  $fShowRockKey1 :: StreetRun.Rock.RockKey -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*H><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: StreetRun.Rock.RockKey) (eta :: GHC.Base.String) ->
                 case ds of wild { StreetRun.Rock.RockKey'Idle ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      StreetRun.Rock.$fShowRockKey2)
                   eta }) -}
41e24ffe497bc3ff5fd63e71408d2cd7
  $fShowRockKey2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Rock.$fShowRockKey3) -}
1a2d1a147eff62be56778e1acfaca541
  $fShowRockKey3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RockKey'Idle"#) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fShowRockKey_$cshow :: StreetRun.Rock.RockKey -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Rock.RockKey) ->
                 case x of wild { StreetRun.Rock.RockKey'Idle ->
                 StreetRun.Rock.$fShowRockKey2 }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fShowRockKey_$cshowList ::
    [StreetRun.Rock.RockKey] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Rock.RockKey]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Rock.RockKey
                   StreetRun.Rock.$fShowRockKey1
                   ls
                   s) -}
d3104c5c60b387ae34f8abd0d177eec8
  $fShowRockKey_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Rock.RockKey -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*H><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (ds1 :: StreetRun.Rock.RockKey)
                   (eta :: GHC.Base.String) ->
                 case ds1 of wild { StreetRun.Rock.RockKey'Idle ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n
                      StreetRun.Rock.$fShowRockKey2)
                   eta }) -}
f605bb55175dd2b091bd89ace0325d9c
  $tc'RockKey'Idle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14834333286519476398##
                   6384370025603622084##
                   StreetRun.Rock.$trModule
                   StreetRun.Rock.$tc'RockKey'Idle2
                   0#
                   StreetRun.Rock.$tc'RockKey'Idle1) -}
5bc0c38768ed96865aae93f916168875
  $tc'RockKey'Idle1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
25e8f192472d36ea3248f9453a5b4b65
  $tc'RockKey'Idle2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Rock.$tc'RockKey'Idle3) -}
ffa2bc7105cf5b7ad315d017432ea40f
  $tc'RockKey'Idle3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'RockKey'Idle"#) -}
7cc321f911b5dd49255fc2b642f529b2
  $tcRockKey :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   6612142629054933408##
                   2733665651286208545##
                   StreetRun.Rock.$trModule
                   StreetRun.Rock.$tcRockKey1
                   0#
                   GHC.Types.krep$*) -}
edb64b0a7f5ac2f6d0746433aa86ee4f
  $tcRockKey1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Rock.$tcRockKey2) -}
b7762adcf2c4d25fa653a43881295ed1
  $tcRockKey2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("RockKey"#) -}
a59a6acc1ba2310721c9699e9f36bea6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Rock.$trModule3
                   StreetRun.Rock.$trModule1) -}
9cb5b0ba18633c43d87be682832fbf93
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Rock.$trModule2) -}
47ba603d2a7d37b5dffebda54a9bad41
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Rock"#) -}
56d7d0b91fb14e545af1aad6d99905a5
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Rock.$trModule4) -}
668c8a6a46098001a6aea399ff083896
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE"#) -}
d3104c5c60b387ae34f8abd0d177eec8
  $w$ctoEnum :: GHC.Prim.Int# -> StreetRun.Rock.RockKey
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) ->
                 case GHC.Prim.>=# ww 0# of lwild {
                   DEFAULT -> StreetRun.Rock.$wlvl ww
                   1#
                   -> case GHC.Prim.<=# ww 0# of lwild1 {
                        DEFAULT -> StreetRun.Rock.$wlvl ww
                        1# -> GHC.Prim.tagToEnum# @ StreetRun.Rock.RockKey ww } }) -}
d3104c5c60b387ae34f8abd0d177eec8
  $wlvl :: GHC.Prim.Int# -> StreetRun.Rock.RockKey
  {- Arity: 1, Strictness: <B,U>x, Inline: [2] -}
d3104c5c60b387ae34f8abd0d177eec8
  data RockKey = RockKey'Idle
d3104c5c60b387ae34f8abd0d177eec8
  rockKey'keyName ::
    StreetRun.Rock.RockKey -> Data.Text.Internal.Text
  {- Arity: 1, Strictness: <S,1*H>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.Rock.RockKey) ->
                 case ds of wild { StreetRun.Rock.RockKey'Idle ->
                 StreetRun.Rock.rockKey'keyName1 }) -}
48813a9c582837dd798b322c335e8999
  rockKey'keyName1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   StreetRun.Rock.rockKey'keyName2) -}
8df463c96a36b0e2a7ceb151ae8c034e
  rockKey'keyName2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Idle"#) -}
instance GHC.Enum.Bounded [StreetRun.Rock.RockKey]
  = StreetRun.Rock.$fBoundedRockKey
instance GHC.Enum.Enum [StreetRun.Rock.RockKey]
  = StreetRun.Rock.$fEnumRockKey
instance GHC.Classes.Eq [StreetRun.Rock.RockKey]
  = StreetRun.Rock.$fEqRockKey
instance Animate.KeyName [StreetRun.Rock.RockKey]
  = StreetRun.Rock.$fKeyNameRockKey
instance GHC.Classes.Ord [StreetRun.Rock.RockKey]
  = StreetRun.Rock.$fOrdRockKey
instance GHC.Show.Show [StreetRun.Rock.RockKey]
  = StreetRun.Rock.$fShowRockKey
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

