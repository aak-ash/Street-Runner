
==================== FINAL INTERFACE ====================
2019-04-26 14:29:02.065999851 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Step 8064
  interface hash: 7162222fcdc8fe862c16506ac8ff24b5
  ABI hash: 290ae331db595dd4cf6d5e1e70227106
  export-list hash: 719fef8fe6a2dea83d42318f70df48fb
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Step.smash
  StreetRun.Step.Step{StreetRun.Step.Step'Change StreetRun.Step.Step'Sustain}
module dependencies:
package dependencies: base-4.12.0.0 ghc-prim-0.5.3
                      integer-gmp-1.0.2.0
orphans: base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: base-4.12.0.0:Control.Applicative
                         base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity base-4.12.0.0:Data.Monoid
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:GHC.Generics
                         base-4.12.0.0:GHC.IO.Exception
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
daa3ab940f53a2ea3c69c832d1d2d582
  $fEqStep ::
    GHC.Classes.Eq a => GHC.Classes.Eq (StreetRun.Step.Step a)
  DFunId
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(C(C1(U)),A)>m,
     Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Classes.Eq a).
                  @ (StreetRun.Step.Step a)
                  (StreetRun.Step.$fEqStep_$c== @ a v)
                  (StreetRun.Step.$fEqStep_$c/= @ a v) -}
daa3ab940f53a2ea3c69c832d1d2d582
  $fEqStep_$c/= ::
    GHC.Classes.Eq a =>
    StreetRun.Step.Step a -> StreetRun.Step.Step a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (3, False, False)
                (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (x :: StreetRun.Step.Step a)
                   (y :: StreetRun.Step.Step a) ->
                 case StreetRun.Step.$fEqStep_$c== @ a $dEq x y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
daa3ab940f53a2ea3c69c832d1d2d582
  $fEqStep_$c== ::
    GHC.Classes.Eq a =>
    StreetRun.Step.Step a -> StreetRun.Step.Step a -> GHC.Types.Bool
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U(C(C1(U)),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ a
                   ($dEq :: GHC.Classes.Eq a)
                   (ds :: StreetRun.Step.Step a)
                   (ds1 :: StreetRun.Step.Step a) ->
                 case ds of wild {
                   StreetRun.Step.Step'Change a1 a2
                   -> case ds1 of wild1 {
                        StreetRun.Step.Step'Change b1 b2
                        -> case GHC.Classes.== @ a $dEq a1 b1 of wild2 {
                             GHC.Types.False -> GHC.Types.False
                             GHC.Types.True -> GHC.Classes.== @ a $dEq a2 b2 }
                        StreetRun.Step.Step'Sustain ipv -> GHC.Types.False }
                   StreetRun.Step.Step'Sustain a1
                   -> case ds1 of wild1 {
                        StreetRun.Step.Step'Change ipv ipv1 -> GHC.Types.False
                        StreetRun.Step.Step'Sustain b1
                        -> GHC.Classes.== @ a $dEq a1 b1 } }) -}
daa3ab940f53a2ea3c69c832d1d2d582
  $fShowStep ::
    GHC.Show.Show a => GHC.Show.Show (StreetRun.Step.Step a)
  DFunId
  {- Arity: 1, Strictness: <L,U(C(C1(C(U))),A,A)>m, Inline: CONLIKE,
     Unfolding: DFun: @ a (v :: GHC.Show.Show a).
                  @ (StreetRun.Step.Step a)
                  (StreetRun.Step.$fShowStep_$cshowsPrec @ a v)
                  (StreetRun.Step.$fShowStep_$cshow @ a v)
                  (StreetRun.Step.$fShowStep_$cshowList @ a v) -}
4953da1092cd041ff355cc94072d5498
  $fShowStep1 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
2dccb398589802fe296d9ab4c544514f
  $fShowStep2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Step.$fShowStep3) -}
b406a02c4a8401d36354942cfb4aa961
  $fShowStep3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Step'Sustain "#) -}
b8a8de32f69b79c3d34b43e3b69c1ce9
  $fShowStep4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Step'Change "#) -}
4788a81d48fb1f99433ffadc550e1c4d
  $fShowStep5 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
daa3ab940f53a2ea3c69c832d1d2d582
  $fShowStep_$cshow ::
    GHC.Show.Show a => StreetRun.Step.Step a -> GHC.Base.String
  {- Arity: 2, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dShow :: GHC.Show.Show a) (x :: StreetRun.Step.Step a) ->
                 StreetRun.Step.$fShowStep_$cshowsPrec
                   @ a
                   $dShow
                   StreetRun.Step.$fShowStep1
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
daa3ab940f53a2ea3c69c832d1d2d582
  $fShowStep_$cshowList ::
    GHC.Show.Show a => [StreetRun.Step.Step a] -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,1*U><L,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   ($dShow :: GHC.Show.Show a)
                   (ls :: [StreetRun.Step.Step a])
                   (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ (StreetRun.Step.Step a)
                   (StreetRun.Step.$fShowStep_$cshowsPrec
                      @ a
                      $dShow
                      StreetRun.Step.$fShowStep1)
                   ls
                   s) -}
daa3ab940f53a2ea3c69c832d1d2d582
  $fShowStep_$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Types.Int -> StreetRun.Step.Step a -> GHC.Show.ShowS
  {- Arity: 3,
     Strictness: <L,U(C(C1(C(U))),A,A)><S(S),1*U(U)><S,1*U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: GHC.Show.Show a)
                   (w1 :: GHC.Types.Int)
                   (w2 :: StreetRun.Step.Step a) ->
                 case w1 of ww { GHC.Types.I# ww1 ->
                 StreetRun.Step.$w$cshowsPrec @ a w ww1 w2 }) -}
bd2922794ce8a82b697da3bcd342aa7d
  $tc'Step'Change :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18323273018819489706##
                   14119293396343937787##
                   StreetRun.Step.$trModule
                   StreetRun.Step.$tc'Step'Change2
                   1#
                   StreetRun.Step.$tc'Step'Change1) -}
da4a600d20c43fd107ccbbaffb424a87
  $tc'Step'Change1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8312d4c774b6e1eac2607926fec68369
  $tc'Step'Change2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Step.$tc'Step'Change3) -}
cb39dc62d250fcd478be406de06fd975
  $tc'Step'Change3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Step'Change"#) -}
bf92ced528ef91c6aa97a1929c4b1dfa
  $tc'Step'Sustain :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5305582004940116303##
                   7866573803894486937##
                   StreetRun.Step.$trModule
                   StreetRun.Step.$tc'Step'Sustain2
                   1#
                   StreetRun.Step.$tc'Step'Sustain1) -}
0d33177284f863cb80200d2c7907cd9d
  $tc'Step'Sustain1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
fde7c72f9b152cbeec8dd83a875db3d3
  $tc'Step'Sustain2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Step.$tc'Step'Sustain3) -}
723e8a62bac6fd840fa9dee1fd861671
  $tc'Step'Sustain3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Step'Sustain"#) -}
73404bc451387ddabd32222094619804
  $tcStep :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8526834537948272189##
                   7968923498305901596##
                   StreetRun.Step.$trModule
                   StreetRun.Step.$tcStep1
                   0#
                   GHC.Types.krep$*Arr*) -}
f77c6d74c05a0223f438cbb83c75759f
  $tcStep1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Step.$tcStep2) -}
1ec1dabcb9cc973a94264cb25feb4809
  $tcStep2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Step"#) -}
0d54606c6b77feadae33d8cce01e9bf6
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Step.$trModule3
                   StreetRun.Step.$trModule1) -}
959008fa6b2838d8ee377b5ea5212108
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Step.$trModule2) -}
64a15da9e174584e4ebc5403950102df
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Step"#) -}
9fbc471b77ca92c1c86939f872fa96cd
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Step.$trModule4) -}
6af66ca04ab724ba3bba3b5bd91a9b4f
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
daa3ab940f53a2ea3c69c832d1d2d582
  $w$cshowsPrec ::
    GHC.Show.Show a =>
    GHC.Prim.Int# -> StreetRun.Step.Step a -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,U(C(C1(C(U))),A,A)><S,U><S,1*U>,
     Inline: [2],
     Unfolding: (\ @ a
                   (w :: GHC.Show.Show a)
                   (ww :: GHC.Prim.Int#)
                   (w1 :: StreetRun.Step.Step a) ->
                 case w1 of wild {
                   StreetRun.Step.Step'Change b1 b2
                   -> let {
                        f :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w StreetRun.Step.$fShowStep5 b1
                      } in
                      let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w StreetRun.Step.$fShowStep5 b2
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.CString.unpackAppendCString#
                             StreetRun.Step.$fShowStep4
                             (f (GHC.Types.: @ GHC.Types.Char GHC.Show.showSpace1 (g x)))
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.CString.unpackAppendCString#
                                StreetRun.Step.$fShowStep4
                                (f (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.showSpace1
                                      (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))))) }
                   StreetRun.Step.Step'Sustain b1
                   -> let {
                        g :: GHC.Base.String -> GHC.Base.String
                        = GHC.Show.showsPrec @ a w StreetRun.Step.$fShowStep5 b1
                      } in
                      case GHC.Prim.>=# ww 11# of lwild {
                        DEFAULT
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Base.++ @ GHC.Types.Char StreetRun.Step.$fShowStep2 (g x)
                        1#
                        -> \ (x :: GHC.Base.String) ->
                           GHC.Types.:
                             @ GHC.Types.Char
                             GHC.Show.$fShow(,)4
                             (GHC.Base.++
                                @ GHC.Types.Char
                                StreetRun.Step.$fShowStep2
                                (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) } }) -}
daa3ab940f53a2ea3c69c832d1d2d582
  data Step a = Step'Change a a | Step'Sustain a
05906d7c152d8c605e26773ad8eebc8e
  smash :: StreetRun.Step.Step a -> a
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: StreetRun.Step.Step a) ->
                 case ds of wild {
                   StreetRun.Step.Step'Change ds1 a1 -> a1
                   StreetRun.Step.Step'Sustain a1 -> a1 }) -}
instance GHC.Classes.Eq [StreetRun.Step.Step]
  = StreetRun.Step.$fEqStep
instance GHC.Show.Show [StreetRun.Step.Step]
  = StreetRun.Step.$fShowStep
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

