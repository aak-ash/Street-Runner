
==================== FINAL INTERFACE ====================
2019-04-26 14:29:09.454056918 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.GameOver 8064
  interface hash: 01ee372a11d207480219b2582f152ef7
  ABI hash: 12187b3087d1b20ccc00d910b5341a41
  export-list hash: ce700aed10886dc3750aae9e41b16e0b
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.GameOver.drawGameOver
  StreetRun.GameOver.gameOverStep'
  StreetRun.GameOver.updateGameOver
  StreetRun.GameOver.GameOver{StreetRun.GameOver.gameOverStep}
module dependencies: StreetRun.Assets StreetRun.Assets_1
                     StreetRun.Assets_2 StreetRun.Audio StreetRun.CFL StreetRun.Camera
                     StreetRun.Common StreetRun.Config StreetRun.Font
                     StreetRun.Font_functions StreetRun.HUD StreetRun.Hurdle
                     StreetRun.Hurdle_1 StreetRun.Input StreetRun.Load StreetRun.Out
                     StreetRun.Out_func StreetRun.Physics StreetRun.Picture
                     StreetRun.Play StreetRun.Quake StreetRun.Quake_BackStreet
                     StreetRun.Quake_Building StreetRun.Quake_Grass
                     StreetRun.Quake_Street StreetRun.Renderer StreetRun.Renderer_func_1
                     StreetRun.Renderer_func_2 StreetRun.Runner StreetRun.Runner_func_1
                     StreetRun.Runner_func_2 StreetRun.SDLLayer StreetRun.Scenario
                     StreetRun.Scene StreetRun.Sfx StreetRun.Snag
                     StreetRun.Sound_effects StreetRun.State StreetRun.Step
                     StreetRun.Tag StreetRun.Tag_func StreetRun.Types StreetRun.Work
                     StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Monad 728c9526f38369d3ad3bf7824b06e87e
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  key-state-0.2.0:KeyState f505d200ccd373546afa68666240df7e
import  -/  lens-4.17:Control.Lens 02c38743366e4d3d260b71bddfddea13
import  -/  lens-4.17:Control.Lens.Getter 18b0523ecb5ed8cc7fa826ffd942da08
import  -/  lens-4.17:Control.Lens.Setter 7961fe073f63bb6246bee7094d4bca17
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  StreetRun.Common ec7a24ddc13a89793e354234ea8b6a8f
  exports: 5bf7e8807e04e9b7e18cf5c3f75b1f5b
  HasCommonVars 78e2982dec7ad30766f890d3421b5154
import  -/  StreetRun.HUD 33ed45f0ee969474895a8614650a2f1b
  exports: 7832e9cac015a5203f08d8c52ac8b9ae
  HUD 910cd3343cd00cd8902c09529859c02a
import  -/  StreetRun.Input 2b2882bb9ccf0deac02d72ccd2af9474
  exports: 794b8afcff1485016b9c41551ca5bab1
  $sel:iSpace:Input f50c2ab9e2082623275c9cc57e0e92df
import  -/  StreetRun.Load b854b61e5394a1e0d9cd4b9313a268b0
  exports: 4cddd7fe752b7b923c34c3b71e404029
  HasInput ba70c797691329d224bd192290501ef6
  getInput 191f425c4d27320b241e01dc8844e1d0
import  -/  StreetRun.Out 821100932c472ef91d1cc00ebdbd32fc
  exports: f97bdbd80a695ead6b4ee17ec380e5cf
  $sel:govFadeout:GameOverVars 2891ba2842a669b0d757efb60792393f
  $sel:govSpaceFlashing:GameOverVars 2891ba2842a669b0d757efb60792393f
import  -/  StreetRun.Out_func a900baa9f9b77c1879583d44ab2f3b10
  exports: 7986cfba44c33c394d69d1f3c9409685
  HasGameOverVars 35cf1815c5f5f54bc448623ef9f0aa92
  gameOverShowPressSpace 0198913a811b3a8e45d5a84daba91f11
  gameOverVars fa3bf9f247349945f102e8a5e34aad1e
  stepGameOverVars ecb7fb81f15d1e9ab81b45a9d994f63e
import  -/  StreetRun.Picture b3a434655916c9bd40f5e83b30c22973
  exports: 3a912206f39fec45a542e7a9b7b90546
  CameraControl 4fbff540ba209f3d818863d970cdf797
import  -/  StreetRun.Play 5e1759185369f3a2fb6cea30997a29a1
  exports: a72549fdc40fd458e99f01bb54a263bc
  drawPlay 2d161bb4ba69e327c7b99d0e8e3033b6
import  -/  StreetRun.Renderer 0519d22b921b8437012069e63a6f4fa6
  exports: 3ce23641af82250faf4b4afd515774b7
  Renderer 718a3d63cec016694ff0c781c86acdfc
  drawBlackOverlay 29c368fc18ff497abbe85873a4b83a08
  drawGameOverText 1a879ad36ee64d86a944a23e6cbff147
  drawPressSpaceText 51c1f10d647b7f285afd74f79d59bcb8
import  -/  StreetRun.Renderer_func_1 a9aeb84e666161fb4390884165deb075
  exports: 6a0ad2bf2ffcb5fd6ca93a687f153110
import  -/  StreetRun.Renderer_func_2 8e1829777a16c2ecd350a0a2077893e3
  exports: e72c1bc9f19fb36af370b60f395645dd
import  -/  StreetRun.Scenario 354a54748ba84a3c008f8f16b2acd94c
  Scene'Title 63ef21e09609c128de8ab51cdf5c195a
import  -/  StreetRun.Scene 77553ca4972702fc9ed9a930428c3b84
  exports: e5cf8e79f9eac931695eddae8a179fc0
  SceneManager 8a74b8a4c9e990537b0f35c67b38d826
  toScene d29769eae987e04902c8094df1bb527e
import  -/  StreetRun.Work 84c49625e5300d184b6b74d71a119d1f
  exports: be18f47a77094179ee18b27ca088c03e
import  -/  StreetRun.Work_func e74f2daf9d4710767ad8c2ada174399d
  exports: c79cba614ebcff5946e13d50725530aa
  HasPlayVars 9cbc89508257ef44e1f754bf3878ef7f
390442f596fa617f78d703e57d22ac00
  $tc'C:GameOver :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17387549524781801767##
                   16802309238319039806##
                   StreetRun.GameOver.$trModule
                   StreetRun.GameOver.$tc'C:GameOver2
                   1#
                   StreetRun.GameOver.$tc'C:GameOver1) -}
6c016fc105fa87864d7830e0c4872450
  $tc'C:GameOver1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6fc9e945375e9cf1f13b24e82ae6c98e
  $tc'C:GameOver2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.GameOver.$tc'C:GameOver3) -}
c3c482c2b5b79cd6be6ff817f55a5bba
  $tc'C:GameOver3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'C:GameOver"#) -}
661a3935f3afe98a4569ac9fee7b779d
  $tcGameOver :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10373029020534949405##
                   16226518020270843847##
                   StreetRun.GameOver.$trModule
                   StreetRun.GameOver.$tcGameOver2
                   0#
                   StreetRun.GameOver.$tcGameOver1) -}
c580b7a32e1fa9f134122e3cb335c7ab
  $tcGameOver1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d2af253db69938e9594b8f462d346289
  $tcGameOver2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.GameOver.$tcGameOver3) -}
6fc5878628044d8b3d293539f0beba12
  $tcGameOver3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("GameOver"#) -}
825e750817410842d566b8f441bdec43
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.GameOver.$trModule3
                   StreetRun.GameOver.$trModule1) -}
98f058eaf4f5bdb34929572ae9b564c9
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.GameOver.$trModule2) -}
a4da129d696b36bd42c3cb3171cb4217
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.GameOver"#) -}
e47320a8e39f49ca88b5d6c16f7712c4
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.GameOver.$trModule4) -}
328126ce3aa6025fc7cf6aa385424869
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
895f5e47c418a1d526acacea45b45a66
  $wdrawGameOver ::
    GHC.Base.Applicative m =>
    (forall a b. m a -> (a -> m b) -> m b)
    -> (forall a b. m a -> m b -> m b)
    -> (StreetRun.Types.Percent -> m ())
    -> ((GHC.Types.Int, GHC.Types.Int) -> m ())
    -> ((GHC.Types.Int, GHC.Types.Int) -> m ())
    -> (Control.Monad.State.Class.MonadState s m,
        StreetRun.Out_func.HasGameOverVars s) =>
       m ()
  {- Arity: 8,
     Strictness: <L,1*U(A,1*C1(U),A,A,A,A)><C(C(S)),1*C1(C1(U))><L,C(C1(U))><L,C(U)><L,1*C1(U)><L,1*C1(U)><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: (\ @ m :: * -> *
                   @ s
                   (ww :: GHC.Base.Applicative m)
                   (ww1 :: forall a b. m a -> (a -> m b) -> m b)
                   (ww2 :: forall a b. m a -> m b -> m b)
                   (ww3 :: StreetRun.Types.Percent -> m ())
                   (ww4 :: (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (ww5 :: (GHC.Types.Int, GHC.Types.Int) -> m ())
                   (w :: Control.Monad.State.Class.MonadState s m)
                   (w1 :: StreetRun.Out_func.HasGameOverVars s) ->
                 let {
                   lvl :: m () = ww4 StreetRun.GameOver.drawGameOver5
                 } in
                 let {
                   lvl1 :: m () = ww5 StreetRun.GameOver.drawGameOver2
                 } in
                 let {
                   lvl2 :: m () = GHC.Base.pure @ m ww @ () GHC.Tuple.()
                 } in
                 ww1
                   @ StreetRun.Out.GameOverVars
                   @ ()
                   (case w of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                    case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                    let {
                      w2 :: s -> Data.Functor.Const.Const StreetRun.Out.GameOverVars s
                      = w1 `cast` (StreetRun.Out_func.N:HasGameOverVars[0] <s>_N)
                          @ (Data.Functor.Const.Const StreetRun.Out.GameOverVars)
                          (Data.Functor.Const.$fFunctorConst @ StreetRun.Out.GameOverVars)
                          StreetRun.GameOver.drawGameOver1
                            `cast`
                          (<StreetRun.Out.GameOverVars>_R
                           ->_R Sym (Data.Functor.Const.N:Const[0]
                                         <*>_N
                                         <StreetRun.Out.GameOverVars>_R
                                         <StreetRun.Out.GameOverVars>_P))
                    } in
                    ww13
                      @ s
                      @ StreetRun.Out.GameOverVars
                      ww8
                      (\ (s1 :: s) ->
                       ww15
                         @ StreetRun.Out.GameOverVars
                         (w2 s1)
                           `cast`
                         (Data.Functor.Const.N:Const[0]
                              <*>_N <StreetRun.Out.GameOverVars>_R <s>_P)) } })
                   (\ (gov :: StreetRun.Out.GameOverVars) ->
                    ww2
                      @ ()
                      @ ()
                      (ww3
                         (case gov of wild { StreetRun.Out.GameOverVars ds1 ds2 -> ds1 }))
                      (ww2
                         @ ()
                         @ ()
                         lvl
                         (case gov of wild { StreetRun.Out.GameOverVars ds1 ds2 ->
                          case ds2
                                 `cast`
                               (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# (GHC.Prim.sinFloat# x) 0.0# of lwild {
                            DEFAULT -> lvl2 1# -> lvl1 } } })))) -}
6b32bc14a3ec09976eae3432efe32b56
  $wupdateGameOver ::
    StreetRun.Out_func.HasGameOverVars s =>
    (forall a. (s -> (a, s)) -> m a) -> m ()
  {- Arity: 2, Strictness: <L,1*C1(C1(C(U)))><C(S),1*C1(U)>,
     Inline: [2],
     Unfolding: (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Out_func.HasGameOverVars s)
                   (ww :: forall a. (s -> (a, s)) -> m a) ->
                 let {
                   f :: s -> Data.Functor.Identity.Identity s
                   = w `cast` (StreetRun.Out_func.N:HasGameOverVars[0] <s>_N)
                       @ Data.Functor.Identity.Identity
                       Data.Functor.Identity.$fFunctorIdentity
                       StreetRun.Out_func.stepGameOverVars
                         `cast`
                       (<StreetRun.Out.GameOverVars>_R
                        ->_R Sym (Data.Functor.Identity.N:Identity[0]
                                      <StreetRun.Out.GameOverVars>_R))
                 } in
                 ww
                   @ ()
                   (\ (s1 :: s) ->
                    (GHC.Tuple.(),
                     (f s1) `cast` (Data.Functor.Identity.N:Identity[0] <s>_R)))) -}
27fb9b867d37685f227f456c10076ba6
  class GHC.Base.Monad m => GameOver (m :: * -> *) where
    gameOverStep :: m ()
    {-# MINIMAL gameOverStep #-}
00ec1aaa33ae286dd9e81fcd3b211581
  drawGameOver ::
    (StreetRun.Renderer.Renderer m, StreetRun.Picture.CameraControl m,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Out_func.HasGameOverVars s) =>
    m ()
  {- Arity: 4,
     Strictness: <S(S(LC(C(S))LLL)LLLLLLLLLLLLLLLLLLLLLLLLL),1*U(1*U(1*U(A,1*C1(U),A,A,A,A),1*C1(C1(U)),C(C1(U)),A,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,C(U),A,A,1*C1(U),1*C1(U),A,A,A,A)><L,A><L,1*U(1*U(A,1*C1(C1(U)),A,C(U),A),U,A,A)><L,1*C1(C1(C(U)))>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   @ s
                   (w :: StreetRun.Renderer.Renderer m)
                   (w1 :: StreetRun.Picture.CameraControl m)
                   (w2 :: Control.Monad.State.Class.MonadState s m)
                   (w3 :: StreetRun.Out_func.HasGameOverVars s) ->
                 case w of ww { StreetRun.Renderer.C:Renderer ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ->
                 case ww1 of ww27 { GHC.Base.C:Monad ww28 ww29 ww30 ww31 ww32 ->
                 StreetRun.GameOver.$wdrawGameOver
                   @ m
                   @ s
                   ww28
                   ww29
                   ww30
                   ww18
                   ww21
                   ww22
                   w2
                   w3 } }) -}
e3c743b3d79fd4c9c4920d8e03a97020
  drawGameOver1 ::
    StreetRun.Out.GameOverVars -> StreetRun.Out.GameOverVars
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U)>m,
     Unfolding: InlineRule (1, True, True)
                (\ (v :: StreetRun.Out.GameOverVars) -> v) -}
ee8eff7003115f5b87d2556165531e0b
  drawGameOver2 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((StreetRun.GameOver.drawGameOver4,
                  StreetRun.GameOver.drawGameOver3)) -}
b346c6f9e985f6dafdc1a6a3ce52d627
  drawGameOver3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 500#) -}
1342acae8229353a572e139f1169389f
  drawGameOver4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 550#) -}
24f626733856ed40b0fff5fbd1924cb8
  drawGameOver5 :: (GHC.Types.Int, GHC.Types.Int)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((StreetRun.GameOver.drawGameOver7,
                  StreetRun.GameOver.drawGameOver6)) -}
31707df7f738b34135c423b93aaea1cd
  drawGameOver6 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 300#) -}
de5320c313163a195b4a003f0d785b64
  drawGameOver7 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 470#) -}
f6108ac267de3f4b111bebf77ee34397
  gameOverStep' ::
    (StreetRun.Work_func.HasPlayVars s,
     StreetRun.Common.HasCommonVars s,
     StreetRun.Out_func.HasGameOverVars s,
     Control.Monad.State.Class.MonadState s m,
     StreetRun.Scene.SceneManager m, StreetRun.Load.HasInput m,
     StreetRun.Renderer.Renderer m, StreetRun.Picture.CameraControl m,
     StreetRun.HUD.HUD m) =>
    m ()
  {- Arity: 9,
     Strictness: <L,1*C1(C1(C(U)))><L,1*C1(C1(C(U)))><L,C(C1(C(U)))><S(S(LC(C(S))LLL)LLL),U(U(U(A,C(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),U,A,1*C1(U))><L,1*U(A,1*C1(U))><L,1*U(A,A,A,1*U)><L,U(U(1*U(A,1*C1(U),A,A,A,A),C(C1(U)),C(C1(U)),C(U),A),A,A,U,U,U,U,U,U,C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(C1(U)),C(U),C(U),C(U),A,A,1*C1(U),1*C1(U),A,A,A,A)><L,A><L,U(A,U,U,U)>,
     Unfolding: (\ @ s
                   @ m :: * -> *
                   ($dHasPlayVars :: StreetRun.Work_func.HasPlayVars s)
                   ($dHasCommonVars :: StreetRun.Common.HasCommonVars s)
                   ($dHasGameOverVars :: StreetRun.Out_func.HasGameOverVars s)
                   ($dMonadState :: Control.Monad.State.Class.MonadState s m)
                   ($dSceneManager :: StreetRun.Scene.SceneManager m)
                   ($dHasInput :: StreetRun.Load.HasInput m)
                   ($dRenderer :: StreetRun.Renderer.Renderer m)
                   ($dCameraControl :: StreetRun.Picture.CameraControl m)
                   ($dHUD :: StreetRun.HUD.HUD m) ->
                 case Control.Monad.State.Class.$p1MonadState
                        @ s
                        @ m
                        $dMonadState of ww { GHC.Base.C:Monad ww1 ww2 ww3 ww4 ww5 ->
                 let {
                   lvl :: m ()
                   = case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                     StreetRun.GameOver.$wupdateGameOver
                       @ s
                       @ m
                       $dHasGameOverVars
                       ww10 }
                 } in
                 let {
                   lvl1 :: m ()
                   = case $dMonadState of ww6 { Control.Monad.State.Class.C:MonadState ww7 ww8 ww9 ww10 ->
                     case ww7 of ww11 { GHC.Base.C:Monad ww12 ww13 ww14 ww15 ww16 ->
                     StreetRun.Play.$wdrawPlay
                       @ s
                       @ m
                       $dHasPlayVars
                       $dHasCommonVars
                       ww12
                       ww13
                       ww14
                       ww15
                       ww8
                       $dRenderer
                       $dHUD } }
                 } in
                 let {
                   lvl2 :: m ()
                   = case $dRenderer of ww6 { StreetRun.Renderer.C:Renderer ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ->
                     case ww7 of ww33 { GHC.Base.C:Monad ww34 ww35 ww36 ww37 ww38 ->
                     StreetRun.GameOver.$wdrawGameOver
                       @ m
                       @ s
                       ww34
                       ww35
                       ww36
                       ww24
                       ww27
                       ww28
                       $dMonadState
                       $dHasGameOverVars } }
                 } in
                 let {
                   lvl3 :: m ()
                   = StreetRun.Scene.toScene
                       @ m
                       $dSceneManager
                       StreetRun.Scenario.Scene'Title
                 } in
                 let {
                   lvl4 :: m () = GHC.Base.pure @ m ww1 @ () GHC.Tuple.()
                 } in
                 ww2
                   @ StreetRun.Input.Input
                   @ ()
                   (StreetRun.Load.getInput @ m $dHasInput)
                   (\ (input :: StreetRun.Input.Input) ->
                    ww3
                      @ ()
                      @ ()
                      lvl
                      (ww3
                         @ ()
                         @ ()
                         lvl1
                         (ww3
                            @ ()
                            @ ()
                            lvl2
                            (case input of wild { StreetRun.Input.Input ds1 ds2 ds3 ds4 ds5 ->
                             case ds1 of wild1 { KeyState.KeyState ds7 ds8 ->
                             case ds7 of wild2 {
                               DEFAULT -> lvl4 KeyState.KeyStatus'Pressed -> lvl3 } } })))) }) -}
367815e7c850fd15d57ce0555a76f6fd
  updateGameOver ::
    (StreetRun.Out_func.HasGameOverVars s,
     StreetRun.Work_func.HasPlayVars s,
     Control.Monad.State.Class.MonadState s m) =>
    m ()
  {- Arity: 3,
     Strictness: <L,1*C1(C1(C(U)))><L,A><S(LLLC(S)),1*U(A,A,A,1*C1(U))>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ @ s
                   @ m :: * -> *
                   (w :: StreetRun.Out_func.HasGameOverVars s)
                   (w1 :: StreetRun.Work_func.HasPlayVars s)
                   (w2 :: Control.Monad.State.Class.MonadState s m) ->
                 case w2 of ww { Control.Monad.State.Class.C:MonadState ww1 ww2 ww3 ww4 ->
                 StreetRun.GameOver.$wupdateGameOver @ s @ m w ww4 }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

