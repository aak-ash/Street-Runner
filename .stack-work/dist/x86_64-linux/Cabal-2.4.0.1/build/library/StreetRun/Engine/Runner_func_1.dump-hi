
==================== FINAL INTERFACE ====================
2019-04-25 19:02:30.546106847 UTC

interface street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE:StreetRun.Engine.Runner_func_1 8064
  interface hash: 6ef916ebe20e1ae0931ee9aa3dc61657
  ABI hash: 8253e5a6ca260c245e7a2ffa72783b38
  export-list hash: c4c8b4707d5e6c4bd4834daafe273870
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 23bfc2de71c0e795adcc3e64d97ecb08
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Engine.Runner_func_1.addStocks
  StreetRun.Engine.Runner_func_1.applyHurt
  StreetRun.Engine.Runner_func_1.nextStocks
  StreetRun.Engine.Runner_func_1.showRunner
  StreetRun.Engine.Runner_func_1.stepRunnerAction
  StreetRun.Engine.Runner_func_1.stepRunnerPosition
  StreetRun.Engine.Runner_func_1.stepRunnerState
  StreetRun.Engine.Runner_func_1.stepSpeed
  StreetRun.Engine.Runner_func_1.stepZoom
module dependencies: StreetRun.Engine.Bird StreetRun.Engine.Camera
                     StreetRun.Engine.Frame StreetRun.Engine.Hurdle
                     StreetRun.Engine.Hurdle_1 StreetRun.Engine.Input
                     StreetRun.Engine.Lava StreetRun.Engine.Physics
                     StreetRun.Engine.Rock StreetRun.Engine.Runner
                     StreetRun.Engine.Runner_func_2 StreetRun.Engine.Step
                     StreetRun.Engine.Types
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 deepseq-1.4.4.0
                      distributive-0.6 dlist-0.8.0.6 exceptions-0.10.1 free-5.1
                      ghc-boot-th-8.6.4 ghc-prim-0.5.3 hashable-1.2.7.0
                      integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2 kan-extensions-5.2
                      key-state-0.2.0 lens-4.17 libyaml-0.1.1.0 linear-1.20.8 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17 scientific-0.3.6.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 th-abstraction-0.2.11.0
                      time-1.8.0.2 time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      transformers-base-0.4.5.2 transformers-compat-0.6.2
                      unliftio-core-0.1.2.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.2 yaml-0.11.0.0
orphans: attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         time-1.8.0.2:Data.Time.Clock.TAI
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         reflection-2.1.4:Data.Reflection
         vector-0.12.0.2:Data.Vector.Unboxed stm-2.5.0.0:Control.Monad.STM
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show linear-1.20.8:Linear.Instances
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Plucker linear-1.20.8:Linear.Quaternion
                         linear-1.20.8:Linear.V linear-1.20.8:Linear.V0
                         linear-1.20.8:Linear.V1 linear-1.20.8:Linear.V2
                         linear-1.20.8:Linear.V3 linear-1.20.8:Linear.V4
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  animate-0.7.0:Animate 7c6496232245300f888f7e0dafeb231c
import  -/  base-4.12.0.0:Data.Foldable 5f70351366640f007be66681d2212df8
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Float ccb68fbeaab348f60d11c8132d51af5d
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  key-state-0.2.0:KeyState f505d200ccd373546afa68666240df7e
import  -/  linear-1.20.8:Linear c66c613217f57f0236b62caf498b629a
import  -/  safe-0.3.17:Safe 436789855584374f8b9a2b8b149b8684
import  -/  StreetRun.Engine.Camera 0d08afdec3750fbbdc0418b2617fd227
  exports: 28c5883198ebf4b0d178869e108162bb
import  -/  StreetRun.Engine.Frame 973c95b7bcec2fc48e1076e11ca1bf2d
  exports: 2dfbfe0610e766c48ad204766a6f2079
  frameDeltaSeconds db36ae879b3edc98e864c272550814da
import  -/  StreetRun.Engine.Hurdle 689b972d4e85183a54d17152c35d6caa
  exports: 6f36a0da9da2341b94122a10d2fdf78c
import  -/  StreetRun.Engine.Hurdle_1 5ea3a1a4734e7121c42d6618c17322cc
  exports: acd92b1d86ee6cc7a8f78e2746322600
import  -/  StreetRun.Engine.Input 8ed5dea8c2ff50fb4182cc619bb708e5
  exports: d2ebfd8f5e1fddf8ebe01df47fac8df1
  $sel:iDown:Input 047aef4b5239efc3f65529e526c28bcc
  $sel:iUp:Input 047aef4b5239efc3f65529e526c28bcc
  Input 047aef4b5239efc3f65529e526c28bcc
import  -/  StreetRun.Engine.Physics 52ab0c4d5302ce013ba13455ebad6494
  exports: 354224f4972beeb3405c52a8946cdd1d
import  -/  StreetRun.Engine.Runner 92f0fc10c09bba0933086b352f065d17
  exports: c5bcac04dca39a47a3b45c58ae03f34c
  $sel:dsAction:RunnerState 8a2df4904a878996e6c672adcdcc81e9
  $sel:dsHeight:RunnerState 8a2df4904a878996e6c672adcdcc81e9
  $sel:dsHurt:RunnerState 8a2df4904a878996e6c672adcdcc81e9
  $sel:dsRecover:RunnerState 8a2df4904a878996e6c672adcdcc81e9
  RunnerAction 9c14ca64586513d13cab5286052b5631
  RunnerAction'Duck 5dbbd6ce114baf9981d49d2cd98c0a85
  RunnerAction'Hurt 4bb12bbc4e094a47a25bcbf0033db8e0
  RunnerAction'Jump 57eaf8c81bdad42f5fa3064b465c34b1
  RunnerAction'Move 06e03a75cb90c35379935bbda3ed62fc
  RunnerKey f5b919cb557b82fc77185acb78bdb7da
  RunnerKey'Hurt 47243c05c14cc911e6a13e73564ed9e6
  RunnerKey'Kick 4fc570467d6756ffcc9c54512b5ba399
  RunnerKey'Move 65c7171eaba1c95e241d8ac1c63ee6f6
  RunnerKey'Sneak bbc502d4255d291167c2bd1c2481503e
  RunnerState 588bb11cf527d93152cfb46a586c55c3
  RunnerState 8a2df4904a878996e6c672adcdcc81e9
import  -/  StreetRun.Engine.Runner_func_2 249d756e9edd6a8a7c3b52202950e572
  exports: 995c383ee3232fec9b0d29c45d6d2caa
import  -/  StreetRun.Engine.Step f0a76cdedf79aa392987b0eab7ac5a30
  exports: 906f32750bdb93a941a3267931b38cf3
  Step 0560860f64fae75cc55f99aeeaca40f9
  Step'Change a9ce6619e48d58d60a4e9d58f2859949
  Step'Sustain c5aaf523b154570852d6a31778ba6156
  smash 9de4c9b6b0f72ec60748a2d19bd34d7f
import  -/  StreetRun.Engine.Types 6986db6c9f4d1e9fc0edc9e119b1c392
  exports: c934b5ae3d6a2dfd0319fd3b47efce61
  Animations d6e02cab8ac11b0c35f7d270737fb67c
  Percent 34f2154fa29bed1ea1f6b21bbba55be5
  Score 2c1d435e70ce6141686e8dcd599abffc
  Seconds 970124013cb076e3574e853bf4f93243
  Stocks f8f5782a215e042486160b28bbaa9e60
  clamp ca541b68bef6644f83bd27282ad36f03
import  -/  text-1.2.3.1:Data.Text 1e51a010d8f8a6fa41d8ea82d69faf13
da34de76c19ec02fea55f03810012334
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Engine.Runner_func_1.$trModule3
                   StreetRun.Engine.Runner_func_1.$trModule1) -}
ca6e32f8721a7ec410a9a1851ca7940f
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Engine.Runner_func_1.$trModule2) -}
b778cda1c305fb974092f916727ac93c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Engine.Runner_func_1"#) -}
7eff1e59664855a5d1f7fa1137a46f15
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   StreetRun.Engine.Runner_func_1.$trModule4) -}
652e52b643362aaf2beb711afb41f6c6
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE"#) -}
7ad161911f9d46fd322eb632ea521ab3
  $waddStocks :: GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                 let {
                   $j :: GHC.Types.Bool <join 0>
                   = let {
                       $j1 :: GHC.Types.Bool <join 0>
                       = let {
                           $j2 :: GHC.Types.Bool <join 0>
                           = let {
                               $j3 :: GHC.Types.Bool <join 0>
                               = let {
                                   $j4 :: GHC.Types.Bool <join 0>
                                   = let {
                                       $j5 :: GHC.Types.Bool <join 0>
                                       = let {
                                           $j6 :: GHC.Types.Bool <join 0>
                                           = case GHC.Prim.>=# ww1 100# of lwild {
                                               DEFAULT -> GHC.Types.False
                                               1#
                                               -> case GHC.Classes.modInt#
                                                         ww
                                                         50# of ww2 { DEFAULT ->
                                                  case GHC.Classes.modInt#
                                                         ww1
                                                         50# of ww3 { DEFAULT ->
                                                  GHC.Prim.tagToEnum#
                                                    @ GHC.Types.Bool
                                                    (GHC.Prim.># ww2 ww3) } } }
                                         } in
                                         case GHC.Prim.<# ww 75# of lwild {
                                           DEFAULT -> $j6
                                           1#
                                           -> case GHC.Prim.>=# ww1 75# of lwild1 {
                                                DEFAULT -> $j6 1# -> GHC.Types.True } }
                                     } in
                                     case GHC.Prim.<# ww 50# of lwild {
                                       DEFAULT -> $j5
                                       1#
                                       -> case GHC.Prim.>=# ww1 50# of lwild1 {
                                            DEFAULT -> $j5 1# -> GHC.Types.True } }
                                 } in
                                 case GHC.Prim.<# ww 35# of lwild {
                                   DEFAULT -> $j4
                                   1#
                                   -> case GHC.Prim.>=# ww1 35# of lwild1 {
                                        DEFAULT -> $j4 1# -> GHC.Types.True } }
                             } in
                             case GHC.Prim.<# ww 20# of lwild {
                               DEFAULT -> $j3
                               1#
                               -> case GHC.Prim.>=# ww1 20# of lwild1 {
                                    DEFAULT -> $j3 1# -> GHC.Types.True } }
                         } in
                         case GHC.Prim.<# ww 10# of lwild {
                           DEFAULT -> $j2
                           1#
                           -> case GHC.Prim.>=# ww1 10# of lwild1 {
                                DEFAULT -> $j2 1# -> GHC.Types.True } }
                     } in
                     case GHC.Prim.<# ww 5# of lwild {
                       DEFAULT -> $j1
                       1#
                       -> case GHC.Prim.>=# ww1 5# of lwild1 {
                            DEFAULT -> $j1 1# -> GHC.Types.True } }
                 } in
                 case GHC.Prim.<# ww 1# of lwild {
                   DEFAULT -> $j
                   1#
                   -> case GHC.Prim.>=# ww1 1# of lwild1 {
                        DEFAULT -> $j 1# -> GHC.Types.True } }) -}
26269a62db69a3d4c7a2eaec86cc58bf
  $wstepRunnerAction ::
    StreetRun.Engine.Input.Input
    -> StreetRun.Engine.Runner.RunnerAction
    -> GHC.Maybe.Maybe StreetRun.Engine.Types.Percent
    -> GHC.Maybe.Maybe StreetRun.Engine.Types.Percent
    -> StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U(1*U,A),1*U(1*U,A),A,A)><S,1*U><L,1*U><L,1*U>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.Engine.Input.Input)
                   (ww :: StreetRun.Engine.Runner.RunnerAction)
                   (ww1 :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent)
                   (ww2 :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent) ->
                 case ww of wild {
                   StreetRun.Engine.Runner.RunnerAction'Move
                   -> case w of wild1 { StreetRun.Engine.Input.Input ds1 ds2 ds3 ds4 ds5 ->
                      case ds2 of wild2 { KeyState.KeyState ds7 ds8 ->
                      case ds7 of wild3 {
                        DEFAULT
                        -> case ds3 of wild4 { KeyState.KeyState ds9 ds10 ->
                           case ds9 of wild5 {
                             DEFAULT -> StreetRun.Engine.Runner_func_1.stepRunnerAction10
                             KeyState.KeyStatus'Pressed
                             -> StreetRun.Engine.Runner_func_1.stepRunnerAction9
                             KeyState.KeyStatus'Held
                             -> StreetRun.Engine.Runner_func_1.stepRunnerAction9 } }
                        KeyState.KeyStatus'Pressed
                        -> StreetRun.Engine.Runner_func_1.stepRunnerAction8
                        KeyState.KeyStatus'Held
                        -> StreetRun.Engine.Runner_func_1.stepRunnerAction8 } } }
                   StreetRun.Engine.Runner.RunnerAction'Duck
                   -> case w of wild1 { StreetRun.Engine.Input.Input ds1 ds2 ds3 ds4 ds5 ->
                      case ds2 of wild2 { KeyState.KeyState ds7 ds8 ->
                      case ds7 of wild3 {
                        DEFAULT
                        -> case ds3 of wild4 { KeyState.KeyState ds9 ds10 ->
                           case ds9 of wild5 {
                             DEFAULT -> StreetRun.Engine.Runner_func_1.stepRunnerAction7
                             KeyState.KeyStatus'Pressed
                             -> StreetRun.Engine.Runner_func_1.stepRunnerAction6
                             KeyState.KeyStatus'Held
                             -> StreetRun.Engine.Runner_func_1.stepRunnerAction6 } }
                        KeyState.KeyStatus'Pressed
                        -> StreetRun.Engine.Runner_func_1.stepRunnerAction5
                        KeyState.KeyStatus'Held
                        -> StreetRun.Engine.Runner_func_1.stepRunnerAction5 } } }
                   StreetRun.Engine.Runner.RunnerAction'Jump
                   -> case ww1 of wild1 {
                        GHC.Maybe.Nothing
                        -> StreetRun.Engine.Runner_func_1.stepRunnerAction4
                        GHC.Maybe.Just p
                        -> case p `cast`
                                (StreetRun.Engine.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                           case GHC.Prim.ltFloat# x 1.0# of lwild {
                             DEFAULT -> StreetRun.Engine.Runner_func_1.stepRunnerAction4
                             1# -> StreetRun.Engine.Runner_func_1.stepRunnerAction3 } } }
                   StreetRun.Engine.Runner.RunnerAction'Hurt
                   -> case ww2 of wild1 {
                        GHC.Maybe.Nothing
                        -> StreetRun.Engine.Runner_func_1.stepRunnerAction2
                        GHC.Maybe.Just p
                        -> case p `cast`
                                (StreetRun.Engine.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                           case GHC.Prim.ltFloat# x 1.0# of lwild {
                             DEFAULT -> StreetRun.Engine.Runner_func_1.stepRunnerAction2
                             1# -> StreetRun.Engine.Runner_func_1.stepRunnerAction1 } } } }) -}
d01a50d88054939413f8f86236cabe50
  $wstepRunnerState ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
    -> StreetRun.Engine.Runner.RunnerState
    -> (# StreetRun.Engine.Runner.RunnerAction,
          GHC.Maybe.Maybe StreetRun.Engine.Types.Percent,
          GHC.Maybe.Maybe StreetRun.Engine.Types.Percent,
          GHC.Maybe.Maybe StreetRun.Engine.Types.Percent #)
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(A,1*U,1*U,1*U)>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.Engine.Step.Step
                           StreetRun.Engine.Runner.RunnerAction)
                   (w1 :: StreetRun.Engine.Runner.RunnerState) ->
                 let {
                   recover :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent
                   = case w1 of wild { StreetRun.Engine.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds4 of wild1 {
                       GHC.Maybe.Nothing
                       -> GHC.Maybe.Nothing @ StreetRun.Engine.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Engine.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Engine.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Engine.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 1.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Engine.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Engine.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Engine.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Engine.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Engine.Types.N:Percent[0])) }) } } } }
                 } in
                 let {
                   hurt :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent
                   = case w1 of wild { StreetRun.Engine.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds3 of wild1 {
                       GHC.Maybe.Nothing
                       -> GHC.Maybe.Nothing @ StreetRun.Engine.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Engine.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Engine.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Engine.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 4.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Engine.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Engine.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Engine.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Engine.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Engine.Types.N:Percent[0])) }) } } } }
                 } in
                 let {
                   height :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent
                   = case w1 of wild { StreetRun.Engine.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                     case ds2 of wild1 {
                       GHC.Maybe.Nothing
                       -> GHC.Maybe.Nothing @ StreetRun.Engine.Types.Percent
                       GHC.Maybe.Just p
                       -> case p `cast`
                               (StreetRun.Engine.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                          case GHC.Prim.ltFloat# x 1.0# of lwild {
                            DEFAULT -> GHC.Maybe.Nothing @ StreetRun.Engine.Types.Percent
                            1#
                            -> GHC.Maybe.Just
                                 @ StreetRun.Engine.Types.Percent
                                 (let {
                                    present :: GHC.Prim.Float# = GHC.Prim.plusFloat# x 4.0e-2#
                                  } in
                                  case GHC.Prim.gtFloat# present 1.0# of lwild1 {
                                    DEFAULT
                                    -> case GHC.Prim.ltFloat# present 0.0# of lwild2 {
                                         DEFAULT
                                         -> (GHC.Types.F# present)
                                              `cast`
                                            (Sym (StreetRun.Engine.Types.N:Percent[0]))
                                         1#
                                         -> StreetRun.Engine.Runner_func_1.stepRunnerPosition4
                                              `cast`
                                            (Sym (StreetRun.Engine.Types.N:Percent[0])) }
                                    1#
                                    -> StreetRun.Engine.Runner_func_1.stepRunnerState2
                                         `cast`
                                       (Sym (StreetRun.Engine.Types.N:Percent[0])) }) } } } }
                 } in
                 case w of wild {
                   StreetRun.Engine.Step.Step'Change ds da
                   -> case da of wild1 {
                        DEFAULT
                        -> (# case hurt of wild2 {
                                GHC.Maybe.Nothing
                                -> case height of wild3 {
                                     GHC.Maybe.Nothing -> wild1
                                     GHC.Maybe.Just a1
                                     -> StreetRun.Engine.Runner.RunnerAction'Jump }
                                GHC.Maybe.Just a1 -> StreetRun.Engine.Runner.RunnerAction'Hurt },
                              height, hurt, recover #)
                        StreetRun.Engine.Runner.RunnerAction'Jump
                        -> (# StreetRun.Engine.Runner.RunnerAction'Jump,
                              StreetRun.Engine.Runner_func_1.stepRunnerState1, hurt, recover #)
                        StreetRun.Engine.Runner.RunnerAction'Hurt
                        -> (# StreetRun.Engine.Runner.RunnerAction'Hurt, height,
                              StreetRun.Engine.Runner_func_1.stepRunnerState1,
                              StreetRun.Engine.Runner_func_1.stepRunnerState1 #) }
                   StreetRun.Engine.Step.Step'Sustain ds
                   -> (# case hurt of wild1 {
                           GHC.Maybe.Nothing
                           -> case height of wild2 {
                                GHC.Maybe.Nothing -> ds
                                GHC.Maybe.Just a1 -> StreetRun.Engine.Runner.RunnerAction'Jump }
                           GHC.Maybe.Just a1 -> StreetRun.Engine.Runner.RunnerAction'Hurt },
                         height, hurt, recover #) }) -}
f59baf6019acf69c266c92a98a2e84b1
  $wstepSpeed ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
    -> GHC.Prim.Float# -> GHC.Prim.Float#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>, Inline: [2],
     Unfolding: (\ (w :: StreetRun.Engine.Step.Step
                           StreetRun.Engine.Runner.RunnerAction)
                   (ww :: GHC.Prim.Float#) ->
                 case w of wild {
                   StreetRun.Engine.Step.Step'Change ds1 a1
                   -> case a1 of wild1 {
                        StreetRun.Engine.Runner.RunnerAction'Move
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.plusFloat# ww 3.0e-2#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Engine.Runner.RunnerAction'Duck
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww 0.1#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Engine.Runner.RunnerAction'Jump
                        -> case GHC.Prim.gtFloat# ww 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# ww 1.0# of lwild1 {
                                  DEFAULT -> ww 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Engine.Runner.RunnerAction'Hurt
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww 0.15#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# } }
                   StreetRun.Engine.Step.Step'Sustain a1
                   -> case a1 of wild1 {
                        StreetRun.Engine.Runner.RunnerAction'Move
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.plusFloat# ww 3.0e-2#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Engine.Runner.RunnerAction'Duck
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww 0.1#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Engine.Runner.RunnerAction'Jump
                        -> case GHC.Prim.gtFloat# ww 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# ww 1.0# of lwild1 {
                                  DEFAULT -> ww 1# -> 1.0# }
                             1# -> 20.0# }
                        StreetRun.Engine.Runner.RunnerAction'Hurt
                        -> let {
                             x :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww 0.15#
                           } in
                           case GHC.Prim.gtFloat# x 20.0# of lwild {
                             DEFAULT
                             -> case GHC.Prim.ltFloat# x 1.0# of lwild1 {
                                  DEFAULT -> x 1# -> 1.0# }
                             1# -> 20.0# } } }) -}
0688da8857564f9c0acada6419052eda
  $wstepZoom ::
    GHC.Prim.Float#
    -> StreetRun.Engine.Runner.RunnerAction -> GHC.Prim.Float#
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Float#)
                   (w :: StreetRun.Engine.Runner.RunnerAction) ->
                 case w of wild {
                   DEFAULT
                   -> let {
                        x :: GHC.Prim.Float# = GHC.Prim.plusFloat# ww 5.0e-2#
                      } in
                      case GHC.Prim.gtFloat# x 1.0# of lwild {
                        DEFAULT
                        -> case GHC.Prim.ltFloat# x 0.0# of lwild1 {
                             DEFAULT -> x 1# -> 0.0# }
                        1# -> 1.0# }
                   StreetRun.Engine.Runner.RunnerAction'Duck
                   -> let {
                        x :: GHC.Prim.Float# = GHC.Prim.minusFloat# ww 1.0e-2#
                      } in
                      case GHC.Prim.gtFloat# x 1.0# of lwild {
                        DEFAULT
                        -> case GHC.Prim.ltFloat# x 0.0# of lwild1 {
                             DEFAULT -> x 1# -> 0.0# }
                        1# -> 1.0# } }) -}
464ed8d208bf24f2005724bd4359360b
  addStocks ::
    StreetRun.Engine.Types.Score
    -> StreetRun.Engine.Types.Score -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S(S),1*U(U)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Engine.Types.Score)
                   (w1 :: StreetRun.Engine.Types.Score) ->
                 case w `cast`
                      (StreetRun.Engine.Types.N:Score[0]) of ww { GHC.Types.I# ww1 ->
                 case w1
                        `cast`
                      (StreetRun.Engine.Types.N:Score[0]) of ww2 { GHC.Types.I# ww3 ->
                 StreetRun.Engine.Runner_func_1.$waddStocks ww1 ww3 } }) -}
29e0c5d8580d47d65ae1367145502557
  applyHurt ::
    GHC.Types.Bool
    -> StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
    -> GHC.Maybe.Maybe StreetRun.Engine.Types.Percent
    -> StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (collision :: GHC.Types.Bool)
                   (stepDa :: StreetRun.Engine.Step.Step
                                StreetRun.Engine.Runner.RunnerAction)
                   (recover :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent) ->
                 case collision of wild {
                   GHC.Types.False -> stepDa
                   GHC.Types.True
                   -> case recover of wild1 {
                        GHC.Maybe.Nothing
                        -> case stepDa of wild2 {
                             StreetRun.Engine.Step.Step'Change da ds
                             -> StreetRun.Engine.Step.Step'Change
                                  @ StreetRun.Engine.Runner.RunnerAction
                                  da
                                  StreetRun.Engine.Runner.RunnerAction'Hurt
                             StreetRun.Engine.Step.Step'Sustain ds
                             -> case ds of wild3 {
                                  DEFAULT
                                  -> StreetRun.Engine.Step.Step'Change
                                       @ StreetRun.Engine.Runner.RunnerAction
                                       wild3
                                       StreetRun.Engine.Runner.RunnerAction'Hurt
                                  StreetRun.Engine.Runner.RunnerAction'Hurt -> wild2 } }
                        GHC.Maybe.Just a1 -> stepDa } }) -}
90fc543aa57255ec29c7fd0b088780e1
  nextStocks ::
    StreetRun.Engine.Types.Score
    -> StreetRun.Engine.Types.Score
    -> StreetRun.Engine.Types.Stocks
    -> StreetRun.Engine.Types.Stocks
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m,
     Unfolding: InlineRule (0, True, True)
                StreetRun.Engine.Runner_func_1.nextStocks1
                  `cast`
                (<StreetRun.Engine.Types.Score>_R
                 ->_R <StreetRun.Engine.Types.Score>_R
                 ->_R <StreetRun.Engine.Types.Stocks>_R
                 ->_R Sym (StreetRun.Engine.Types.N:Stocks[0])) -}
8e3dae51726615e89924df92170f3db0
  nextStocks1 ::
    StreetRun.Engine.Types.Score
    -> StreetRun.Engine.Types.Score
    -> StreetRun.Engine.Types.Stocks
    -> GHC.Types.Int
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>m, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Engine.Types.Score)
                   (w1 :: StreetRun.Engine.Types.Score)
                   (w2 :: StreetRun.Engine.Types.Stocks) ->
                 case w `cast`
                      (StreetRun.Engine.Types.N:Score[0]) of ww { GHC.Types.I# ww1 ->
                 case w1
                        `cast`
                      (StreetRun.Engine.Types.N:Score[0]) of ww2 { GHC.Types.I# ww3 ->
                 case w2
                        `cast`
                      (StreetRun.Engine.Types.N:Stocks[0]) of ww4 { GHC.Types.I# ww5 ->
                 case StreetRun.Engine.Runner_func_1.$waddStocks ww1 ww3 of wild {
                   GHC.Types.False
                   -> case GHC.Prim.<=# 10# ww5 of lwild {
                        DEFAULT -> GHC.Types.I# ww5 1# -> GHC.Types.I# 10# }
                   GHC.Types.True
                   -> let {
                        y1 :: GHC.Prim.Int# = GHC.Prim.+# ww5 1#
                      } in
                      case GHC.Prim.<=# 10# y1 of lwild {
                        DEFAULT -> GHC.Types.I# y1 1# -> GHC.Types.I# 10# } } } } }) -}
dbe8ac95a9da4599269ae9c51348f485
  showRunner :: StreetRun.Engine.Runner.RunnerState -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: StreetRun.Engine.Runner.RunnerState) ->
                 case ds of wild { StreetRun.Engine.Runner.RunnerState ds1 ds2 ds3 ds4 ->
                 case ds4 of wild1 {
                   GHC.Maybe.Nothing -> GHC.Types.True
                   GHC.Maybe.Just percent
                   -> case percent
                             `cast`
                           (StreetRun.Engine.Types.N:Percent[0]) of wild2 { GHC.Types.F# x ->
                      GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.geFloat#
                           (GHC.Prim.sinFloat#
                              (GHC.Prim.timesFloat# 1000.0# (GHC.Prim.powerFloat# x 3.0#)))
                           0.0#) } } }) -}
23a7af6da1182902df8814f9ab815580
  stepRunnerAction ::
    StreetRun.Engine.Input.Input
    -> StreetRun.Engine.Runner.RunnerState
    -> StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,1*U(A,1*U(1*U,A),1*U(1*U,A),A,A)><S(SLLL),1*U(1*U,1*U,1*U,A)>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Engine.Input.Input)
                   (w1 :: StreetRun.Engine.Runner.RunnerState) ->
                 case w1 of ww { StreetRun.Engine.Runner.RunnerState ww1 ww2 ww3 ww4 ->
                 StreetRun.Engine.Runner_func_1.$wstepRunnerAction
                   w
                   ww1
                   ww2
                   ww3 }) -}
750a14ec4a5b86ad4492442496b3b84d
  stepRunnerAction1 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Engine.Step.Step'Sustain
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Hurt) -}
26e68e75c11226ebb9c0938667870282
  stepRunnerAction10 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Engine.Step.Step'Sustain
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Move) -}
b4fd97038971f9a408f6503844fa0faf
  stepRunnerAction2 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Engine.Step.Step'Change
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Hurt
                   StreetRun.Engine.Runner.RunnerAction'Move) -}
0afe7c4df87971146a66807d00440540
  stepRunnerAction3 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Engine.Step.Step'Sustain
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Jump) -}
c4d2c5c05eaa4ba1ebaf20f250978414
  stepRunnerAction4 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Engine.Step.Step'Change
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Jump
                   StreetRun.Engine.Runner.RunnerAction'Move) -}
11e8f319da00cdb09d19110960a4fbcc
  stepRunnerAction5 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Engine.Step.Step'Change
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Duck
                   StreetRun.Engine.Runner.RunnerAction'Jump) -}
2ead000c80156d12af006b1c727f7f32
  stepRunnerAction6 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (StreetRun.Engine.Step.Step'Sustain
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Duck) -}
48d11406d50ce97a59a8b35f58b192b0
  stepRunnerAction7 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Engine.Step.Step'Change
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Duck
                   StreetRun.Engine.Runner.RunnerAction'Move) -}
dee1287dc7762a97c860d527db85a976
  stepRunnerAction8 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Engine.Step.Step'Change
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Move
                   StreetRun.Engine.Runner.RunnerAction'Jump) -}
8c87a9b75ce4c1ef725f104cdc58680f
  stepRunnerAction9 ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (StreetRun.Engine.Step.Step'Change
                   @ StreetRun.Engine.Runner.RunnerAction
                   StreetRun.Engine.Runner.RunnerAction'Move
                   StreetRun.Engine.Runner.RunnerAction'Duck) -}
c674df213fb1c23675e60e08d959fe6d
  stepRunnerPosition ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
    -> StreetRun.Engine.Types.Animations
         StreetRun.Engine.Runner.RunnerKey
    -> Animate.Position
         StreetRun.Engine.Runner.RunnerKey StreetRun.Engine.Types.Seconds
    -> Animate.Position
         StreetRun.Engine.Runner.RunnerKey StreetRun.Engine.Types.Seconds
  {- Arity: 3, Strictness: <S,1*U><L,1*U(U,U,U)><L,U(U,U(U),U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Engine.Step.Step
                           StreetRun.Engine.Runner.RunnerAction)
                   (w1 :: StreetRun.Engine.Types.Animations
                            StreetRun.Engine.Runner.RunnerKey)
                   (w2 :: Animate.Position
                            StreetRun.Engine.Runner.RunnerKey
                            StreetRun.Engine.Types.Seconds) ->
                 case w of wild {
                   StreetRun.Engine.Step.Step'Change ds da
                   -> case da of wild1 {
                        StreetRun.Engine.Runner.RunnerAction'Move
                        -> Animate.Position
                             @ StreetRun.Engine.Runner.RunnerKey
                             @ StreetRun.Engine.Types.Seconds
                             StreetRun.Engine.Runner.RunnerKey'Move
                             Animate.$fShowAnimations1
                             StreetRun.Engine.Runner_func_1.stepRunnerPosition4
                               `cast`
                             (Sym (StreetRun.Engine.Types.N:Seconds[0]))
                             Animate.Loop'Always
                        StreetRun.Engine.Runner.RunnerAction'Duck
                        -> Animate.Position
                             @ StreetRun.Engine.Runner.RunnerKey
                             @ StreetRun.Engine.Types.Seconds
                             StreetRun.Engine.Runner.RunnerKey'Sneak
                             Animate.$fShowAnimations1
                             StreetRun.Engine.Runner_func_1.stepRunnerPosition4
                               `cast`
                             (Sym (StreetRun.Engine.Types.N:Seconds[0]))
                             Animate.Loop'Always
                        StreetRun.Engine.Runner.RunnerAction'Jump
                        -> Animate.Position
                             @ StreetRun.Engine.Runner.RunnerKey
                             @ StreetRun.Engine.Types.Seconds
                             StreetRun.Engine.Runner.RunnerKey'Kick
                             Animate.$fShowAnimations1
                             StreetRun.Engine.Runner_func_1.stepRunnerPosition4
                               `cast`
                             (Sym (StreetRun.Engine.Types.N:Seconds[0]))
                             StreetRun.Engine.Runner_func_1.stepRunnerPosition2
                        StreetRun.Engine.Runner.RunnerAction'Hurt
                        -> Animate.Position
                             @ StreetRun.Engine.Runner.RunnerKey
                             @ StreetRun.Engine.Types.Seconds
                             StreetRun.Engine.Runner.RunnerKey'Hurt
                             Animate.$fShowAnimations1
                             StreetRun.Engine.Runner_func_1.stepRunnerPosition4
                               `cast`
                             (Sym (StreetRun.Engine.Types.N:Seconds[0]))
                             Animate.Loop'Always }
                   StreetRun.Engine.Step.Step'Sustain ds
                   -> Animate.stepPosition
                        @ StreetRun.Engine.Runner.RunnerKey
                        @ StreetRun.Engine.Types.Seconds
                        @ (Animate.SpriteClip StreetRun.Engine.Runner.RunnerKey)
                        StreetRun.Engine.Runner.$fEnumRunnerKey
                        StreetRun.Engine.Types.$fNumSeconds
                        StreetRun.Engine.Types.$fOrdSeconds
                        w1
                        w2
                        StreetRun.Engine.Runner_func_1.stepRunnerPosition1
                          `cast`
                        (Sym (StreetRun.Engine.Types.N:Seconds[0])) }) -}
00edac9084930f8b108c298f83c1a490
  stepRunnerPosition1 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.F# 1.6667e-2#) -}
10c83835d862dad4870310ef29e11e82
  stepRunnerPosition2 :: Animate.Loop
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Animate.Loop'Count
                   StreetRun.Engine.Runner_func_1.stepRunnerPosition3) -}
83dc728adfd18cfe9dfe73e8bc6facfb
  stepRunnerPosition3 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
1a309976a86d090da878bc0af0707026
  stepRunnerPosition4 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 0.0#) -}
bbc6c9d1546347ba10c019e8b24d0ad7
  stepRunnerState ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
    -> StreetRun.Engine.Runner.RunnerState
    -> StreetRun.Engine.Runner.RunnerState
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U(A,U,U,U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Engine.Step.Step
                           StreetRun.Engine.Runner.RunnerAction)
                   (w1 :: StreetRun.Engine.Runner.RunnerState) ->
                 case StreetRun.Engine.Runner_func_1.$wstepRunnerState
                        w
                        w1 of ww { (#,,,#) ww1 ww2 ww3 ww4 ->
                 StreetRun.Engine.Runner.RunnerState ww1 ww2 ww3 ww4 }) -}
c3a82a5b6fc77b630bcfa62d6ed29d79
  stepRunnerState1 :: GHC.Maybe.Maybe StreetRun.Engine.Types.Percent
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Maybe.Just
                   @ StreetRun.Engine.Types.Percent
                   StreetRun.Engine.Runner_func_1.stepRunnerPosition4
                     `cast`
                   (Sym (StreetRun.Engine.Types.N:Percent[0]))) -}
e73c0d167576ead9ef4de3f2d6366eec
  stepRunnerState2 :: GHC.Types.Float
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.F# 1.0#) -}
99bf0db19b77de3537954b5a3886dade
  stepSpeed ::
    StreetRun.Engine.Step.Step StreetRun.Engine.Runner.RunnerAction
    -> StreetRun.Engine.Types.Percent -> StreetRun.Engine.Types.Percent
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S(S),1*U(U)>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: StreetRun.Engine.Step.Step
                           StreetRun.Engine.Runner.RunnerAction)
                   (w1 :: StreetRun.Engine.Types.Percent) ->
                 case w1
                        `cast`
                      (StreetRun.Engine.Types.N:Percent[0]) of ww { GHC.Types.F# ww1 ->
                 case StreetRun.Engine.Runner_func_1.$wstepSpeed
                        w
                        ww1 of ww2 { DEFAULT ->
                 (GHC.Types.F# ww2)
                   `cast`
                 (Sym (StreetRun.Engine.Types.N:Percent[0])) } }) -}
da575bf7d7b6a4037c152af36f155899
  stepZoom ::
    GHC.Types.Float
    -> StreetRun.Engine.Runner.RunnerAction -> GHC.Types.Float
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>m,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Float)
                   (w1 :: StreetRun.Engine.Runner.RunnerAction) ->
                 case w of ww { GHC.Types.F# ww1 ->
                 case StreetRun.Engine.Runner_func_1.$wstepZoom
                        ww1
                        w1 of ww2 { DEFAULT ->
                 GHC.Types.F# ww2 } }) -}
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

