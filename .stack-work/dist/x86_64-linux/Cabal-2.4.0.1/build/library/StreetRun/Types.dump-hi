
==================== FINAL INTERFACE ====================
2019-04-26 14:29:02.359577657 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun.Types 8064
  interface hash: ff12b0bd101cc3af0202c364036e5431
  ABI hash: fe57a12901e3ac69e610bc5ec1ffe588
  export-list hash: 68eec0a854069d6ebcc9ba499b980fc6
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: cd6997935d09daa6a687cb8eb0447281
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.Types.clamp
  StreetRun.Types.Animations
  StreetRun.Types.Distance{StreetRun.Types.Distance}
  StreetRun.Types.DrawSprite
  StreetRun.Types.Percent{StreetRun.Types.Percent}
  StreetRun.Types.Score{StreetRun.Types.Score}
  StreetRun.Types.Seconds{StreetRun.Types.Seconds}
  StreetRun.Types.Stocks{StreetRun.Types.Stocks}
module dependencies:
package dependencies: aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0
                      attoparsec-0.13.2.2 base-4.12.0.0 base-compat-0.10.5 binary-0.8.6.0
                      bytestring-0.10.8.2 conduit-1.3.1.1 containers-0.6.0.1
                      deepseq-1.4.4.0 dlist-0.8.0.6 exceptions-0.10.1 ghc-boot-th-8.6.4
                      ghc-prim-0.5.3 hashable-1.2.7.0 integer-gmp-1.0.2.0
                      integer-logarithms-1.0.2.2 libyaml-0.1.1.0 mtl-2.2.2
                      primitive-0.6.4.0 random-1.1 resourcet-1.2.2 scientific-0.3.6.2
                      stm-2.5.0.0 tagged-0.8.6 template-haskell-2.14.0.0 text-1.2.3.1
                      time-1.8.0.2 time-locale-compat-0.1.1.5 transformers-0.5.6.2
                      unliftio-core-0.1.2.0 unordered-containers-0.2.9.0 uuid-types-1.0.3
                      vector-0.12.0.2 yaml-0.11.0.0
orphans: stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         base-4.12.0.0:GHC.Float base-4.12.0.0:GHC.Base
family instance modules: aeson-1.4.2.0:Data.Aeson.Types.Internal
                         animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  aeson-1.4.2.0:Data.Aeson 11fabf31eb51ace925e01dbcac5c5e1c
import  -/  aeson-1.4.2.0:Data.Aeson.Encoding.Internal 489714a4ee472b64ad082134e1d90018
import  -/  aeson-1.4.2.0:Data.Aeson.Types.FromJSON 478a7294b0f6cba3e3f81ade37661719
import  -/  aeson-1.4.2.0:Data.Aeson.Types.Internal bb47a80da26f8aef0a8b525434722917
import  -/  aeson-1.4.2.0:Data.Aeson.Types.ToJSON 2d8fbdbeae55689e15006e77c5de60e8
import  -/  animate-0.7.0:Animate cf529f033c38156be2990062be8eb570
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Enum 87204abed08db8735fc0be5ab48689aa
import  -/  base-4.12.0.0:GHC.Float ccb68fbeaab348f60d11c8132d51af5d
import  -/  base-4.12.0.0:GHC.Num c2039f03637c68f47b0bbff4c18ec616
import  -/  base-4.12.0.0:GHC.Real af2b985dd29515c375fb78b2c9298d42
import  -/  base-4.12.0.0:GHC.Show 838a5d039379d82d9626aae53dfce276
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  ghc-prim-0.5.3:GHC.Classes 0f6fd7d7db53fc48f6e1f01803cc6c9d
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  integer-gmp-1.0.2.0:GHC.Integer.Type 6d87087aea24143d2650f78480d954a3
4bad63bb3fa03e71441e81262a8b345e
  $fEnumScore :: GHC.Enum.Enum StreetRun.Types.Score
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Score
                  GHC.Enum.$fEnumInt_$csucc
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Enum.$fEnumInt_$cpred
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Enum.$fEnumInt_$cfromEnum
                    `cast`
                  (<GHC.Types.Int>_R ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Enum.$fEnumInt_$cfromEnum
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0]) ->_R <GHC.Types.Int>_R)
                  GHC.Enum.$fEnumInt_$cenumFrom
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R ([Sym (StreetRun.Types.N:Score[0])])_R)
                  GHC.Enum.$fEnumInt_$cenumFromThen
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R ([Sym (StreetRun.Types.N:Score[0])])_R)
                  GHC.Enum.$fEnumInt_$cenumFromTo
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R ([Sym (StreetRun.Types.N:Score[0])])_R)
                  GHC.Enum.$fEnumInt_$cenumFromThenTo
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R ([Sym (StreetRun.Types.N:Score[0])])_R) -}
7e2313b523e61aeeac98a063f19e7634
  $fEnumStocks :: GHC.Enum.Enum StreetRun.Types.Stocks
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Stocks
                  GHC.Enum.$fEnumInt_$csucc
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Enum.$fEnumInt_$cpred
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Enum.$fEnumInt_$cfromEnum
                    `cast`
                  (<GHC.Types.Int>_R ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Enum.$fEnumInt_$cfromEnum
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0]) ->_R <GHC.Types.Int>_R)
                  GHC.Enum.$fEnumInt_$cenumFrom
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R ([Sym (StreetRun.Types.N:Stocks[0])])_R)
                  GHC.Enum.$fEnumInt_$cenumFromThen
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R ([Sym (StreetRun.Types.N:Stocks[0])])_R)
                  GHC.Enum.$fEnumInt_$cenumFromTo
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R ([Sym (StreetRun.Types.N:Stocks[0])])_R)
                  GHC.Enum.$fEnumInt_$cenumFromThenTo
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R ([Sym (StreetRun.Types.N:Stocks[0])])_R) -}
b4174e484e1fd82b32e71de2fbcef362
  $fEqDistance :: GHC.Classes.Eq StreetRun.Types.Distance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Distance
                  GHC.Classes.eqFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fEqFloat_$c/=
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <GHC.Types.Bool>_R) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fEqPercent :: GHC.Classes.Eq StreetRun.Types.Percent
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Percent
                  GHC.Classes.eqFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fEqFloat_$c/=
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <GHC.Types.Bool>_R) -}
4bad63bb3fa03e71441e81262a8b345e
  $fEqScore :: GHC.Classes.Eq StreetRun.Types.Score
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Score
                  GHC.Classes.eqInt
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.neInt
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Types.Bool>_R) -}
a9822968438ab4a0fccda00b12150109
  $fEqSeconds :: GHC.Classes.Eq StreetRun.Types.Seconds
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Seconds
                  GHC.Classes.eqFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fEqFloat_$c/=
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <GHC.Types.Bool>_R) -}
7e2313b523e61aeeac98a063f19e7634
  $fEqStocks :: GHC.Classes.Eq StreetRun.Types.Stocks
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Stocks
                  GHC.Classes.eqInt
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.neInt
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Types.Bool>_R) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fFloatingPercent :: GHC.Float.Floating StreetRun.Types.Percent
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Percent
                  StreetRun.Types.$fFractionalPercent
                  GHC.Float.$fFloatingFloat_$cpi
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.expFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.logFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.sqrtFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.powerFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fFloatingFloat_$clogBase
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.sinFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.cosFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.tanFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.asinFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.acosFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.atanFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.sinhFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.coshFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.tanhFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fFloatingFloat_$casinh
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fFloatingFloat_$cacosh
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fFloatingFloat_$catanh
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.log1pFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.expm1Float
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fFloatingFloat_$clog1pexp
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fFloatingFloat_$clog1mexp
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])) -}
b4174e484e1fd82b32e71de2fbcef362
  $fFractionalDistance ::
    GHC.Real.Fractional StreetRun.Types.Distance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Distance
                  StreetRun.Types.$fNumDistance
                  GHC.Float.divideFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Float.$fFractionalFloat_$crecip
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Float.$fFractionalFloat_$cfromRational
                    `cast`
                  (<GHC.Real.Ratio GHC.Integer.Type.Integer>_R
                   ->_R Sym (StreetRun.Types.N:Distance[0])) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fFractionalPercent :: GHC.Real.Fractional StreetRun.Types.Percent
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Percent
                  StreetRun.Types.$fNumPercent
                  GHC.Float.divideFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fFractionalFloat_$crecip
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fFractionalFloat_$cfromRational
                    `cast`
                  (<GHC.Real.Ratio GHC.Integer.Type.Integer>_R
                   ->_R Sym (StreetRun.Types.N:Percent[0])) -}
a9822968438ab4a0fccda00b12150109
  $fFractionalSeconds :: GHC.Real.Fractional StreetRun.Types.Seconds
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Seconds
                  StreetRun.Types.$fNumSeconds
                  GHC.Float.divideFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Float.$fFractionalFloat_$crecip
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Float.$fFractionalFloat_$cfromRational
                    `cast`
                  (<GHC.Real.Ratio GHC.Integer.Type.Integer>_R
                   ->_R Sym (StreetRun.Types.N:Seconds[0])) -}
a9822968438ab4a0fccda00b12150109
  $fFromJSONSeconds ::
    Data.Aeson.Types.FromJSON.FromJSON StreetRun.Types.Seconds
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Seconds
                  Data.Aeson.Types.FromJSON.$fFromJSONFloat_$cparseJSON
                    `cast`
                  (<Data.Aeson.Types.Internal.Value>_R
                   ->_R (Data.Aeson.Types.Internal.Parser
                           (Sym (StreetRun.Types.N:Seconds[0])))_R)
                  Data.Aeson.Types.FromJSON.$fFromJSONFloat_$cparseJSONList
                    `cast`
                  (<Data.Aeson.Types.Internal.Value>_R
                   ->_R (Data.Aeson.Types.Internal.Parser
                           ([Sym (StreetRun.Types.N:Seconds[0])])_R)_R) -}
4bad63bb3fa03e71441e81262a8b345e
  $fIntegralScore :: GHC.Real.Integral StreetRun.Types.Score
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Score
                  StreetRun.Types.$fRealScore
                  StreetRun.Types.$fEnumScore
                  GHC.Real.$fIntegralInt_$cquot
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Real.$fIntegralInt_$crem
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Real.$fIntegralInt_$cdiv
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Real.$fIntegralInt_$cmod
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Real.$fIntegralInt_$cquotRem
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R ((,)
                           (Sym (StreetRun.Types.N:Score[0]))
                           (Sym (StreetRun.Types.N:Score[0])))_R)
                  GHC.Real.$fIntegralInt_$cdivMod
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R ((,)
                           (Sym (StreetRun.Types.N:Score[0]))
                           (Sym (StreetRun.Types.N:Score[0])))_R)
                  GHC.Real.$fIntegralInt_$ctoInteger
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Integer.Type.Integer>_R) -}
7e2313b523e61aeeac98a063f19e7634
  $fIntegralStocks :: GHC.Real.Integral StreetRun.Types.Stocks
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Stocks
                  StreetRun.Types.$fRealStocks
                  StreetRun.Types.$fEnumStocks
                  GHC.Real.$fIntegralInt_$cquot
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Real.$fIntegralInt_$crem
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Real.$fIntegralInt_$cdiv
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Real.$fIntegralInt_$cmod
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Real.$fIntegralInt_$cquotRem
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R ((,)
                           (Sym (StreetRun.Types.N:Stocks[0]))
                           (Sym (StreetRun.Types.N:Stocks[0])))_R)
                  GHC.Real.$fIntegralInt_$cdivMod
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R ((,)
                           (Sym (StreetRun.Types.N:Stocks[0]))
                           (Sym (StreetRun.Types.N:Stocks[0])))_R)
                  GHC.Real.$fIntegralInt_$ctoInteger
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Integer.Type.Integer>_R) -}
b4174e484e1fd82b32e71de2fbcef362
  $fNumDistance :: GHC.Num.Num StreetRun.Types.Distance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Distance
                  GHC.Float.plusFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Float.minusFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Float.timesFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Float.negateFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Float.fabsFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Float.$fNumFloat_$csignum
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Float.$fNumFloat_$cfromInteger
                    `cast`
                  (<GHC.Integer.Type.Integer>_R
                   ->_R Sym (StreetRun.Types.N:Distance[0])) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fNumPercent :: GHC.Num.Num StreetRun.Types.Percent
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Percent
                  GHC.Float.plusFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.minusFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.timesFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.negateFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.fabsFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fNumFloat_$csignum
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Float.$fNumFloat_$cfromInteger
                    `cast`
                  (<GHC.Integer.Type.Integer>_R
                   ->_R Sym (StreetRun.Types.N:Percent[0])) -}
4bad63bb3fa03e71441e81262a8b345e
  $fNumScore :: GHC.Num.Num StreetRun.Types.Score
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Score
                  GHC.Num.$fNumInt_$c+
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Num.$fNumInt_$c-
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Num.$fNumInt_$c*
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Num.$fNumInt_$cnegate
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Num.$fNumInt_$cabs
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Num.$fNumInt_$csignum
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Num.$fNumInt_$cfromInteger
                    `cast`
                  (<GHC.Integer.Type.Integer>_R
                   ->_R Sym (StreetRun.Types.N:Score[0])) -}
a9822968438ab4a0fccda00b12150109
  $fNumSeconds :: GHC.Num.Num StreetRun.Types.Seconds
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Seconds
                  GHC.Float.plusFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Float.minusFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Float.timesFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Float.negateFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Float.fabsFloat
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Float.$fNumFloat_$csignum
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Float.$fNumFloat_$cfromInteger
                    `cast`
                  (<GHC.Integer.Type.Integer>_R
                   ->_R Sym (StreetRun.Types.N:Seconds[0])) -}
7e2313b523e61aeeac98a063f19e7634
  $fNumStocks :: GHC.Num.Num StreetRun.Types.Stocks
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Stocks
                  GHC.Num.$fNumInt_$c+
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Num.$fNumInt_$c-
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Num.$fNumInt_$c*
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Num.$fNumInt_$cnegate
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Num.$fNumInt_$cabs
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Num.$fNumInt_$csignum
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Num.$fNumInt_$cfromInteger
                    `cast`
                  (<GHC.Integer.Type.Integer>_R
                   ->_R Sym (StreetRun.Types.N:Stocks[0])) -}
b4174e484e1fd82b32e71de2fbcef362
  $fOrdDistance :: GHC.Classes.Ord StreetRun.Types.Distance
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Distance
                  StreetRun.Types.$fEqDistance
                  GHC.Classes.$fOrdFloat_$ccompare
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <GHC.Types.Ordering>_R)
                  GHC.Classes.$fOrdFloat_$c<
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c<=
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c>
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c>=
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$cmax
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0]))
                  GHC.Classes.$fOrdFloat_$cmin
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R Sym (StreetRun.Types.N:Distance[0])) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fOrdPercent :: GHC.Classes.Ord StreetRun.Types.Percent
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Percent
                  StreetRun.Types.$fEqPercent
                  GHC.Classes.$fOrdFloat_$ccompare
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <GHC.Types.Ordering>_R)
                  GHC.Classes.$fOrdFloat_$c<
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c<=
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c>
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c>=
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$cmax
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0]))
                  GHC.Classes.$fOrdFloat_$cmin
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R Sym (StreetRun.Types.N:Percent[0])) -}
4bad63bb3fa03e71441e81262a8b345e
  $fOrdScore :: GHC.Classes.Ord StreetRun.Types.Score
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Score
                  StreetRun.Types.$fEqScore
                  GHC.Classes.compareInt
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Types.Ordering>_R)
                  GHC.Classes.ltInt
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.leInt
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.gtInt
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.geInt
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdInt_$cmax
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0]))
                  GHC.Classes.$fOrdInt_$cmin
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])
                   ->_R Sym (StreetRun.Types.N:Score[0])) -}
a9822968438ab4a0fccda00b12150109
  $fOrdSeconds :: GHC.Classes.Ord StreetRun.Types.Seconds
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Seconds
                  StreetRun.Types.$fEqSeconds
                  GHC.Classes.$fOrdFloat_$ccompare
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <GHC.Types.Ordering>_R)
                  GHC.Classes.$fOrdFloat_$c<
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c<=
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c>
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$c>=
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdFloat_$cmax
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0]))
                  GHC.Classes.$fOrdFloat_$cmin
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])
                   ->_R Sym (StreetRun.Types.N:Seconds[0])) -}
7e2313b523e61aeeac98a063f19e7634
  $fOrdStocks :: GHC.Classes.Ord StreetRun.Types.Stocks
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Stocks
                  StreetRun.Types.$fEqStocks
                  GHC.Classes.compareInt
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Types.Ordering>_R)
                  GHC.Classes.ltInt
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.leInt
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.gtInt
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.geInt
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Types.Bool>_R)
                  GHC.Classes.$fOrdInt_$cmax
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0]))
                  GHC.Classes.$fOrdInt_$cmin
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])
                   ->_R Sym (StreetRun.Types.N:Stocks[0])) -}
b4174e484e1fd82b32e71de2fbcef362
  $fRealDistance :: GHC.Real.Real StreetRun.Types.Distance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Distance
                  StreetRun.Types.$fNumDistance
                  StreetRun.Types.$fOrdDistance
                  GHC.Float.$fRealFloat_$ctoRational
                    `cast`
                  (Sym (StreetRun.Types.N:Distance[0])
                   ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
b4174e484e1fd82b32e71de2fbcef362
  $fRealFracDistance :: GHC.Real.RealFrac StreetRun.Types.Distance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Distance
                  StreetRun.Types.$fRealDistance
                  StreetRun.Types.$fFractionalDistance
                  GHC.Float.$fRealFracFloat_$cproperFraction
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R ((,) <b>_R (Sym (StreetRun.Types.N:Distance[0])))_R)
                  GHC.Float.$fRealFracFloat_$ctruncate
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <b>_R)
                  GHC.Float.$fRealFracFloat_$cround
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <b>_R)
                  GHC.Float.$fRealFracFloat_$cceiling
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <b>_R)
                  GHC.Float.$fRealFracFloat_$cfloor
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Distance[0])
                   ->_R <b>_R) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fRealFracPercent :: GHC.Real.RealFrac StreetRun.Types.Percent
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Percent
                  StreetRun.Types.$fRealPercent
                  StreetRun.Types.$fFractionalPercent
                  GHC.Float.$fRealFracFloat_$cproperFraction
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R ((,) <b>_R (Sym (StreetRun.Types.N:Percent[0])))_R)
                  GHC.Float.$fRealFracFloat_$ctruncate
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <b>_R)
                  GHC.Float.$fRealFracFloat_$cround
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <b>_R)
                  GHC.Float.$fRealFracFloat_$cceiling
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <b>_R)
                  GHC.Float.$fRealFracFloat_$cfloor
                    `cast`
                  (forall (b :: <*>_N).
                   <GHC.Real.Integral b>_R
                   ->_R Sym (StreetRun.Types.N:Percent[0])
                   ->_R <b>_R) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fRealPercent :: GHC.Real.Real StreetRun.Types.Percent
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Percent
                  StreetRun.Types.$fNumPercent
                  StreetRun.Types.$fOrdPercent
                  GHC.Float.$fRealFloat_$ctoRational
                    `cast`
                  (Sym (StreetRun.Types.N:Percent[0])
                   ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
4bad63bb3fa03e71441e81262a8b345e
  $fRealScore :: GHC.Real.Real StreetRun.Types.Score
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Score
                  StreetRun.Types.$fNumScore
                  StreetRun.Types.$fOrdScore
                  GHC.Real.$fEnumRatio_$ctoRational
                    `cast`
                  (Sym (StreetRun.Types.N:Score[0])
                   ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
7e2313b523e61aeeac98a063f19e7634
  $fRealStocks :: GHC.Real.Real StreetRun.Types.Stocks
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Stocks
                  StreetRun.Types.$fNumStocks
                  StreetRun.Types.$fOrdStocks
                  GHC.Real.$fEnumRatio_$ctoRational
                    `cast`
                  (Sym (StreetRun.Types.N:Stocks[0])
                   ->_R <GHC.Real.Ratio GHC.Integer.Type.Integer>_R) -}
b4174e484e1fd82b32e71de2fbcef362
  $fShowDistance :: GHC.Show.Show StreetRun.Types.Distance
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Distance
                  StreetRun.Types.$fShowDistance_$cshowsPrec
                  StreetRun.Types.$fShowDistance_$cshow
                  StreetRun.Types.$fShowDistance_$cshowList -}
b4174e484e1fd82b32e71de2fbcef362
  $fShowDistance1 :: StreetRun.Types.Distance -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (w :: StreetRun.Types.Distance) ->
                 StreetRun.Types.$w$cshowsPrec 0# w) -}
3c7f4ad7feef15d58a9c1b696aea9d52
  $fShowDistance2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Types.$fShowDistance3) -}
881b0aaa1a417b6301d28050aea2be96
  $fShowDistance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Distance "#) -}
e004e885881be455a9fbc862a836b0dc
  $fShowDistance4 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 11#) -}
b4174e484e1fd82b32e71de2fbcef362
  $fShowDistance_$cshow ::
    StreetRun.Types.Distance -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: StreetRun.Types.Distance) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   StreetRun.Types.$fShowDistance2
                   (case x `cast`
                         (StreetRun.Types.N:Distance[0]) of ww { GHC.Types.F# ww1 ->
                    GHC.Float.$w$sshowSignedFloat1
                      GHC.Float.$fShowFloat2
                      StreetRun.Types.$fShowDistance4
                      ww1
                      (GHC.Types.[] @ GHC.Types.Char) })) -}
b4174e484e1fd82b32e71de2fbcef362
  $fShowDistance_$cshowList ::
    [StreetRun.Types.Distance] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Types.Distance]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Types.Distance
                   StreetRun.Types.$fShowDistance1
                   ls
                   s) -}
b4174e484e1fd82b32e71de2fbcef362
  $fShowDistance_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Types.Distance -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U(U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: StreetRun.Types.Distance) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Types.$w$cshowsPrec ww1 w1 }) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fShowPercent :: GHC.Show.Show StreetRun.Types.Percent
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Percent
                  StreetRun.Types.$fShowPercent_$cshowsPrec
                  StreetRun.Types.$fShowPercent_$cshow
                  StreetRun.Types.$fShowPercent_$cshowList -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fShowPercent1 :: StreetRun.Types.Percent -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (w :: StreetRun.Types.Percent) ->
                 StreetRun.Types.$w$cshowsPrec1 0# w) -}
ef082445b7a8743aefd2bb26fbd01221
  $fShowPercent2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Types.$fShowPercent3) -}
1446e5de621d8fa47e6b4df3562b91cf
  $fShowPercent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Percent "#) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fShowPercent_$cshow :: StreetRun.Types.Percent -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: StreetRun.Types.Percent) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   StreetRun.Types.$fShowPercent2
                   (case x `cast`
                         (StreetRun.Types.N:Percent[0]) of ww { GHC.Types.F# ww1 ->
                    GHC.Float.$w$sshowSignedFloat1
                      GHC.Float.$fShowFloat2
                      StreetRun.Types.$fShowDistance4
                      ww1
                      (GHC.Types.[] @ GHC.Types.Char) })) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fShowPercent_$cshowList ::
    [StreetRun.Types.Percent] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Types.Percent]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Types.Percent
                   StreetRun.Types.$fShowPercent1
                   ls
                   s) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $fShowPercent_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Types.Percent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U(U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: StreetRun.Types.Percent) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Types.$w$cshowsPrec1 ww1 w1 }) -}
4bad63bb3fa03e71441e81262a8b345e
  $fShowScore :: GHC.Show.Show StreetRun.Types.Score
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Score
                  StreetRun.Types.$fShowScore_$cshowsPrec
                  StreetRun.Types.$fShowScore_$cshow
                  StreetRun.Types.$fShowScore_$cshowList -}
4bad63bb3fa03e71441e81262a8b345e
  $fShowScore1 :: StreetRun.Types.Score -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: (\ (w :: StreetRun.Types.Score)
                   (w1 :: GHC.Base.String) ->
                 StreetRun.Types.$w$cshowsPrec2 0# w w1) -}
f392038f771cfb11a23c56c481cee04b
  $fShowScore2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Score "#) -}
4bad63bb3fa03e71441e81262a8b345e
  $fShowScore_$cshow :: StreetRun.Types.Score -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: StreetRun.Types.Score) ->
                 GHC.CString.unpackAppendCString#
                   StreetRun.Types.$fShowScore2
                   (case x `cast`
                         (StreetRun.Types.N:Score[0]) of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
4bad63bb3fa03e71441e81262a8b345e
  $fShowScore_$cshowList :: [StreetRun.Types.Score] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Types.Score]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Types.Score
                   StreetRun.Types.$fShowScore1
                   ls
                   s) -}
4bad63bb3fa03e71441e81262a8b345e
  $fShowScore_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Types.Score -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: StreetRun.Types.Score)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Types.$w$cshowsPrec2 ww1 w1 w2 }) -}
a9822968438ab4a0fccda00b12150109
  $fShowSeconds :: GHC.Show.Show StreetRun.Types.Seconds
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Seconds
                  StreetRun.Types.$fShowSeconds_$cshowsPrec
                  StreetRun.Types.$fShowSeconds_$cshow
                  StreetRun.Types.$fShowSeconds_$cshowList -}
a9822968438ab4a0fccda00b12150109
  $fShowSeconds1 :: StreetRun.Types.Seconds -> GHC.Show.ShowS
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (w :: StreetRun.Types.Seconds) ->
                 StreetRun.Types.$w$cshowsPrec3 0# w) -}
f8683332004d1ecf9250c577585e2b63
  $fShowSeconds2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString#
                   StreetRun.Types.$fShowSeconds3) -}
7ba71e6da00af872e067654177116fca
  $fShowSeconds3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Seconds "#) -}
a9822968438ab4a0fccda00b12150109
  $fShowSeconds_$cshow :: StreetRun.Types.Seconds -> GHC.Base.String
  {- Arity: 1, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: StreetRun.Types.Seconds) ->
                 GHC.Base.++
                   @ GHC.Types.Char
                   StreetRun.Types.$fShowSeconds2
                   (case x `cast`
                         (StreetRun.Types.N:Seconds[0]) of ww { GHC.Types.F# ww1 ->
                    GHC.Float.$w$sshowSignedFloat1
                      GHC.Float.$fShowFloat2
                      StreetRun.Types.$fShowDistance4
                      ww1
                      (GHC.Types.[] @ GHC.Types.Char) })) -}
a9822968438ab4a0fccda00b12150109
  $fShowSeconds_$cshowList ::
    [StreetRun.Types.Seconds] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Types.Seconds]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Types.Seconds
                   StreetRun.Types.$fShowSeconds1
                   ls
                   s) -}
a9822968438ab4a0fccda00b12150109
  $fShowSeconds_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Types.Seconds -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(S),1*U(U)><L,1*U(U)>, Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: StreetRun.Types.Seconds) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Types.$w$cshowsPrec3 ww1 w1 }) -}
7e2313b523e61aeeac98a063f19e7634
  $fShowStocks :: GHC.Show.Show StreetRun.Types.Stocks
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Stocks
                  StreetRun.Types.$fShowStocks_$cshowsPrec
                  StreetRun.Types.$fShowStocks_$cshow
                  StreetRun.Types.$fShowStocks_$cshowList -}
7e2313b523e61aeeac98a063f19e7634
  $fShowStocks1 :: StreetRun.Types.Stocks -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U(U)><L,U>,
     Unfolding: (\ (w :: StreetRun.Types.Stocks)
                   (w1 :: GHC.Base.String) ->
                 StreetRun.Types.$w$cshowsPrec4 0# w w1) -}
9443483335668dcd47ec61c626b7a568
  $fShowStocks2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Stocks "#) -}
7e2313b523e61aeeac98a063f19e7634
  $fShowStocks_$cshow :: StreetRun.Types.Stocks -> GHC.Base.String
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U)>,
     Unfolding: (\ (x :: StreetRun.Types.Stocks) ->
                 GHC.CString.unpackAppendCString#
                   StreetRun.Types.$fShowStocks2
                   (case x `cast`
                         (StreetRun.Types.N:Stocks[0]) of ww2 { GHC.Types.I# ww3 ->
                    case GHC.Show.$wshowSignedInt
                           11#
                           ww3
                           (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                    GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) -}
7e2313b523e61aeeac98a063f19e7634
  $fShowStocks_$cshowList ::
    [StreetRun.Types.Stocks] -> GHC.Show.ShowS
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [StreetRun.Types.Stocks]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__
                   @ StreetRun.Types.Stocks
                   StreetRun.Types.$fShowStocks1
                   ls
                   s) -}
7e2313b523e61aeeac98a063f19e7634
  $fShowStocks_$cshowsPrec ::
    GHC.Types.Int -> StreetRun.Types.Stocks -> GHC.Show.ShowS
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,1*U(U)><L,U>, Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: StreetRun.Types.Stocks)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 StreetRun.Types.$w$cshowsPrec4 ww1 w1 w2 }) -}
a9822968438ab4a0fccda00b12150109
  $fToJSONSeconds ::
    Data.Aeson.Types.ToJSON.ToJSON StreetRun.Types.Seconds
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Types.Seconds
                  Data.Aeson.Types.ToJSON.$fToJSONFloat_$srealFloatToJSON
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <Data.Aeson.Types.Internal.Value>_R)
                  Data.Aeson.Encoding.Internal.float
                    `cast`
                  (Sym (StreetRun.Types.N:Seconds[0])
                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                           Data.Aeson.Types.Internal.Value>_R)
                  Data.Aeson.Types.ToJSON.$fToJSONFloat_$ctoJSONList
                    `cast`
                  (([Sym (StreetRun.Types.N:Seconds[0])])_R
                   ->_R <Data.Aeson.Types.Internal.Value>_R)
                  Data.Aeson.Types.ToJSON.$fToJSONFloat_$ctoEncodingList
                    `cast`
                  (([Sym (StreetRun.Types.N:Seconds[0])])_R
                   ->_R <Data.Aeson.Encoding.Internal.Encoding'
                           Data.Aeson.Types.Internal.Value>_R) -}
3288ee25f65796f9009011bdc0ac1ec4
  $tc'Distance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13760987662837805153##
                   2393058870814479825##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tc'Distance2
                   0#
                   StreetRun.Types.$tc'Distance1) -}
10e16567c9c6db648c64519c3b6f3787
  $tc'Distance1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
67424c29d71a5ea88107ac8ae9cc9040
  $tc'Distance2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tc'Distance3) -}
6cfa1e3a9feb4a367a5a551de1b700fe
  $tc'Distance3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Distance"#) -}
57b523c26186abccb517983120958b7e
  $tc'Percent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2941660895343710956##
                   5960657441966499778##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tc'Percent2
                   0#
                   StreetRun.Types.$tc'Percent1) -}
9d4cc6ff5d43ac939d860da32b5cff07
  $tc'Percent1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
1f2036a6236cddce4fea578e12260da9
  $tc'Percent2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tc'Percent3) -}
ec80cf7ee3fd50ecfcad13692229f4bb
  $tc'Percent3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Percent"#) -}
a8198b9f3760ce1671996f680a548f1b
  $tc'Score :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12441415051786661293##
                   14985196263289702550##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tc'Score2
                   0#
                   StreetRun.Types.$tc'Score1) -}
6c2473c1ee1f263c30eb8174e4f0a4df
  $tc'Score1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
0c35ebd3a24db298d204f6133d0ca1e2
  $tc'Score2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tc'Score3) -}
78395f2aa1bb944ad88d7b09bb82c8be
  $tc'Score3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Score"#) -}
50ae9956eb287cb0bc187d2dd667553a
  $tc'Seconds :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   811556301992157421##
                   18433164042482183378##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tc'Seconds2
                   0#
                   StreetRun.Types.$tc'Seconds1) -}
6abc232867d17bb97aa5e771510a2bd2
  $tc'Seconds1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bb37389491f72b5a039b0ac2b796ebc0
  $tc'Seconds2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tc'Seconds3) -}
2483f5d8d373a37d5c99912acc6ca2b3
  $tc'Seconds3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Seconds"#) -}
6d7b4cba7b6d092652baffb4c6f8b433
  $tc'Stocks :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14762799206573524821##
                   9902753067487527448##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tc'Stocks2
                   0#
                   StreetRun.Types.$tc'Stocks1) -}
b5573174dc3a9f5e58766d37b351e287
  $tc'Stocks1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5bf919bee015c10108fb90acd2715d0d
  $tc'Stocks2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tc'Stocks3) -}
67c484832ab2f3f6cde8db9e93e41ef9
  $tc'Stocks3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Stocks"#) -}
2e42c073d8b2a898509c0ca2f7629e94
  $tcDistance :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18287208675725186784##
                   13158553973749112754##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tcDistance1
                   0#
                   GHC.Types.krep$*) -}
c20cc5771357038f6087f20e0974b2f6
  $tcDistance1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tcDistance2) -}
631bdee5039ba3991464a0e6f4807fe9
  $tcDistance2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Distance"#) -}
3737b80fc0a68f60b75895ea2e740b0f
  $tcPercent :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11039880425948791114##
                   1924285066985348400##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tcPercent1
                   0#
                   GHC.Types.krep$*) -}
320a348033899a35bac3d0cedbb7b6f3
  $tcPercent1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tcPercent2) -}
2174a54220d609ebd259c296b0c837f5
  $tcPercent2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Percent"#) -}
9333334af2f3275df8534a5f43d3556d
  $tcScore :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17945849737782117735##
                   14156560775157129183##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tcScore1
                   0#
                   GHC.Types.krep$*) -}
bd6da0d01bb813b6be70af4d411cad8b
  $tcScore1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tcScore2) -}
15e341ec66a117c2c59015a41df0fe4a
  $tcScore2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Score"#) -}
8bfb9ca6998f4536cbcf1cef4cbfaca5
  $tcSeconds :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18433715289975040557##
                   2096433570845819791##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tcSeconds1
                   0#
                   GHC.Types.krep$*) -}
435692376040a01e6ff37d95cb75eb35
  $tcSeconds1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tcSeconds2) -}
e1773289c30e8f332a41d9746ffe428d
  $tcSeconds2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Seconds"#) -}
c8d020be5ca0f4213413bde396e5af86
  $tcStocks :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1020728279321110615##
                   4429008913629432224##
                   StreetRun.Types.$trModule
                   StreetRun.Types.$tcStocks1
                   0#
                   GHC.Types.krep$*) -}
bfa548297df22819956928e4af74b3ad
  $tcStocks1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$tcStocks2) -}
0ee86aed22df740c2b45be88d0b05b8a
  $tcStocks2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Stocks"#) -}
934e13147d5a093ccba399f25cff1aae
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.Types.$trModule3
                   StreetRun.Types.$trModule1) -}
4e647b5e753f62373b9e3e3c3bdce817
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$trModule2) -}
30eb9ea266a552127819be57956e905d
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun.Types"#) -}
dbfbaa1a996cc6ada8106066051df842
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.Types.$trModule4) -}
26fd08783722e1f1730754612b1d5e8d
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
b4174e484e1fd82b32e71de2fbcef362
  $w$cshowsPrec ::
    GHC.Prim.Int# -> StreetRun.Types.Distance -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: StreetRun.Types.Distance) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case w `cast`
                          (StreetRun.Types.N:Distance[0]) of ww1 { GHC.Types.F# ww2 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat2
                       StreetRun.Types.$fShowDistance4
                       ww2 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char StreetRun.Types.$fShowDistance2 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           StreetRun.Types.$fShowDistance2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
ba7abb7eeed8b328d8b72349c7c4fef0
  $w$cshowsPrec1 ::
    GHC.Prim.Int# -> StreetRun.Types.Percent -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: StreetRun.Types.Percent) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case w `cast`
                          (StreetRun.Types.N:Percent[0]) of ww1 { GHC.Types.F# ww2 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat2
                       StreetRun.Types.$fShowDistance4
                       ww2 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char StreetRun.Types.$fShowPercent2 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           StreetRun.Types.$fShowPercent2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
4bad63bb3fa03e71441e81262a8b345e
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> StreetRun.Types.Score -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,1*U(U)><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: StreetRun.Types.Score)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        StreetRun.Types.$fShowScore2
                        (case w `cast`
                              (StreetRun.Types.N:Score[0]) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           StreetRun.Types.$fShowScore2
                           (case w `cast`
                                 (StreetRun.Types.N:Score[0]) of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      w1) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
a9822968438ab4a0fccda00b12150109
  $w$cshowsPrec3 ::
    GHC.Prim.Int# -> StreetRun.Types.Seconds -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,U><L,1*U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: StreetRun.Types.Seconds) ->
                 let {
                   g :: GHC.Base.String -> GHC.Base.String
                   = case w `cast`
                          (StreetRun.Types.N:Seconds[0]) of ww1 { GHC.Types.F# ww2 ->
                     GHC.Float.$w$sshowSignedFloat1
                       GHC.Float.$fShowFloat2
                       StreetRun.Types.$fShowDistance4
                       ww2 }
                 } in
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Base.++ @ GHC.Types.Char StreetRun.Types.$fShowSeconds2 (g x)
                   1#
                   -> \ (x :: GHC.Base.String) ->
                      GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.Base.++
                           @ GHC.Types.Char
                           StreetRun.Types.$fShowSeconds2
                           (g (GHC.Types.: @ GHC.Types.Char GHC.Show.$fShow(,)2 x))) }) -}
7e2313b523e61aeeac98a063f19e7634
  $w$cshowsPrec4 ::
    GHC.Prim.Int#
    -> StreetRun.Types.Stocks -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,U><L,1*U(U)><L,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (w :: StreetRun.Types.Stocks)
                   (w1 :: GHC.Base.String) ->
                 case GHC.Prim.>=# ww 11# of lwild {
                   DEFAULT
                   -> GHC.CString.unpackAppendCString#
                        StreetRun.Types.$fShowStocks2
                        (case w `cast`
                              (StreetRun.Types.N:Stocks[0]) of ww2 { GHC.Types.I# ww3 ->
                         case GHC.Show.$wshowSignedInt 11# ww3 w1 of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 } })
                   1#
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.$fShow(,)4
                        (GHC.CString.unpackAppendCString#
                           StreetRun.Types.$fShowStocks2
                           (case w `cast`
                                 (StreetRun.Types.N:Stocks[0]) of ww2 { GHC.Types.I# ww3 ->
                            case GHC.Show.$wshowSignedInt
                                   11#
                                   ww3
                                   (GHC.Types.:
                                      @ GHC.Types.Char
                                      GHC.Show.$fShow(,)2
                                      w1) of ww4 { (#,#) ww5 ww6 ->
                            GHC.Types.: @ GHC.Types.Char ww5 ww6 } })) }) -}
a3f8cdd403e06536e6d6c806da810a9f
  type Animations key =
    Animate.Animations
      key (Animate.SpriteClip key) StreetRun.Types.Seconds
b4174e484e1fd82b32e71de2fbcef362
  newtype Distance = Distance GHC.Types.Float
a6cded7f7738d4f19eef54d8bec96036
  type DrawSprite key (m :: * -> *) =
    Animate.SpriteClip key -> (GHC.Types.Int, GHC.Types.Int) -> m ()
ba7abb7eeed8b328d8b72349c7c4fef0
  newtype Percent = Percent GHC.Types.Float
4bad63bb3fa03e71441e81262a8b345e
  newtype Score = Score GHC.Types.Int
a9822968438ab4a0fccda00b12150109
  newtype Seconds = Seconds GHC.Types.Float
7e2313b523e61aeeac98a063f19e7634
  newtype Stocks = Stocks GHC.Types.Int
e1ad8578b50b6091ffb795f7d612ef1e
  clamp ::
    (GHC.Real.Fractional a, GHC.Classes.Ord a) => a -> a -> a -> a
  {- Arity: 5, HasNoCafRefs,
     Strictness: <L,A><S(LLLLC(C(S))LLL),U(A,A,1*C1(C1(U)),A,1*C1(C1(U)),A,A,A)><L,U><L,U><L,U>,
     Unfolding: InlineRule (5, True, False)
                (\ @ a
                   ($dFractional :: GHC.Real.Fractional a)
                   ($dOrd :: GHC.Classes.Ord a)
                   (present :: a)
                   (mn :: a)
                   (mx :: a) ->
                 case GHC.Classes.> @ a $dOrd present mx of wild {
                   GHC.Types.False
                   -> case GHC.Classes.< @ a $dOrd present mn of wild1 {
                        GHC.Types.False -> present GHC.Types.True -> mn }
                   GHC.Types.True -> mx }) -}
instance GHC.Enum.Enum [StreetRun.Types.Score]
  = StreetRun.Types.$fEnumScore
instance GHC.Enum.Enum [StreetRun.Types.Stocks]
  = StreetRun.Types.$fEnumStocks
instance GHC.Classes.Eq [StreetRun.Types.Distance]
  = StreetRun.Types.$fEqDistance
instance GHC.Classes.Eq [StreetRun.Types.Percent]
  = StreetRun.Types.$fEqPercent
instance GHC.Classes.Eq [StreetRun.Types.Score]
  = StreetRun.Types.$fEqScore
instance GHC.Classes.Eq [StreetRun.Types.Seconds]
  = StreetRun.Types.$fEqSeconds
instance GHC.Classes.Eq [StreetRun.Types.Stocks]
  = StreetRun.Types.$fEqStocks
instance GHC.Float.Floating [StreetRun.Types.Percent]
  = StreetRun.Types.$fFloatingPercent
instance GHC.Real.Fractional [StreetRun.Types.Distance]
  = StreetRun.Types.$fFractionalDistance
instance GHC.Real.Fractional [StreetRun.Types.Percent]
  = StreetRun.Types.$fFractionalPercent
instance GHC.Real.Fractional [StreetRun.Types.Seconds]
  = StreetRun.Types.$fFractionalSeconds
instance Data.Aeson.Types.FromJSON.FromJSON [StreetRun.Types.Seconds]
  = StreetRun.Types.$fFromJSONSeconds
instance GHC.Real.Integral [StreetRun.Types.Score]
  = StreetRun.Types.$fIntegralScore
instance GHC.Real.Integral [StreetRun.Types.Stocks]
  = StreetRun.Types.$fIntegralStocks
instance GHC.Num.Num [StreetRun.Types.Distance]
  = StreetRun.Types.$fNumDistance
instance GHC.Num.Num [StreetRun.Types.Percent]
  = StreetRun.Types.$fNumPercent
instance GHC.Num.Num [StreetRun.Types.Score]
  = StreetRun.Types.$fNumScore
instance GHC.Num.Num [StreetRun.Types.Seconds]
  = StreetRun.Types.$fNumSeconds
instance GHC.Num.Num [StreetRun.Types.Stocks]
  = StreetRun.Types.$fNumStocks
instance GHC.Classes.Ord [StreetRun.Types.Distance]
  = StreetRun.Types.$fOrdDistance
instance GHC.Classes.Ord [StreetRun.Types.Percent]
  = StreetRun.Types.$fOrdPercent
instance GHC.Classes.Ord [StreetRun.Types.Score]
  = StreetRun.Types.$fOrdScore
instance GHC.Classes.Ord [StreetRun.Types.Seconds]
  = StreetRun.Types.$fOrdSeconds
instance GHC.Classes.Ord [StreetRun.Types.Stocks]
  = StreetRun.Types.$fOrdStocks
instance GHC.Real.Real [StreetRun.Types.Distance]
  = StreetRun.Types.$fRealDistance
instance GHC.Real.RealFrac [StreetRun.Types.Distance]
  = StreetRun.Types.$fRealFracDistance
instance GHC.Real.RealFrac [StreetRun.Types.Percent]
  = StreetRun.Types.$fRealFracPercent
instance GHC.Real.Real [StreetRun.Types.Percent]
  = StreetRun.Types.$fRealPercent
instance GHC.Real.Real [StreetRun.Types.Score]
  = StreetRun.Types.$fRealScore
instance GHC.Real.Real [StreetRun.Types.Stocks]
  = StreetRun.Types.$fRealStocks
instance GHC.Show.Show [StreetRun.Types.Distance]
  = StreetRun.Types.$fShowDistance
instance GHC.Show.Show [StreetRun.Types.Percent]
  = StreetRun.Types.$fShowPercent
instance GHC.Show.Show [StreetRun.Types.Score]
  = StreetRun.Types.$fShowScore
instance GHC.Show.Show [StreetRun.Types.Seconds]
  = StreetRun.Types.$fShowSeconds
instance GHC.Show.Show [StreetRun.Types.Stocks]
  = StreetRun.Types.$fShowStocks
instance Data.Aeson.Types.ToJSON.ToJSON [StreetRun.Types.Seconds]
  = StreetRun.Types.$fToJSONSeconds
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

