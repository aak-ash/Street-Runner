
==================== FINAL INTERFACE ====================
2019-04-26 14:29:11.242461984 UTC

interface street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg:StreetRun 8064
  interface hash: ee0667066480f0a4a848b02e1bf28f14
  ABI hash: ffdf6be1fec7941c6953111426db0cfd
  export-list hash: 2841cf199b0d33d157f3cee7dafc76bd
  orphan hash: 2269f6ad07a58ad527f17d101e80723d
  flag hash: be0c81c72ad12296c619c6c60c666543
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.main
module dependencies: StreetRun.Assets StreetRun.Assets_1
                     StreetRun.Assets_2 StreetRun.Audio StreetRun.Bolt StreetRun.Bolt_1
                     StreetRun.CFL StreetRun.Camera StreetRun.Common StreetRun.Config
                     StreetRun.Death StreetRun.Font StreetRun.Font_functions
                     StreetRun.GameOver StreetRun.HUD StreetRun.Hurdle
                     StreetRun.Hurdle_1 StreetRun.Input StreetRun.Load StreetRun.Out
                     StreetRun.Out_func StreetRun.Pause StreetRun.Physics
                     StreetRun.Picture StreetRun.Play StreetRun.Quake
                     StreetRun.Quake_BackStreet StreetRun.Quake_Building
                     StreetRun.Quake_Grass StreetRun.Quake_Street StreetRun.Renderer
                     StreetRun.Renderer_func_1 StreetRun.Renderer_func_2
                     StreetRun.Runner StreetRun.Runner_func_1 StreetRun.Runner_func_2
                     StreetRun.SDLLayer StreetRun.Scenario StreetRun.Scene StreetRun.Sfx
                     StreetRun.Shaky StreetRun.Snag StreetRun.Sound_effects
                     StreetRun.State StreetRun.Step StreetRun.Tag StreetRun.Tag_func
                     StreetRun.Title StreetRun.Types StreetRun.Work StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Monad.IO.Class e96805f9d79f75be66a0d44eb83064c1
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Exception.Type 98b0fca1a406b013cbf2a34ff23be207
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  exceptions-0.10.1:Control.Monad.Catch d963cd0a953cb33941cbb2c475dcbadb
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  linear-1.20.8:Linear.V2 8a9154bf8e5f0fecb2cc8fb6a057e650
import  -/  mtl-2.2.2:Control.Monad.Reader d5c3a33f1c95bb71f4ae02f87a7048ff
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 56d676c7504f5007ee5b66906716abcc
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  random-1.1:System.Random a2913fef910fa7846b8be540f8dcdaf5
import  -/  safe-exceptions-0.1.7.0:Control.Exception.Safe 17ab706d389356fc1b759977e8d17a1a
import  -/  sdl2-2.4.1.0:SDL a509879ea64738370e9e96c8f0b5e49f
import  -/  sdl2-2.4.1.0:SDL.Init 98cfaf5d617a0557b654bf7b82490377
import  -/  sdl2-2.4.1.0:SDL.Vect 87cebfb5451b5123ac5e23d9821e85c2
import  -/  sdl2-2.4.1.0:SDL.Video c835b53c6533fe528c3cb59873f49a1b
import  -/  sdl2-2.4.1.0:SDL.Video.Renderer 93203afab1f85132f9da5863a7f04f06
import  -/  sdl2-mixer-1.1.0:SDL.Mixer f3936c6b9c7c99434739f7b77f9abfbf
import  -/  sdl2-ttf-2.0.2:SDL.Font d24b31830df063b1aa6c9977b6472ef3
import  -/  StreetRun.Assets 2819f37df7c59b80fb7f3a73042c7f01
  exports: 86be993b4877099fabbc9ec1b43ab731
  $sel:rBackStreetSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rBirdSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rBuildingSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rControlsSprite:Resources 022c06076a805b822172c29a76100922
  $sel:rEscapeSprite:Resources 022c06076a805b822172c29a76100922
  $sel:rGameOverSprite:Resources 022c06076a805b822172c29a76100922
  $sel:rGrassSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rHiscoreSprite:Resources 022c06076a805b822172c29a76100922
  $sel:rLavaSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rNumberSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rPauseSprite:Resources 022c06076a805b822172c29a76100922
  $sel:rRockSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rRunnerSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rSpaceSprite:Resources 022c06076a805b822172c29a76100922
  $sel:rStreetSprites:Resources 022c06076a805b822172c29a76100922
  $sel:rTitleSprite:Resources 022c06076a805b822172c29a76100922
import  -/  StreetRun.Assets_1 092a9f85ac2840e6b6b4a8844b69b157
  exports: a0e66bff35b5bbeef533c40567f2213d
  loadResources c517a5ac057a1f44ad0cd5168faeeb85
import  -/  StreetRun.Assets_2 554c0cc210cac8907e123e55b9f847ff
  exports: 8a28f26399f8feeec61fee2c50539027
  freeResources c18e2c40cb302ad0d96b0ad9826ba31a
import  -/  StreetRun.Audio 91f095936fecbb9f076d29d5950c869b
  exports: 778206d5370172e5e0ea84450aec5c45
  Audio 4ba14999075ad68ce5a755a8d89bcb9d
  lowerGameMusic' daba87d5a2dc971bab05c59e42936cc3
  playBirdSfx' 7e069ed01a38bdb4281d54e1f9df9bca
  playDeathSfx' 4c4f619531fb7e08e0dbbf77b0ff93b2
  playDuckSfx' 4e039969062d9046a0c8c19bc28c9c4e
  playGameMusic' 62a1537bc4c208e8b0cff45165d7de31
  playHurtSfx' 973528611917508ea0126fe02e17fbda
  playJumpSfx' f6a5f5971c2824dee65a60bd7a76a48b
  playLavaSfx' 100c5525d27f840af23e99bc30d6af92
  playPointSfx' 8737a356c2a322d133e511d18aff6685
  playQuakeSfx' 3e8eb650c1d864a910e5d365a25ecf43
  playRecoverSfx' 18458e012f454cbe594fe1596645f6b4
  playRockSfx' 4a36ecfabdd92dce821bdf2e4df661bb
  playStockSfx' 6f72212f1faa5cf346f32b74e7392284
  raiseGameMusic' 6b339bb238f60f3e7d8b8fcacf583277
  stopGameMusic' c32bbc998a0df0dd01f3f0fc076cb97f
import  -/  StreetRun.Bolt 847cdad2d0e77170761725924ee19245
  exports: a90e9a51032da22fcea9f9d88198693f
  toScene' e330d74639e2a662564e70387271ecc8
import  -/  StreetRun.Bolt_1 0b54cec6560a4488f38de6c8116f9ad3
  exports: 96cd7ae24f723d600486831e496b0f18
  mainLoop 53406f9b29501e9e740d2f6e50892e89
import  -/  StreetRun.CFL 22aaa7e917fe6023bc75b650c540e607
  exports: f389828e267831208731f8c3eb015474
  Clock 7a224d3c24f27ab5449750b94a90522b
  Logger 1754f757febcf328080928cadc0ce029
  delayMilliseconds' 3b7d69ea6fc3cf09c41497fcbd9b8104
import  -/  StreetRun.Config b599dd5c3a0bd39090f183027c337ded
  exports: a84af2eb49502a4ece92fede76199115
  $sel:cRenderer:Config 74b4b3d61d611d8fd0371c0c604c9c1b
  $sel:cResources:Config 74b4b3d61d611d8fd0371c0c604c9c1b
  $sel:cWindow:Config 74b4b3d61d611d8fd0371c0c604c9c1b
  Config 4b454fadf5423ab87ca4418dca84461f
  Config 74b4b3d61d611d8fd0371c0c604c9c1b
import  -/  StreetRun.Death 3736750ea403d6c2a935ce3e3e1829bd
  exports: eeb974f5063b6e179132d6dcd1281d6b
  Death ba62fe1977cc43c295ad3e800eb6583f
  deathStep' f48e6c046145349a9cd289c79187e874
import  -/  StreetRun.GameOver 12187b3087d1b20ccc00d910b5341a41
  exports: ce700aed10886dc3750aae9e41b16e0b
  GameOver 27fb9b867d37685f227f456c10076ba6
  gameOverStep' f6108ac267de3f4b111bebf77ee34397
import  -/  StreetRun.HUD 33ed45f0ee969474895a8614650a2f1b
  exports: 7832e9cac015a5203f08d8c52ac8b9ae
  HUD 910cd3343cd00cd8902c09529859c02a
  drawControls' d52431e5918ea475379194d1b2b14cd4
  drawHiscore' 0ed06d0c764870decd9971b5fe230c57
  drawScore' c5e3b6255c9d5772ce3393324bacdbe5
import  -/  StreetRun.Hurdle 38a26fa541ce5ced9eea0f70d3aa69b6
  exports: ccac325c207e939d1f0d01c3da87ee30
  streamOfObstacles bbf920dbc0893b9218b831594ddd8141
import  -/  StreetRun.Hurdle_1 c9e76027407717b022743d66c2f85407
  exports: be3dc5eb0f18c89559dce1b425bb13f5
import  -/  StreetRun.Load b854b61e5394a1e0d9cd4b9313a268b0
  exports: 4cddd7fe752b7b923c34c3b71e404029
  HasInput ba70c797691329d224bd192290501ef6
  getInput' 1c214788286f53b4dfcd920da43c3212
  setInput' 81d824290d4b44048bda54a02d1d21b6
  updateInput' 0815ec15cc7b9df59a708cc4cb2a0f95
import  -/  StreetRun.Pause c836411e7acfbc1ef02762dd9329fa6a
  exports: 3c82e1e959378907eb3b17aa2be22620
  Pause 149339ab5d1db6ea66d893643c643810
  pauseStep' 51376e264e1c162b88c6ef10463a05f4
import  -/  StreetRun.Picture b3a434655916c9bd40f5e83b30c22973
  exports: 3a912206f39fec45a542e7a9b7b90546
  CameraControl 4fbff540ba209f3d818863d970cdf797
  adjustCamera' b8e15433cf3c4c8223073926be73c883
import  -/  StreetRun.Play 5e1759185369f3a2fb6cea30997a29a1
  exports: a72549fdc40fd458e99f01bb54a263bc
  Play 1344a38a4da89055a099f436a0851b57
  playStep' bfe2a4e8ce1ff3585caa7209fbb5a9c4
import  -/  StreetRun.Renderer 0519d22b921b8437012069e63a6f4fa6
  exports: 3ce23641af82250faf4b4afd515774b7
  Renderer 718a3d63cec016694ff0c781c86acdfc
  clearScreen' 1d8ec8d9e97d10bcbf1e0ac68f75058a
  drawScreen' 95398e630047a32f774d251f1e150784
import  -/  StreetRun.Renderer_func_1 a9aeb84e666161fb4390884165deb075
  exports: 6a0ad2bf2ffcb5fd6ca93a687f153110
  drawSprite 4e2e9855f53571266aaceeaac8fcb569
  drawTextureSprite 01f391030fabff71d271cfdd5adbe1ed
import  -/  StreetRun.Renderer_func_2 8e1829777a16c2ecd350a0a2077893e3
  exports: e72c1bc9f19fb36af370b60f395645dd
  drawBlackOverlay' 9ebe09f1daa2db359d403b330346823e
  drawHorizontalScrollImage 1d0bd7020266496cce13dfded0e4c2dd
  drawHorizontalScrollSprite e08e7c2d696843f1ba201402c0b6a74a
  getSpriteAnimations 8739342fa01311037bc512387669a944
import  -/  StreetRun.SDLLayer 43fbd12d1c3076103d4acc48080a09a0
  exports: 646f4aaf1892c6584fb74106a06288c0
  SDLInput 969aa8b98ac2c7df2923b0f3a0618b6d
  SDLRenderer ab017af776428e68e506559777a5f6a1
  clearRenderer' 9161e6fcca7f0e90166b733c4d9c60ff
  drawTexture' 741002c938ffbd9571b8cfff15ec0641
  pollEventPayloads' 96927240b26171ab588ebac9895162ef
  presentRenderer' 918826776b5a862b19448dce0e8cabd1
  queryTexture' d8b12a6eebecc805934fa3b4a866f317
import  -/  StreetRun.Scene 77553ca4972702fc9ed9a930428c3b84
  exports: e5cf8e79f9eac931695eddae8a179fc0
  SceneManager 8a74b8a4c9e990537b0f35c67b38d826
import  -/  StreetRun.Sound_effects d6b1e92985bd34983de20a110cbdad5e
  exports: eb4fe4175b79b0dda794b44c2a2faa67
  AudioSfx 61b40e20c8ad121c087626bea3914def
  addSfxs' 5d7112eff69866d72abf7654300d2670
  clearSfx' f1c69f0b09e0a67514a2e563f54fa253
  playSfx' f4d0cc5cafbc5abe9a769bf6e82a0e5b
import  -/  StreetRun.State 879bfe0721b41cea3eaddf89be35a0d2
  exports: 2ad9459b3bdc4835614d220ed9e341f2
  Vars 94cac8e669b0992d9fdeb1c0cad361f9
  initVars 804dc814ad3dfd1100f71425f3dfa705
import  -/  StreetRun.Title 427b9b65804f28d35ec4680f154ed57b
  exports: 675ba76475a084728ea77f5f00720288
  Title 8b7db90ec4ead404b7a137052a3db498
  titleStep' 43523358cfa25f49a4c68ab19eb01df7
import  -/  text-1.2.3.1:Data.Text.IO 212c84b37676a213f78c7e1b042f7e86
import  -/  transformers-0.5.6.2:Control.Monad.Trans.Reader 56f58e64ea149219b98233a32ddd4759
import  -/  transformers-0.5.6.2:Control.Monad.Trans.State.Lazy ff6ca0dfc09530bd7be56f884563f2c0
4d7912d1d67c18730decb2b6af03ffa8
  $fApplicativeStreetRun :: GHC.Base.Applicative StreetRun.StreetRun
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fFunctorStreetRun
                  StreetRun.$fApplicativeStreetRun1
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c<*>
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a -> b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$cliftA2
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <c>_N)
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c<*
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
e26606d22bd74dc54cc8612849cea8bd
  $fApplicativeStreetRun1 ::
    a
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (eta :: a)
                   (eta1 :: StreetRun.Config.Config)
                   (eta2 :: StreetRun.State.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3, (eta, eta2) #)) -}
44fc9a11f8c78bcccb4c72adbfa22d2d
  $fApplicativeStreetRun_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,1*C1(C(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           b)
                   (r1 :: r) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           StreetRun.State.Vars GHC.Types.IO a
                   = u `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 let {
                   k :: Control.Monad.Trans.State.Lazy.StateT
                          StreetRun.State.Vars GHC.Types.IO b
                   = v `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <b>_N)
                       r1
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (k `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <StreetRun.State.Vars>_N <GHC.Types.IO>_R <b>_N)
                     (case ipv1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <(b, StreetRun.State.Vars)>_R)
                    ipv })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <b>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT
                       StreetRun.State.Vars GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <b>_N)) -}
f525e527fc67f9c53dc1aa20fa9863fd
  $fApplicativeStreetRun_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           b)
                   (r1 :: r) ->
                 Control.Monad.Trans.State.Lazy.$fApplicativeStateT2
                   @ GHC.Types.IO
                   @ StreetRun.State.Vars
                   GHC.Base.$fFunctorIO
                   GHC.Base.$fMonadIO
                   @ a
                   @ b
                   @ a
                   (GHC.Base.const @ a @ b)
                   (u `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <a>_N)
                      r1)
                   (v `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <b>_N)
                      r1))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT
                       StreetRun.State.Vars GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         b>_R
                 ->_R (<r>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <StreetRun.State.Vars>_N
                                     <GHC.Types.IO>_R
                                     <a>_N)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <r>_R
                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                           StreetRun.State.Vars GHC.Types.IO>_R
                                                        <a>_N)) -}
df47116eeb43992ad37cfe1992b39920
  $fApplicativeStreetRun_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*C1(U),1*U)))))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           a)
                   (r1 :: r) ->
                 let {
                   ds :: Control.Monad.Trans.State.Lazy.StateT
                           StreetRun.State.Vars GHC.Types.IO (a -> b)
                   = f `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a -> b>_N)
                       r1
                 } in
                 let {
                   ds1 :: Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO a
                   = v `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a -> b>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a -> b, StreetRun.State.Vars)>_R)
                         s of ds2 { (#,#) ipv ipv1 ->
                  case (ds1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                          (case ipv1 of wild { (,) f1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R)
                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                  (# ipv2,
                     (case ipv1 of wild { (,) f1 s' ->
                      f1 (case ipv3 of wild1 { (,) x s'' -> x }) },
                      case ipv3 of wild { (,) x s'' -> s'' }) #) } })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <b>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT
                       StreetRun.State.Vars GHC.Types.IO)
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <b>_N)) -}
c3aa41416113a1e43e05b5d8b9a788ee
  $fApplicativeStreetRun_$s$fApplicativeReaderT_$cliftA2 ::
    (a -> b -> c)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ r
                   @ a
                   @ b
                   @ c
                   (f :: a -> b -> c)
                   (x :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           a)
                   (y :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           b)
                   (r1 :: r) ->
                 Control.Monad.Trans.State.Lazy.$fApplicativeStateT2
                   @ GHC.Types.IO
                   @ StreetRun.State.Vars
                   GHC.Base.$fFunctorIO
                   GHC.Base.$fMonadIO
                   @ a
                   @ b
                   @ c
                   f
                   (x `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <a>_N)
                      r1)
                   (y `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <b>_N)
                      r1))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <a -> b -> c>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         b>_R
                 ->_R (<r>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <StreetRun.State.Vars>_N
                                     <GHC.Types.IO>_R
                                     <c>_N)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <r>_R
                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                           StreetRun.State.Vars GHC.Types.IO>_R
                                                        <c>_N)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fAudioSfxStreetRun ::
    StreetRun.Sound_effects.AudioSfx StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fAudioSfxStreetRun2
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioSfxStreetRun1
                    `cast`
                  (<[StreetRun.Sfx.Sfx]>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioSfxStreetRun_$cplaySfx -}
6b601ae9e95201dc6879ed4cdc61b872
  $fAudioSfxStreetRun1 ::
    [StreetRun.Sfx.Sfx]
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U><L,A><L,1*U(1*U(U,U,1*U),U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (w2 :: [StreetRun.Sfx.Sfx])
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars
                       (case ds of wild1 { StreetRun.Common.CommonVars ds11 ds12 ds13 ->
                        StreetRun.Common.CommonVars
                          ds11
                          ds12
                          (GHC.Base.augment
                             @ StreetRun.Sfx.Sfx
                             (\ @ b
                                (c :: StreetRun.Sfx.Sfx -> b -> b)[OneShot]
                                (n :: b)[OneShot] ->
                              GHC.Base.foldr @ StreetRun.Sfx.Sfx @ b c n w2)
                             ds13) })
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       ds7 }) #)) -}
2f3f456b94c9cbeb53699af45294942a
  $fAudioSfxStreetRun2 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*U(U,U,A),U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars
                       (case ds of wild1 { StreetRun.Common.CommonVars ds11 ds12 ds13 ->
                        StreetRun.Common.CommonVars
                          ds11
                          ds12
                          (GHC.Types.[] @ StreetRun.Sfx.Sfx) })
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       ds7 }) #)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fAudioSfxStreetRun_$cplaySfx :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Sound_effects.playSfx'
                   @ StreetRun.StreetRun
                   @ StreetRun.State.Vars
                   StreetRun.$fAudioStreetRun
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fAudioStreetRun :: StreetRun.Audio.Audio StreetRun.StreetRun
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fAudioStreetRun15
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun14
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun13
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun12
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun11
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun10
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun9
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun8
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun7
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun6
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun5
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun4
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun3
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun2
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
f01f88facfe5cdc6c80457b757cbf538
  $fAudioStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        128#
                        eta1 of wild { (#,#) ds4 ds5 ->
                 (# ds4, (GHC.Tuple.(), eta) #) }) -}
0274e00a0f7d000f4e9141c17331a784
  $fAudioStreetRun10 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds16
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
b0d0031b07cd2d28ef89d2f874d444dc
  $fAudioStreetRun11 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds15
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
7134e015cbe3655e05c9e17beedb54c1
  $fAudioStreetRun12 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds14
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
0ea43e75a1252525440bca11e6c9df69
  $fAudioStreetRun13 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds13
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
8f73df671b2a0162476d3075d14bd6af
  $fAudioStreetRun14 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.State#
                                                         GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        eta1 of wild { (#,#) ds1 ds2 ->
                 (# ds1, (GHC.Tuple.(), eta) #) }) -}
b2c06f192db2fa4da7d8ae5cbaee7f3d
  $fAudioStreetRun15 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <S(LLS(LLLLLLLLS(S)LLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { StreetRun.Config.Config ww1 ww2 ww3 ->
                 case ww3 of ww4 { StreetRun.Assets.Resources ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ->
                 case ww13
                        `cast`
                      (SDL.Mixer.N:Music[0]) of ww33 { GHC.Ptr.Ptr ww34 ->
                 StreetRun.$w$splayGameMusic' ww34 w1 w2 } } }) -}
0dcf4cbb85e858ca94e8fae4cf7a05f8
  $fAudioStreetRun2 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        16#
                        eta1 of wild { (#,#) ds4 ds5 ->
                 (# ds4, (GHC.Tuple.(), eta) #) }) -}
a937aff489f2a0e70a0566c9689b52ab
  $fAudioStreetRun3 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds23
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
aaf941902e626707b28fcb9b62427855
  $fAudioStreetRun4 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds22
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
b469ebac78623c033f609a3e1ab84d42
  $fAudioStreetRun5 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds21
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
40f6c5a00ce942fa6dcbc43ba57a7f5b
  $fAudioStreetRun6 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds19
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
4ac2cebf1bb0730055d82bf5eda5eec1
  $fAudioStreetRun7 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds20
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
f6e7e45645a56a34e959482b70fde8ff
  $fAudioStreetRun8 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds18
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
0e56c432048cd4c3e40abde9dbd6cb27
  $fAudioStreetRun9 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds17
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fCameraControlStreetRun ::
    StreetRun.Picture.CameraControl StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fCameraControlStreetRun1
                    `cast`
                  (<StreetRun.Camera.Camera>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
041d62561f8bfba16d6c909c6f3b95c5
  $fCameraControlStreetRun1 ::
    StreetRun.Camera.Camera
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(U(U(U),U(U)),U(U,U))><L,1*U(A,1*U(U),A)><L,1*U(U,U,U,U,U,U,U,A)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: StreetRun.Camera.Camera)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { StreetRun.Camera.Camera ww1 ww2 ->
                 StreetRun.$w$sadjustCamera' ww1 ww2 w1 w2 w3 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fClockStreetRun :: StreetRun.CFL.Clock StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fClockStreetRun1
                    `cast`
                  (<GHC.Types.Int>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
cd85f3f52208cc3e180d2079b93f34d6
  $fClockStreetRun1 ::
    GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,A><L,U><S,U>, Inline: [2],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 StreetRun.$w$cdelayMilliseconds w w2 w3) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fDeathStreetRun :: StreetRun.Death.Death StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fDeathStreetRun_$cdeathStep -}
4d7912d1d67c18730decb2b6af03ffa8
  $fDeathStreetRun_$cdeathStep :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Death.deathStep'
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasPlayVarsVars_$cplayVars
                     `cast`
                   (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fSceneManagerStreetRun
                   StreetRun.$fHasInputStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fCameraControlStreetRun
                   StreetRun.$fHUDStreetRun) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fFunctorStreetRun :: GHC.Base.Functor StreetRun.StreetRun
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  (StreetRun.$fFunctorStreetRun_$s$fFunctorReaderT_$cfmap
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  (StreetRun.$fFunctorStreetRun_$s$fFunctorReaderT_$c<$
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
e119fbe04be4cf639afe007d8bf72bfd
  $fFunctorStreetRun_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (x :: a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           b)
                   (x1 :: r) ->
                 let {
                   eta :: Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO b
                   = v `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <b>_N)
                       x1
                 } in
                 (\ (eta1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (eta
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <b>_N)
                          eta1)
                         `cast`
                       (GHC.Types.N:IO[0] <(b, StreetRun.State.Vars)>_R)
                         s of ds { (#,#) ipv ipv1 ->
                  (# ipv, (x, case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(a,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <a>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <a>_N)) -}
eeaa68a89b1eaff96d62d1063db4389a
  $fFunctorStreetRun_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        StreetRun.State.Vars GHC.Types.IO)
                   @ a
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        StreetRun.State.Vars GHC.Types.IO)
                   @ b
                   @ r
                   (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap
                      @ GHC.Types.IO
                      @ StreetRun.State.Vars
                      GHC.Base.$fFunctorIO
                      @ a
                      @ b
                      f)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fGameOverStreetRun ::
    StreetRun.GameOver.GameOver StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fGameOverStreetRun_$cgameOverStep -}
4d7912d1d67c18730decb2b6af03ffa8
  $fGameOverStreetRun_$cgameOverStep :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.GameOver.gameOverStep'
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasPlayVarsVars_$cplayVars
                     `cast`
                   (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasGameOverVarsVars_$cgameOverVars
                     `cast`
                   (Sym (StreetRun.Out_func.N:HasGameOverVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fSceneManagerStreetRun
                   StreetRun.$fHasInputStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fCameraControlStreetRun
                   StreetRun.$fHUDStreetRun) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun :: StreetRun.HUD.HUD StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fHUDStreetRun5
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHUDStreetRun3
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHUDStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U)))><S(LLLLS(LLLS(S)LLLLLLLLLLLL)LLL),1*U(U,U,U,U,U(U,U,U,U(U),U,U,U,U,U,U,U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 case ds4 of wild1 { StreetRun.Work.PlayVars ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds8 ds9 ds10 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 case ds14
                        `cast`
                      (StreetRun.Types.N:Seconds[0]) of wild2 { GHC.Types.F# x ->
                 case GHC.Prim.ltFloat# x 0.0# of lwild {
                   DEFAULT -> (# eta1, (GHC.Tuple.(), wild) #)
                   1#
                   -> StreetRun.$w$cdrawControlsText
                        StreetRun.HUD.drawControls'4
                        StreetRun.HUD.drawControls'3
                        r1
                        wild
                        eta1 } } } }) -}
fbcb01a5557abd21b9e9b0c99883fb76
  $fHUDStreetRun2 ::
    GHC.Types.IO a
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (x :: GHC.Types.IO a)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x `cast` (GHC.Types.N:IO[0] <a>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, (ipv1, eta1) #) }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun3 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,U><S(LLLLS(S(S)LLLLLLLLLLLLLLL)LLL),1*U(U,U,U,U,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 case ds4 of wild1 { StreetRun.Work.PlayVars ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds8 ds9 ds10 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 case ds11
                        `cast`
                      (StreetRun.Types.N:Score[0]) of wild2 { GHC.Types.I# i ->
                 (((StreetRun.HUD.$wdrawNumbers
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun_$dRenderer1
                      (GHC.Integer.Type.smallInteger i)
                      StreetRun.HUD.drawHiscore'2
                      StreetRun.HUD.drawScore'1)
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     r1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    wild)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   eta1 } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun4 ::
    StreetRun.Font.Number
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,U><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: StreetRun.Font.Number)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawNumber w ww1 ww2 w2 w3 w4 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun5 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U))><L,U(U(U(U),U,U),U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case StreetRun.$w$cdrawHiscoreText
                        StreetRun.HUD.drawHiscore'40
                        StreetRun.HUD.drawHiscore'39
                        r1
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case eta of wild { StreetRun.State.Vars ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds of wild1 { StreetRun.Common.CommonVars ds9 ds10 ds11 ->
                 case ds9
                        `cast`
                      (StreetRun.Types.N:Score[0]) of wild2 { GHC.Types.I# i ->
                 (((StreetRun.HUD.$wdrawNumbers
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun_$dRenderer2
                      (GHC.Integer.Type.smallInteger i)
                      StreetRun.HUD.drawHiscore'2
                      StreetRun.HUD.drawHiscore'1)
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     r1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    (case ipv1 of wild3 { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun6 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawHiscoreText ww1 ww2 w1 w2 w3 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun_$dRenderer :: GHC.Base.Monad StreetRun.StreetRun
  {- Strictness: m,
     Unfolding: (GHC.Base.C:Monad
                   @ StreetRun.StreetRun
                   (StreetRun.HUD.drawHiscore'36 @ StreetRun.StreetRun)
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   StreetRun.$fApplicativeStreetRun1
                     `cast`
                   (forall (a :: <*>_N).
                    <a>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(a,
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                   (StreetRun.HUD.drawHiscore'34 @ StreetRun.StreetRun)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun_$dRenderer1 ::
    StreetRun.Renderer.Renderer StreetRun.StreetRun
  {- Unfolding: (StreetRun.Renderer.C:Renderer
                   @ StreetRun.StreetRun
                   StreetRun.$fHUDStreetRun_$dRenderer
                   (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'30 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'28 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'26 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'24 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'22 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'20 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'18 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'16 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'14 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'12 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'10 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'8 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'4 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   StreetRun.$fHUDStreetRun4
                     `cast`
                   (<StreetRun.Font.Number>_R
                    ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <((),
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <StreetRun.Config.Config>_R
                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                              StreetRun.State.Vars
                                                                                                              GHC.Types.IO>_R
                                                                                                           <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHUDStreetRun_$dRenderer2 ::
    StreetRun.Renderer.Renderer StreetRun.StreetRun
  {- Unfolding: (StreetRun.Renderer.C:Renderer
                   @ StreetRun.StreetRun
                   StreetRun.$fHUDStreetRun_$dRenderer
                   (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'30 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'28 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'26 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'24 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'22 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'20 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'18 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'16 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'14 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'12 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'10 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'8 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'4 @ StreetRun.StreetRun)
                   StreetRun.$fHUDStreetRun6
                     `cast`
                   (<(GHC.Types.Int, GHC.Types.Int)>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <((),
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <StreetRun.Config.Config>_R
                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                              StreetRun.State.Vars
                                                                                                              GHC.Types.IO>_R
                                                                                                           <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   StreetRun.$fHUDStreetRun4
                     `cast`
                   (<StreetRun.Font.Number>_R
                    ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <((),
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <StreetRun.Config.Config>_R
                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                              StreetRun.State.Vars
                                                                                                              GHC.Types.IO>_R
                                                                                                           <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fHasInputStreetRun :: StreetRun.Load.HasInput StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fHasInputStreetRun3
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHasInputStreetRun2
                    `cast`
                  (<StreetRun.Input.Input>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHasInputStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(StreetRun.Input.Input,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <StreetRun.Input.Input>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                        <StreetRun.Config.Config>_R
                                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                           StreetRun.State.Vars
                                                                                                                           GHC.Types.IO>_R
                                                                                                                        <StreetRun.Input.Input>_N) ; Sym (StreetRun.N:StreetRun[0]) <StreetRun.Input.Input>_N)) -}
64184ac1a16188f0273d3e8c7928e669
  $fHasInputStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (StreetRun.Input.Input, StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     ds7 },
                     eta) #)) -}
6657fb3289949effd9c9abf43e502aa5
  $fHasInputStreetRun2 ::
    StreetRun.Input.Input
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U,U,A,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (input :: StreetRun.Input.Input)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 input ds7 }) #)) -}
db51a7613fcd1d38eb2e0d6c3cb21463
  $fHasInputStreetRun3 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,A><L,1*U(U,U,U,U,U,U,1*U(U(U,U),U(U,U),U(U,U),U(U,U),A),U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 StreetRun.$w$cupdateInput w1 w2) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fLoggerStreetRun :: StreetRun.CFL.Logger StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fLoggerStreetRun1
                    `cast`
                  (<Data.Text.Internal.Text>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
8df05932b6199e7a76ee37b8b6ec99a3
  $fLoggerStreetRun1 ::
    Data.Text.Internal.Text
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, Strictness: <L,1*U(U,U,U)><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (x :: Data.Text.Internal.Text)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Data.Text.IO.appendFile2
                        GHC.IO.Handle.FD.stdout
                        x
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.$whPutChar
                        GHC.IO.Handle.FD.stdout
                        '\n'#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, (ipv3, eta1) #) } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fMonadCatchStreetRun ::
    Control.Monad.Catch.MonadCatch StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadThrowStreetRun
                  StreetRun.$fMonadCatchStreetRun1
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Type.Exception e>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R (<e>_R ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <StreetRun.Config.Config>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    StreetRun.State.Vars GHC.Types.IO>_R
                                 <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
bec120a24b834e8d469567e6e1fe3181
  $fMonadCatchStreetRun1 ::
    GHC.Exception.Type.Exception e =>
    Control.Monad.Trans.Reader.ReaderT
      StreetRun.Config.Config
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      a
    -> (e
        -> Control.Monad.Trans.Reader.ReaderT
             StreetRun.Config.Config
             (Control.Monad.Trans.State.Lazy.StateT
                StreetRun.State.Vars GHC.Types.IO)
             a)
    -> StreetRun.Config.Config
    -> Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(U),A)><L,1*C1(C(C1(U)))><L,C(C1(C1(C1(U))))><L,U>,
     Unfolding: (\ @ e
                   @ a
                   ($dException :: GHC.Exception.Type.Exception e)
                   (ds :: Control.Monad.Trans.Reader.ReaderT
                            StreetRun.Config.Config
                            (Control.Monad.Trans.State.Lazy.StateT
                               StreetRun.State.Vars GHC.Types.IO)
                            a)
                   (c :: e
                         -> Control.Monad.Trans.Reader.ReaderT
                              StreetRun.Config.Config
                              (Control.Monad.Trans.State.Lazy.StateT
                                 StreetRun.State.Vars GHC.Types.IO)
                              a)
                   (r1 :: StreetRun.Config.Config) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           StreetRun.State.Vars GHC.Types.IO a
                   = ds
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <StreetRun.Config.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  GHC.Prim.catch#
                    @ (a, StreetRun.State.Vars)
                    @ GHC.Exception.Type.SomeException
                    (m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                       s1)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R)
                    (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot] ->
                     case GHC.Exception.Type.fromException @ e $dException e1 of wild {
                       GHC.Maybe.Nothing
                       -> GHC.Prim.raiseIO#
                            @ GHC.Exception.Type.SomeException
                            @ (a, StreetRun.State.Vars)
                            e1
                       GHC.Maybe.Just e'
                       -> (((c e')
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <StreetRun.Config.Config>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    StreetRun.State.Vars GHC.Types.IO>_R
                                 <a>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                             s1)
                            `cast`
                          (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R) })
                    eta)
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(a,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <a>_N))) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fMonadIOStreetRun ::
    Control.Monad.IO.Class.MonadIO StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fHUDStreetRun2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fMonadReaderStreetRun ::
    Control.Monad.Reader.Class.MonadReader
      StreetRun.Config.Config StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Config.Config
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fMonadReaderStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(StreetRun.Config.Config,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <StreetRun.Config.Config>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                          <StreetRun.Config.Config>_R
                                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                             StreetRun.State.Vars
                                                                                                                             GHC.Types.IO>_R
                                                                                                                          <StreetRun.Config.Config>_N) ; Sym (StreetRun.N:StreetRun[0]) <StreetRun.Config.Config>_N))
                  (Control.Monad.Trans.Reader.withReaderT
                     @ StreetRun.Config.Config
                     @ StreetRun.Config.Config
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          StreetRun.State.Vars GHC.Types.IO))
                    `cast`
                  (forall (a :: <*>_N).
                   <StreetRun.Config.Config -> StreetRun.Config.Config>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                  (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N).
                   <StreetRun.Config.Config -> a>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
66a2977113bcb57f80439651cf608950
  $fMonadReaderStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (StreetRun.Config.Config, StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (eta, eta1) #)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fMonadStateStreetRun ::
    Control.Monad.State.Class.MonadState
      StreetRun.State.Vars StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.State.Vars
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fMonadStateStreetRun3
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(StreetRun.State.Vars,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <StreetRun.State.Vars>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                       <StreetRun.Config.Config>_R
                                                                                                                       <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                          StreetRun.State.Vars
                                                                                                                          GHC.Types.IO>_R
                                                                                                                       <StreetRun.State.Vars>_N) ; Sym (StreetRun.N:StreetRun[0]) <StreetRun.State.Vars>_N))
                  StreetRun.$fMonadStateStreetRun2
                    `cast`
                  (<StreetRun.State.Vars>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fMonadStateStreetRun1
                    `cast`
                  (forall (a :: <*>_N).
                   <StreetRun.State.Vars -> (a, StreetRun.State.Vars)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N)) -}
8a56062d9926481182a36f82e12d056d
  $fMonadStateStreetRun1 ::
    (StreetRun.State.Vars -> (a, StreetRun.State.Vars))
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*C1(U)><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (eta :: StreetRun.State.Vars -> (a, StreetRun.State.Vars))
                   (eta1 :: StreetRun.Config.Config)
                   (eta2 :: StreetRun.State.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3, eta eta2 #)) -}
4517764809150b9e4e9f49fef9516c00
  $fMonadStateStreetRun2 ::
    StreetRun.State.Vars
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (eta :: StreetRun.State.Vars)
                   (eta1 :: StreetRun.Config.Config)
                   (eta2 :: StreetRun.State.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3, (GHC.Tuple.(), eta) #)) -}
cb172172ea02510cf28141def6c3442a
  $fMonadStateStreetRun3 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (StreetRun.State.Vars, StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (x :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (x, x) #)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fMonadStreetRun :: GHC.Base.Monad StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fApplicativeStreetRun
                  (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  StreetRun.$fApplicativeStreetRun1
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                  (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$cfail
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
6242ee9ea90b383c1c4951e9e45f8eeb
  $fMonadStreetRun_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r
             (Control.Monad.Trans.State.Lazy.StateT
                StreetRun.State.Vars GHC.Types.IO)
             b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,C(C1(C1(C1(U))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT
                               StreetRun.State.Vars GHC.Types.IO)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.State.Lazy.StateT
                                 StreetRun.State.Vars GHC.Types.IO)
                              b)
                   (r1 :: r) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           StreetRun.State.Vars GHC.Types.IO a
                   = m1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (((k (case ipv1 of wild { (,) a1 s' -> a1 }))
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <b>_N)
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <StreetRun.State.Vars>_N <GHC.Types.IO>_R <b>_N)
                     (case ipv1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <(b, StreetRun.State.Vars)>_R)
                    ipv })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <b>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT
                       StreetRun.State.Vars GHC.Types.IO)
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT
                               StreetRun.State.Vars GHC.Types.IO)
                            b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <b>_N)) -}
e3d4d439cbb520dab9d7c276181fb4f5
  $fMonadStreetRun_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
  {- Arity: 3, Strictness: <L,U><L,A><L,A>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: StreetRun.State.Vars
                         -> GHC.Types.IO (a, StreetRun.State.Vars)
                     {- Arity: 1 -}
                   = \ (ds :: StreetRun.State.Vars) ->
                     GHC.Magic.noinline
                       @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a1 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                       @ (a, StreetRun.State.Vars)
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 ((<r>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <StreetRun.State.Vars>_N
                                 <GHC.Types.IO>_R
                                 <a>_N)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <r>_R
                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                       StreetRun.State.Vars GHC.Types.IO>_R
                                                    <a>_N))) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fMonadThrowStreetRun ::
    Control.Monad.Catch.MonadThrow StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fMonadThrowStreetRun1
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Type.Exception e>_R
                   ->_R <e>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N)) -}
53cc3a02d10bf8ce9aadf992aa2737c0
  $fMonadThrowStreetRun1 ::
    GHC.Exception.Type.Exception e =>
    e
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, StreetRun.State.Vars) #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,A><B,U>b,
     Unfolding: InlineRule (5, True, False)
                (\ @ e
                   @ a
                   ($dException :: GHC.Exception.Type.Exception e)
                   (eta :: e)
                   (eta1 :: StreetRun.Config.Config)
                   (eta2 :: StreetRun.State.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ a
                        (GHC.Exception.Type.toException @ e $dException eta)
                        eta3
                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                           (a, StreetRun.State.Vars) #)
                 of {}) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fPauseStreetRun :: StreetRun.Pause.Pause StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fPauseStreetRun_$cpauseStep -}
4d7912d1d67c18730decb2b6af03ffa8
  $fPauseStreetRun_$cpauseStep :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Pause.pauseStep'
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasPlayVarsVars_$cplayVars
                     `cast`
                   (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fSceneManagerStreetRun
                   StreetRun.$fHasInputStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fCameraControlStreetRun
                   StreetRun.$fHUDStreetRun) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fPlayStreetRun :: StreetRun.Play.Play StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fPlayStreetRun_$cplayStep -}
4d7912d1d67c18730decb2b6af03ffa8
  $fPlayStreetRun_$cplayStep :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Play.playStep'
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasPlayVarsVars_$cplayVars
                     `cast`
                   (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fLoggerStreetRun
                   StreetRun.$fCameraControlStreetRun
                   StreetRun.$fClockStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fAudioStreetRun
                   StreetRun.$fAudioSfxStreetRun
                   StreetRun.$fHasInputStreetRun
                   StreetRun.$fSceneManagerStreetRun
                   StreetRun.$fHUDStreetRun) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun ::
    StreetRun.Renderer.Renderer StreetRun.StreetRun
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fRendererStreetRun27
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun26
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun25
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Runner.RunnerKey
                                            (Animate.SpriteClip StreetRun.Runner.RunnerKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Runner.RunnerKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Runner.RunnerKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Runner.RunnerKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Runner.RunnerKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Runner.RunnerKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Runner.RunnerKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun24
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Snag.LavaKey
                                            (Animate.SpriteClip StreetRun.Snag.LavaKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Snag.LavaKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Snag.LavaKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Snag.LavaKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Snag.LavaKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Snag.LavaKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Snag.LavaKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun23
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Snag.RockKey
                                            (Animate.SpriteClip StreetRun.Snag.RockKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Snag.RockKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Snag.RockKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Snag.RockKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Snag.RockKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Snag.RockKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Snag.RockKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun22
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Snag.BirdKey
                                            (Animate.SpriteClip StreetRun.Snag.BirdKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Snag.BirdKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Snag.BirdKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Snag.BirdKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Snag.BirdKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Snag.BirdKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Snag.BirdKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun21
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Scenario.BuildingKey
                                            (Animate.SpriteClip StreetRun.Scenario.BuildingKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Scenario.BuildingKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Scenario.BuildingKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Scenario.BuildingKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Scenario.BuildingKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Scenario.BuildingKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Scenario.BuildingKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun20
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Scenario.GrassKey
                                            (Animate.SpriteClip StreetRun.Scenario.GrassKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Scenario.GrassKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Scenario.GrassKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Scenario.GrassKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Scenario.GrassKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Scenario.GrassKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Scenario.GrassKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun19
                    `cast`
                  (<Animate.SpriteClip StreetRun.Runner.RunnerKey>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun18
                    `cast`
                  (<Animate.SpriteClip StreetRun.Snag.LavaKey>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun17
                    `cast`
                  (<Animate.SpriteClip StreetRun.Snag.RockKey>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun16
                    `cast`
                  (<Animate.SpriteClip StreetRun.Snag.BirdKey>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun_$cdrawBuilding
                  StreetRun.$fRendererStreetRun_$cdrawGrass
                  StreetRun.$fRendererStreetRun_$cdrawBackStreet
                  StreetRun.$fRendererStreetRun_$cdrawStreet
                  StreetRun.$fRendererStreetRun7
                    `cast`
                  (<StreetRun.Types.Percent>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHUDStreetRun6
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun6
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun5
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun4
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun3
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun2
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHUDStreetRun4
                    `cast`
                  (<StreetRun.Font.Number>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun1
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U)))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawControlsText ww1 ww2 w1 w2 w3 }) -}
c0e2b6888237162b129e39132dd1004c
  $fRendererStreetRun10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
0a6b0607520cc34c93d75524a140fd44
  $fRendererStreetRun11 ::
    StreetRun.Config.Config -> SDL.Video.Renderer.Texture
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LLSLLLLLLLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds6 } }) -}
f6e2fe8254825c3b256007dcdbcc3775
  $fRendererStreetRun12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
2ce9a2837fea0c3d88366ad3321c8468
  $fRendererStreetRun13 ::
    StreetRun.Config.Config
    -> Animate.SpriteSheet
         StreetRun.Scenario.GrassKey
         SDL.Video.Renderer.Texture
         StreetRun.Types.Seconds
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LSLLLLLLLLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,1*U(U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds5 } }) -}
8b2c34fa58253bdde83d2d1ea25aed3f
  $fRendererStreetRun14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
7e0cc5064a003e4026ca028f5aab1560
  $fRendererStreetRun15 ::
    StreetRun.Config.Config
    -> Animate.SpriteSheet
         StreetRun.Scenario.BuildingKey
         SDL.Video.Renderer.Texture
         StreetRun.Types.Seconds
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(SLLLLLLLLLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(1*U(U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds4 } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun16 ::
    Animate.SpriteClip StreetRun.Snag.BirdKey
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Snag.BirdKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawBird w ww1 ww2 w2 w3 w4 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun17 ::
    Animate.SpriteClip StreetRun.Snag.RockKey
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Snag.RockKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawRock w ww1 ww2 w2 w3 w4 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun18 ::
    Animate.SpriteClip StreetRun.Snag.LavaKey
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Snag.LavaKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawLava w ww1 ww2 w2 w3 w4 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun19 ::
    Animate.SpriteClip StreetRun.Runner.RunnerKey
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Runner.RunnerKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawRunner w ww1 ww2 w2 w3 w4 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun2 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawTitleText ww1 ww2 w1 w2 w3 }) -}
41e83fa3e4450e3deacef3509669c2e6
  $fRendererStreetRun20 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Scenario.GrassKey
             (Animate.SpriteClip StreetRun.Scenario.GrassKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds5 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
7174bdfda9d45d173f80cbab1c3780a4
  $fRendererStreetRun21 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Scenario.BuildingKey
             (Animate.SpriteClip StreetRun.Scenario.BuildingKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds4 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
b0e04e8e2ff32c75b718d54baca33f96
  $fRendererStreetRun22 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Snag.BirdKey
             (Animate.SpriteClip StreetRun.Snag.BirdKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds9 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
c8c74ae28fc98bc1e1e3abf641bd3182
  $fRendererStreetRun23 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Snag.RockKey
             (Animate.SpriteClip StreetRun.Snag.RockKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds11 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
5e6eb7c03318b3d037ae670e7bb83c7f
  $fRendererStreetRun24 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Snag.LavaKey
             (Animate.SpriteClip StreetRun.Snag.LavaKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds10 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
94e6c4dc948e66f1e817a550d82899ef
  $fRendererStreetRun25 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Runner.RunnerKey
             (Animate.SpriteClip StreetRun.Runner.RunnerKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds8 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
5982b6f5e8cd519e1515eeb3a7ed015e
  $fRendererStreetRun26 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds2
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds { GHC.Ptr.Ptr ds4 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds4
                        eta1 of wild1 { Unit# ds5 ->
                 (# ds5, (GHC.Tuple.(), eta) #) } } }) -}
9b386ed4cdbd1992122caedc03530e55
  $fRendererStreetRun27 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { StreetRun.Config.Config ww1 ww2 ww3 ->
                 case ww2
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ww4 { GHC.Ptr.Ptr ww5 ->
                 StreetRun.$w$cclearScreen ww5 w1 w2 } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun3 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawPressEscapeText ww1 ww2 w1 w2 w3 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun4 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawPressSpaceText ww1 ww2 w1 w2 w3 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun5 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawGameOverText ww1 ww2 w1 w2 w3 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun6 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawPauseText ww1 ww2 w1 w2 w3 }) -}
b94904b48f5a7c4eb18f660bccb2a1de
  $fRendererStreetRun7 ::
    StreetRun.Types.Percent
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,U(A,U(U),A)><L,U><S,U>,
     Unfolding: (\ (w3 :: StreetRun.Types.Percent)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   eta3 :: SDL.Internal.Types.Renderer
                   = case eta of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 case SDL.Video.Renderer.$wrendererDrawBlendMode
                        eta3 of ww3 { (#,#) ww4 ww5 ->
                 case (ww5 SDL.Video.Renderer.BlendAlphaBlend)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case SDL.Video.Renderer.$wrendererDrawColor
                        eta3 of ww1 { (#,#) ww2 ww6 ->
                 case (ww6
                         (case w3
                                 `cast`
                               (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# y ->
                          Linear.V4.V4
                            @ GHC.Word.Word8
                            StreetRun.Renderer_func_2.drawBlackOverlay'2
                            StreetRun.Renderer_func_2.drawBlackOverlay'2
                            StreetRun.Renderer_func_2.drawBlackOverlay'2
                            (GHC.Word.W8#
                               (GHC.Prim.narrow8Word#
                                  (GHC.Prim.int2Word#
                                     (GHC.Prim.float2Int# (GHC.Prim.timesFloat# 255.0# y))))) }))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { StreetRun.Config.Config ds3 ds4 ds5 ->
                 case ds4
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds8 { GHC.Ptr.Ptr ds9 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        ds9
                        __NULL
                        ipv2 of wild1 { (#,#) ds10 ds11 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds11) 0# of lwild {
                   DEFAULT
                   -> case (ww5 SDL.Video.Renderer.BlendNone)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ds10 of ds6 { (#,#) ipv4 ipv5 ->
                      (# ipv4, (ipv5, eta1) #) }
                   1#
                   -> case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.State#
                                                          GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Addr# #)}
                             ds10 of wild2 { (#,#) ds6 ds7 ->
                      case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Word# #)}
                             ds7
                             ds6 of wild3 { (#,#) ds14 ds15 ->
                      case StreetRun.Renderer_func_2.drawBlackOverlay'1
                             ds15
                             ds14
                             ds7 of ds16 { (#,#) ipv4 ipv5 ->
                      case (ww5 SDL.Video.Renderer.BlendNone)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv4 of ds17 { (#,#) ipv6 ipv7 ->
                      (# ipv6, (ipv7, eta1) #) } } } } } } } } } } } }) -}
9f0deb3f85195a4e95ad018a84c02971
  $fRendererStreetRun8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
4cfeccbb049b9f3401c1cd770b67d98c
  $fRendererStreetRun9 ::
    StreetRun.Config.Config -> SDL.Video.Renderer.Texture
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LLLSLLLLLLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds7 } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun_$cdrawBackStreet ::
    (GHC.Types.Int, GHC.Types.Int) -> StreetRun.StreetRun ()
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawBackStreet ww1 ww2 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun_$cdrawBuilding ::
    StreetRun.Types.DrawSprite
      StreetRun.Scenario.BuildingKey StreetRun.StreetRun
  {- Arity: 2,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(U(U),U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Scenario.BuildingKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawBuilding w ww1 ww2 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun_$cdrawGrass ::
    StreetRun.Types.DrawSprite
      StreetRun.Scenario.GrassKey StreetRun.StreetRun
  {- Arity: 2,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(U(U),U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Scenario.GrassKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawGrass w ww1 ww2 }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fRendererStreetRun_$cdrawStreet ::
    (GHC.Types.Int, GHC.Types.Int) -> StreetRun.StreetRun ()
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawStreet ww1 ww2 }) -}
f79c0dbd84fbb81b654cffd07c9cd34b
  $fRendererStreetRun_$sreader ::
    (r -> a)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (f :: r -> a) (x :: r) ->
                 let {
                   eta :: a = f x
                 } in
                 (\ (eta1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  (# s, (eta, eta1) #))
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(a,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <a>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N).
                 <r -> a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <a>_N)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fSDLInputStreetRun ::
    StreetRun.SDLLayer.SDLInput StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fSDLInputStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <([SDL.Event.EventPayload],
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <[SDL.Event.EventPayload]>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                           <StreetRun.Config.Config>_R
                                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                              StreetRun.State.Vars
                                                                                                                              GHC.Types.IO>_R
                                                                                                                           <[SDL.Event.EventPayload]>_N) ; Sym (StreetRun.N:StreetRun[0]) <[SDL.Event.EventPayload]>_N)) -}
ea077c0a7c67ba030a264c7483991088
  $fSDLInputStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([SDL.Event.EventPayload], StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (SDL.Event.$wpollEvents
                         @ GHC.Types.IO
                         GHC.Base.$fApplicativeIO
                         GHC.Base.$fMonadIO1
                           `cast`
                         (forall (a :: <*>_N) (b :: <*>_N).
                          <GHC.Types.IO a>_R
                          ->_R <a -> GHC.Types.IO b>_R
                          ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                         GHC.Base.$fApplicativeIO4
                           `cast`
                         (forall (a :: <*>_N). <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                         (\ @ a -> GHC.Base.id @ (GHC.Types.IO a)))
                        `cast`
                      (GHC.Types.N:IO[0] <[SDL.Event.Event]>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.Base.build
                       @ SDL.Event.EventPayload
                       (\ @ b1
                          (c :: SDL.Event.EventPayload -> b1 -> b1)[OneShot]
                          (n :: b1)[OneShot] ->
                        GHC.Base.foldr
                          @ SDL.Event.Event
                          @ b1
                          (GHC.Base.mapFB
                             @ SDL.Event.EventPayload
                             @ b1
                             @ SDL.Event.Event
                             c
                             SDL.Event.eventPayload)
                          n
                          ipv1),
                     eta1) #) }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fSDLRendererStreetRun ::
    StreetRun.SDLLayer.SDLRenderer StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fSDLRendererStreetRun_$srenderPresent
                    `cast`
                  (Sym (SDL.Internal.Types.N:Renderer[0])
                   ->_R <StreetRun.StreetRun ()>_R)
                  StreetRun.$fSDLRendererStreetRun1
                    `cast`
                  (<SDL.Internal.Types.Renderer>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fSDLRendererStreetRun_$cqueryTexture
                  StreetRun.$fSDLRendererStreetRun_$cdrawTexture -}
56f0243f656f9f9b03cebcc11a00bd2f
  $fSDLRendererStreetRun1 ::
    SDL.Internal.Types.Renderer
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, Strictness: <S(S),1*U(U)><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (w1 :: SDL.Internal.Types.Renderer)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds9 { GHC.Ptr.Ptr ds10 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        ds10
                        eta2 of wild { (#,#) ds12 ds13 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds13) 0# of lwild {
                   DEFAULT -> (# ds12, (GHC.Tuple.(), eta1) #)
                   1#
                   -> case StreetRun.SDLLayer.clearRenderer'1
                             ds12 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), eta1) #) } } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fSDLRendererStreetRun_$cdrawTexture ::
    SDL.Internal.Types.Renderer
    -> SDL.Video.Renderer.Texture
    -> GHC.Maybe.Maybe
         (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
    -> GHC.Maybe.Maybe
         (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
    -> StreetRun.StreetRun ()
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (w1 :: SDL.Internal.Types.Renderer)
                   (w2 :: SDL.Video.Renderer.Texture)
                   (w3 :: GHC.Maybe.Maybe
                            (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                   (w4 :: GHC.Maybe.Maybe
                            (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)) ->
                 SDL.Video.Renderer.$wcopy
                   @ StreetRun.StreetRun
                   StreetRun.$fHUDStreetRun2
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Types.IO a>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(a,
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                   w1
                   w2
                   w3
                   w4) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fSDLRendererStreetRun_$cqueryTexture ::
    SDL.Video.Renderer.Texture
    -> StreetRun.StreetRun SDL.Video.Renderer.TextureInfo
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: SDL.Video.Renderer.Texture) ->
                 SDL.Video.Renderer.$wqueryTexture
                   @ StreetRun.StreetRun
                   StreetRun.$fHUDStreetRun2
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Types.IO a>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(a,
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                   w1) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fSDLRendererStreetRun_$srenderPresent ::
    SDL.Raw.Types.Renderer -> StreetRun.StreetRun ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,A><L,U><S,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (v1 :: SDL.Raw.Types.Renderer)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case v1 of ds { GHC.Ptr.Ptr ds1 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds1
                        eta2 of wild { Unit# ds3 ->
                 (# ds3, (GHC.Tuple.(), eta1) #) } })
                  `cast`
                (<SDL.Raw.Types.Renderer>_R
                 ->_R (<StreetRun.Config.Config>_R
                       ->_R (<StreetRun.State.Vars>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <((),
                                             StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                   <StreetRun.State.Vars>_N
                                                                                   <GHC.Types.IO>_R
                                                                                   <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                        <StreetRun.Config.Config>_R
                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                           StreetRun.State.Vars
                                                                                                           GHC.Types.IO>_R
                                                                                                        <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fSceneManagerStreetRun ::
    StreetRun.Scene.SceneManager StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fSceneManagerStreetRun1
                    `cast`
                  (<StreetRun.Scenario.Scene>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
50c3753ed7f2b6d32bf37943e81a026c
  $fSceneManagerStreetRun1 ::
    StreetRun.Scenario.Scene
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,A,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (scene :: StreetRun.Scenario.Scene)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars ds ds1 scene ds3 ds4 ds5 ds6 ds7 }) #)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fTitleStreetRun :: StreetRun.Title.Title StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fTitleStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fTitleStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,U><S(LLLLLLS(S(SL)LLLL)L),1*U(U,U,U,U,U,U,U(U(U,U),U,U,U,U),U)><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds7 of wild1 { StreetRun.Input.Input ds11 ds12 ds13 ds14 ds15 ->
                 case ds11 of wild2 { KeyState.KeyState ds16 ds17 ->
                 case ds16 of wild3 {
                   DEFAULT
                   -> case ((StreetRun.$fTitleStreetRun3
                               `cast`
                             (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                    <StreetRun.Config.Config>_R
                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                       StreetRun.State.Vars
                                                                       GHC.Types.IO>_R
                                                                    <()>_N)
                               r1)
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                              wild)
                             `cast`
                           (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                             eta1 of ds18 { (#,#) ipv ipv1 ->
                      ((StreetRun.$fTitleStreetRun2
                          `cast`
                        (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                               <StreetRun.Config.Config>_R
                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                  StreetRun.State.Vars
                                                                  GHC.Types.IO>_R
                                                               <()>_N)
                          r1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                         (case ipv1 of wild4 { (,) a1 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                        ipv }
                   KeyState.KeyStatus'Pressed
                   -> case ((StreetRun.$fTitleStreetRun3
                               `cast`
                             (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                    <StreetRun.Config.Config>_R
                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                       StreetRun.State.Vars
                                                                       GHC.Types.IO>_R
                                                                    <()>_N)
                               r1)
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                              (StreetRun.State.Vars
                                 ds1
                                 ds2
                                 StreetRun.Scenario.Scene'Play
                                 ds4
                                 ds5
                                 ds6
                                 wild1
                                 ds8))
                             `cast`
                           (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                             eta1 of ds18 { (#,#) ipv ipv1 ->
                      ((StreetRun.$fTitleStreetRun2
                          `cast`
                        (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                               <StreetRun.Config.Config>_R
                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                  StreetRun.State.Vars
                                                                  GHC.Types.IO>_R
                                                               <()>_N)
                          r1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                         (case ipv1 of wild4 { (,) a1 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                        ipv } } } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fTitleStreetRun2 :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Title.$wdrawTitle
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                     `cast`
                   (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fApplicativeStreetRun
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fHUDStreetRun) -}
4d7912d1d67c18730decb2b6af03ffa8
  $fTitleStreetRun3 :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Title.$wupdateTitle
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                     `cast`
                   (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                             <StreetRun.State.Vars>_N))
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fRendererStreetRun) -}
958abe06be4f9d00377c86dc4cc51866
  $saddSfxs' :: [StreetRun.Sfx.Sfx] -> StreetRun.StreetRun ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U><L,A><L,1*U(1*U(U,U,1*U),U,U,U,U,U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w2 :: [StreetRun.Sfx.Sfx])
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars
                       (case ds of wild1 { StreetRun.Common.CommonVars ds11 ds12 ds13 ->
                        StreetRun.Common.CommonVars
                          ds11
                          ds12
                          (GHC.Base.augment
                             @ StreetRun.Sfx.Sfx
                             (\ @ b
                                (c :: StreetRun.Sfx.Sfx -> b -> b)[OneShot]
                                (n :: b)[OneShot] ->
                              GHC.Base.foldr @ StreetRun.Sfx.Sfx @ b c n w2)
                             ds13) })
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       ds7 }) #))
                  `cast`
                (<[StreetRun.Sfx.Sfx]>_R
                 ->_R (<StreetRun.Config.Config>_R
                       ->_R (<StreetRun.State.Vars>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <((),
                                             StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                   <StreetRun.State.Vars>_N
                                                                                   <GHC.Types.IO>_R
                                                                                   <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                        <StreetRun.Config.Config>_R
                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                           StreetRun.State.Vars
                                                                                                           GHC.Types.IO>_R
                                                                                                        <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
42f97b4eeacee983d45126d744ad92e0
  $sadjustCamera' ::
    StreetRun.Camera.Camera -> StreetRun.StreetRun ()
  {- Arity: 4,
     Strictness: <S,1*U(U(U(U),U(U)),U(U,U))><L,1*U(A,1*U(U),A)><L,1*U(U,U,U,U,U,U,U,A)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w3 :: StreetRun.Camera.Camera)
                   (r1 :: StreetRun.Config.Config) ->
                 let {
                   eta :: SDL.Internal.Types.Renderer
                   = case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case w3 of ww3 { StreetRun.Camera.Camera ww4 ww5 ->
                  case SDL.Video.Renderer.$wrendererScale
                         eta of ww1 { (#,#) ww2 ww6 ->
                  case (ww6
                          (case ww5 of wild { Linear.V2.V2 a1 b1 ->
                           Linear.V2.V2
                             @ Foreign.C.Types.CFloat
                             a1 `cast` (Sym (Foreign.C.Types.N:CFloat[0]))
                             b1 `cast` (Sym (Foreign.C.Types.N:CFloat[0])) }))
                         `cast`
                       (GHC.Types.N:IO[0] <()>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case SDL.Video.Renderer.$wrendererViewport
                         eta of ww9 { (#,#) ww10 ww11 ->
                  case (ww11
                          (GHC.Maybe.Just
                             @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                             (SDL.Video.Renderer.Rectangle
                                @ Foreign.C.Types.CInt
                                (case ww4 of wild { Linear.V2.V2 x y ->
                                 case x of wild1 { GHC.Types.F# y1 ->
                                 case y of wild2 { GHC.Types.F# y2 ->
                                 case GHC.Float.$w$cproperFraction1
                                        @ Foreign.C.Types.CInt
                                        Foreign.C.Types.$fIntegralCInt
                                        (GHC.Prim.minusFloat# 640.0# y1) of ww7 { (#,#) ww8 ww12 ->
                                 case ww8
                                        `cast`
                                      (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                                 case GHC.Float.$w$cproperFraction1
                                        @ Foreign.C.Types.CInt
                                        Foreign.C.Types.$fIntegralCInt
                                        (GHC.Prim.minusFloat#
                                           640.0#
                                           y2) of ww13 { (#,#) ww14 ww15 ->
                                 case ww14
                                        `cast`
                                      (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                                 (Linear.V2.V2
                                    @ Foreign.C.Types.CInt
                                    nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                    nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])))
                                   `cast`
                                 (Sym (Linear.Affine.N:Point[0]
                                           <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } } } } } } })
                                StreetRun.Picture.adjustCamera'_dim)))
                         `cast`
                       (GHC.Types.N:IO[0] <()>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  case SDL.Video.Renderer.$wrendererClipRect
                         eta of ww12 { (#,#) ww13 ww14 ->
                  case (ww14 StreetRun.Picture.adjustCamera'1)
                         `cast`
                       (GHC.Types.N:IO[0] <()>_R)
                         ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                  (# ipv4,
                     (ipv5,
                      case s1 of wild { StreetRun.State.Vars ds ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      StreetRun.State.Vars
                        ds
                        ds4
                        ds5
                        ds6
                        ds7
                        ds8
                        ds9
                        ww3 }) #) } } } } } } })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <((),
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <()>_N)))
                  `cast`
                (<StreetRun.Camera.Camera>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <StreetRun.Config.Config>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N) -}
4a239693075a654c0792242545e27fe7
  $sclearRenderer' ::
    SDL.Internal.Types.Renderer -> StreetRun.StreetRun ()
  {- Arity: 4, Strictness: <S(S),1*U(U)><L,A><L,U><S,U>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: SDL.Internal.Types.Renderer)
                   (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds9 { GHC.Ptr.Ptr ds10 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        ds10
                        s of wild { (#,#) ds12 ds13 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds13) 0# of lwild {
                   DEFAULT -> (# ds12, (GHC.Tuple.(), s1) #)
                   1#
                   -> case StreetRun.SDLLayer.clearRenderer'1
                             ds12 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), s1) #) } } } })
                  `cast`
                (<SDL.Internal.Types.Renderer>_R
                 ->_R (<StreetRun.Config.Config>_R
                       ->_R (<StreetRun.State.Vars>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <((),
                                             StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                   <StreetRun.State.Vars>_N
                                                                                   <GHC.Types.IO>_R
                                                                                   <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                        <StreetRun.Config.Config>_R
                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                           StreetRun.State.Vars
                                                                                                           GHC.Types.IO>_R
                                                                                                        <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
b15a6fab9cffe45da19f4684113c02e4
  $sclearScreen' :: StreetRun.StreetRun ()
  {- Arity: 3, Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config) ->
                 let {
                   eta :: SDL.Internal.Types.Renderer
                   = case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  StreetRun.$fSDLRendererStreetRun1 eta r1 s1 s)
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <((),
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <()>_N)))
                  `cast`
                (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <StreetRun.Config.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N) -}
ebc5fa01bfef0e70fdb8098051af5e18
  $sclearSfx' :: StreetRun.StreetRun ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*U(U,U,A),U,U,U,U,U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars
                       (case ds of wild1 { StreetRun.Common.CommonVars ds11 ds12 ds13 ->
                        StreetRun.Common.CommonVars
                          ds11
                          ds12
                          (GHC.Types.[] @ StreetRun.Sfx.Sfx) })
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       ds7 }) #))
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
29898527b62fb37c08b8295ce8c4528f
  $sdrawHiscore' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U))><L,U(U(U(U),U,U),U,U,U,U,U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (let {
                   $dRenderer :: GHC.Base.Monad StreetRun.StreetRun
                   = GHC.Base.C:Monad
                       @ StreetRun.StreetRun
                       (StreetRun.HUD.drawHiscore'36 @ StreetRun.StreetRun)
                       (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       StreetRun.$fApplicativeStreetRun1
                         `cast`
                       (forall (a :: <*>_N).
                        <a>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(a,
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                              <StreetRun.Config.Config>_R
                                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                 StreetRun.State.Vars
                                                                                                                 GHC.Types.IO>_R
                                                                                                              <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                       (StreetRun.HUD.drawHiscore'34 @ StreetRun.StreetRun)
                 } in
                 let {
                   $dRenderer1 :: StreetRun.Renderer.Renderer StreetRun.StreetRun
                   = StreetRun.Renderer.C:Renderer
                       @ StreetRun.StreetRun
                       $dRenderer
                       (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'30 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'28 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'26 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'24 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'22 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'20 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'18 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'16 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'14 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'12 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'10 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'8 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'4 @ StreetRun.StreetRun)
                       StreetRun.$fHUDStreetRun6
                         `cast`
                       (<(GHC.Types.Int, GHC.Types.Int)>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <((),
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                               <StreetRun.Config.Config>_R
                                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                  StreetRun.State.Vars
                                                                                                                  GHC.Types.IO>_R
                                                                                                               <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       StreetRun.$fHUDStreetRun4
                         `cast`
                       (<StreetRun.Font.Number>_R
                        ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <((),
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                               <StreetRun.Config.Config>_R
                                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                  StreetRun.State.Vars
                                                                                                                  GHC.Types.IO>_R
                                                                                                               <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                 } in
                 (\ (r1 :: StreetRun.Config.Config)
                    (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case StreetRun.$w$cdrawHiscoreText
                         StreetRun.HUD.drawHiscore'40
                         StreetRun.HUD.drawHiscore'39
                         r1
                         s1
                         s of ds1 { (#,#) ipv ipv1 ->
                  case s1 of wild { StreetRun.State.Vars ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                  case ds of wild1 { StreetRun.Common.CommonVars ds9 ds10 ds11 ->
                  case ds9
                         `cast`
                       (StreetRun.Types.N:Score[0]) of wild2 { GHC.Types.I# i ->
                  (((StreetRun.HUD.$wdrawNumbers
                       @ StreetRun.StreetRun
                       $dRenderer1
                       (GHC.Integer.Type.smallInteger i)
                       StreetRun.HUD.drawHiscore'2
                       StreetRun.HUD.drawHiscore'1)
                      `cast`
                    (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <StreetRun.Config.Config>_R
                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                              StreetRun.State.Vars GHC.Types.IO>_R
                                                           <()>_N)
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild3 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                    ipv } } } })
                   `cast`
                 ((<StreetRun.Config.Config>_R
                   ->_R (<StreetRun.State.Vars>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <((),
                                         StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                               <StreetRun.State.Vars>_N
                                                                               <GHC.Types.IO>_R
                                                                               <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                    <StreetRun.Config.Config>_R
                                                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO>_R
                                                                                                    <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))) -}
d3af674fa4c454a61d4f09a7f18d1e93
  $sdrawScore' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,U><S(LLLLS(S(S)LLLLLLLLLLLLLLL)LLL),1*U(U,U,U,U,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (let {
                   $dRenderer :: GHC.Base.Monad StreetRun.StreetRun
                   = GHC.Base.C:Monad
                       @ StreetRun.StreetRun
                       (StreetRun.HUD.drawHiscore'36 @ StreetRun.StreetRun)
                       (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       StreetRun.$fApplicativeStreetRun1
                         `cast`
                       (forall (a :: <*>_N).
                        <a>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(a,
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                              <StreetRun.Config.Config>_R
                                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                 StreetRun.State.Vars
                                                                                                                 GHC.Types.IO>_R
                                                                                                              <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                       (StreetRun.HUD.drawHiscore'34 @ StreetRun.StreetRun)
                 } in
                 let {
                   $dRenderer1 :: StreetRun.Renderer.Renderer StreetRun.StreetRun
                   = StreetRun.Renderer.C:Renderer
                       @ StreetRun.StreetRun
                       $dRenderer
                       (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'30 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'28 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'26 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'24 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'22 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'20 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'18 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'16 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'14 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'12 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'10 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'8 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'4 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       StreetRun.$fHUDStreetRun4
                         `cast`
                       (<StreetRun.Font.Number>_R
                        ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <((),
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                               <StreetRun.Config.Config>_R
                                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                  StreetRun.State.Vars
                                                                                                                  GHC.Types.IO>_R
                                                                                                               <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                 } in
                 (\ (r1 :: StreetRun.Config.Config)
                    (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case s1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                  case ds4 of wild1 { StreetRun.Work.PlayVars ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds8 ds9 ds10 ds18 ds19 ds20 ds21 ds22 ds23 ->
                  case ds11
                         `cast`
                       (StreetRun.Types.N:Score[0]) of wild2 { GHC.Types.I# i ->
                  (((StreetRun.HUD.$wdrawNumbers
                       @ StreetRun.StreetRun
                       $dRenderer1
                       (GHC.Integer.Type.smallInteger i)
                       StreetRun.HUD.drawHiscore'2
                       StreetRun.HUD.drawScore'1)
                      `cast`
                    (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <StreetRun.Config.Config>_R
                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                              StreetRun.State.Vars GHC.Types.IO>_R
                                                           <()>_N)
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                     wild)
                    `cast`
                  (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                    s } } })
                   `cast`
                 ((<StreetRun.Config.Config>_R
                   ->_R (<StreetRun.State.Vars>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <((),
                                         StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                               <StreetRun.State.Vars>_N
                                                                               <GHC.Types.IO>_R
                                                                               <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                    <StreetRun.Config.Config>_R
                                                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO>_R
                                                                                                    <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))) -}
ad439f0aad515f053ee3b8c0312a637b
  $sdrawScreen' :: StreetRun.StreetRun ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>, Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds2
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds { GHC.Ptr.Ptr ds4 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds4
                        s of wild1 { Unit# ds5 ->
                 (# ds5, (GHC.Tuple.(), s1) #) } } })
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
ad719364c5a5261504a9d980d35ce238
  $sgetInput' :: StreetRun.StreetRun StreetRun.Input.Input
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U,U,U,U,U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    (case s1 of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     ds7 },
                     s1) #))
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(StreetRun.Input.Input,
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <StreetRun.Input.Input>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                      <StreetRun.Config.Config>_R
                                                                                                                      <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                         StreetRun.State.Vars
                                                                                                                         GHC.Types.IO>_R
                                                                                                                      <StreetRun.Input.Input>_N) ; Sym (StreetRun.N:StreetRun[0]) <StreetRun.Input.Input>_N)) -}
8420e51bb0f7fc615b783a6269041faf
  $shaltMusic :: StreetRun.StreetRun ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (x1 :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.State#
                                                         GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        s of wild { (#,#) ds1 ds2 ->
                 (# ds1, (GHC.Tuple.(), eta1) #) })
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
e60aec327c7e45dbffb2a9db2436b206
  $splayGameMusic' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <S(LLS(LLLLLLLLS(S)LLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 case ds12
                        `cast`
                      (SDL.Mixer.N:Music[0]) of ds37 { GHC.Ptr.Ptr ds38 ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        ds38
                        -1#
                        s of wild2 { (#,#) ds39 ds40 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds40) 0# of lwild {
                   DEFAULT -> (# ds39, (GHC.Tuple.(), s1) #)
                   1#
                   -> case SDL.Mixer.playMusic1 ds39 of ds41 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), s1) #) } } } } } })
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
3ebe3fc1d9af60d6b4a421eb8aae5bfc
  $stitleStep' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,U><S(LLLLLLS(S(SL)LLLL)L),1*U(U,U,U,U,U,U,U(U(U,U),U,U,U,U),U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (let {
                   u :: StreetRun.StreetRun ()
                   = StreetRun.Title.$wupdateTitle
                       @ StreetRun.State.Vars
                       @ StreetRun.StreetRun
                       StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                         `cast`
                       (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                                 <StreetRun.State.Vars>_N))
                       (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       StreetRun.$fMonadStateStreetRun
                       StreetRun.$fRendererStreetRun
                 } in
                 let {
                   v :: StreetRun.StreetRun ()
                   = StreetRun.Title.$wdrawTitle
                       @ StreetRun.State.Vars
                       @ StreetRun.StreetRun
                       StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                         `cast`
                       (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                                 <StreetRun.State.Vars>_N))
                       StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                         `cast`
                       (Sym (StreetRun.Common.N:HasCommonVars[0]
                                 <StreetRun.State.Vars>_N))
                       StreetRun.$fApplicativeStreetRun
                       (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       StreetRun.$fMonadStateStreetRun
                       StreetRun.$fRendererStreetRun
                       StreetRun.$fHUDStreetRun
                 } in
                 (\ (r1 :: StreetRun.Config.Config)
                    (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case s1 of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                  case ds7 of wild1 { StreetRun.Input.Input ds11 ds12 ds13 ds14 ds15 ->
                  case ds11 of wild2 { KeyState.KeyState ds16 ds17 ->
                  case ds16 of wild3 {
                    DEFAULT
                    -> case ((u `cast`
                              (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                     <StreetRun.Config.Config>_R
                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                        StreetRun.State.Vars
                                                                        GHC.Types.IO>_R
                                                                     <()>_N)
                                r1)
                               `cast`
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                               wild)
                              `cast`
                            (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                              s of ds18 { (#,#) ipv ipv1 ->
                       ((v `cast`
                         (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                <StreetRun.Config.Config>_R
                                                                <Control.Monad.Trans.State.Lazy.StateT
                                                                   StreetRun.State.Vars
                                                                   GHC.Types.IO>_R
                                                                <()>_N)
                           r1)
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                          (case ipv1 of wild4 { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                         ipv }
                    KeyState.KeyStatus'Pressed
                    -> case ((u `cast`
                              (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                     <StreetRun.Config.Config>_R
                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                        StreetRun.State.Vars
                                                                        GHC.Types.IO>_R
                                                                     <()>_N)
                                r1)
                               `cast`
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                               (StreetRun.State.Vars
                                  ds1
                                  ds2
                                  StreetRun.Scenario.Scene'Play
                                  ds4
                                  ds5
                                  ds6
                                  wild1
                                  ds8))
                              `cast`
                            (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                              s of ds18 { (#,#) ipv ipv1 ->
                       ((v `cast`
                         (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                <StreetRun.Config.Config>_R
                                                                <Control.Monad.Trans.State.Lazy.StateT
                                                                   StreetRun.State.Vars
                                                                   GHC.Types.IO>_R
                                                                <()>_N)
                           r1)
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                          (case ipv1 of wild4 { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                         ipv } } } } })
                   `cast`
                 ((<StreetRun.Config.Config>_R
                   ->_R (<StreetRun.State.Vars>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <((),
                                         StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                               <StreetRun.State.Vars>_N
                                                                               <GHC.Types.IO>_R
                                                                               <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                    <StreetRun.Config.Config>_R
                                                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO>_R
                                                                                                    <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))) -}
d1b0c5eae39dad576ad0ed33fbc89b34
  $supdateInput' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,A><L,1*U(U,U,U,U,U,U,1*U(U(U,U),U(U,U),U(U,U),U(U,U),A),U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (SDL.Event.$wpollEvents
                         @ GHC.Types.IO
                         GHC.Base.$fApplicativeIO
                         GHC.Base.$fMonadIO1
                           `cast`
                         (forall (a :: <*>_N) (b :: <*>_N).
                          <GHC.Types.IO a>_R
                          ->_R <a -> GHC.Types.IO b>_R
                          ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                         GHC.Base.$fApplicativeIO4
                           `cast`
                         (forall (a :: <*>_N). <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                         (\ @ a -> GHC.Base.id @ (GHC.Types.IO a)))
                        `cast`
                      (GHC.Types.N:IO[0] <[SDL.Event.Event]>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.Tuple.(),
                     case s1 of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     StreetRun.State.Vars
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       (case ds7 of ww { StreetRun.Input.Input ww1 ww2 ww3 ww4 ww5 ->
                        case StreetRun.Load.$wstepControl
                               (GHC.Base.build
                                  @ SDL.Event.EventPayload
                                  (\ @ b1
                                     (c :: SDL.Event.EventPayload -> b1 -> b1)[OneShot]
                                     (n :: b1)[OneShot] ->
                                   GHC.Base.foldr
                                     @ SDL.Event.Event
                                     @ b1
                                     (GHC.Base.mapFB
                                        @ SDL.Event.EventPayload
                                        @ b1
                                        @ SDL.Event.Event
                                        c
                                        SDL.Event.eventPayload)
                                     n
                                     ipv1))
                               ww1
                               ww2
                               ww3
                               ww4 of ww6 { (#,,,,#) ww7 ww8 ww9 ww10 ww11 ->
                        StreetRun.Input.Input ww7 ww8 ww9 ww10 ww11 } })
                       ds8 }) #) })
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
8566a1bbb84d5797898f3b7137c4b5f2
  $tc'StreetRun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5709157928022844835##
                   17082506809497199223##
                   StreetRun.$trModule
                   StreetRun.$tc'StreetRun2
                   1#
                   StreetRun.$tc'StreetRun1) -}
1a606d88ec679c730728e5856ebc2bab
  $tc'StreetRun1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
71d27f6fbfa0ae5eb6a622f398b1890b
  $tc'StreetRun2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.$tc'StreetRun3) -}
b2581eedadf74cdf7f4b5facd6490790
  $tc'StreetRun3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StreetRun"#) -}
8f26cbdde56e43448d68d38187d986ba
  $tcStreetRun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11479722449321170337##
                   13956186639767890448##
                   StreetRun.$trModule
                   StreetRun.$trModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
3db46a4085d1a1a9718ec327a8140c30
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.$trModule3
                   StreetRun.$trModule1) -}
28d41e501d7005682e547ea88e62a4fc
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.$trModule2) -}
9863daa32d84d0e78e28eea918201e1c
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun"#) -}
736e22d404c3243d69eb790b7f2cdf8b
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.$trModule4) -}
b31b7cc83d6decfc81dfa02de1b91e25
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-8ZEy2IVHyWYJYWzE7qtJkg"#) -}
7e63784de8ce56a038c7b93a5216a5c5
  $w$cclearScreen ::
    GHC.Prim.Addr#
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (w :: StreetRun.State.Vars)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        ww
                        w1 of wild { (#,#) ds12 ds13 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds13) 0# of lwild {
                   DEFAULT -> (# ds12, (GHC.Tuple.(), w) #)
                   1#
                   -> case StreetRun.SDLLayer.clearRenderer'1
                             ds12 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), w) #) } } }) -}
94ee50528245ef09a3357ca6e7e6cb68
  $w$cdelayMilliseconds ::
    GHC.Types.Int
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall base-4.12.0.0 GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Int# #)}
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 case ds1 of wild1 {
                   DEFAULT
                   -> case GHC.Event.Thread.threadDelay1
                             (case w of wild2 { GHC.Types.I# y ->
                              GHC.Types.I# (GHC.Prim.*# 1000# y) })
                             w2 of ds2 { (#,#) ipv ipv1 ->
                      (# ipv, (ipv1, w1) #) }
                   0#
                   -> case w of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.delay#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.*# 1000# y)
                             w2 of s' { DEFAULT ->
                      (# s', (GHC.Tuple.(), w1) #) } } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawBackStreet ::
    GHC.Types.Int -> GHC.Types.Int -> StreetRun.StreetRun ()
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int) (ww1 :: GHC.Types.Int) ->
                 StreetRun.Renderer_func_2.$wdrawHorizontalScrollImage
                   @ StreetRun.StreetRun
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N).
                    <StreetRun.Config.Config -> a>_R
                    ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   StreetRun.$fSDLRendererStreetRun
                   StreetRun.$fRendererStreetRun11
                   StreetRun.$fRendererStreetRun10
                   ww
                   ww1) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawBird ::
    Animate.SpriteClip StreetRun.Snag.BirdKey
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Snag.BirdKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                          Linear.V2.V2 Foreign.C.Types.CInt)
                   = case w of wild { Animate.SpriteClip ds1 ds2 ds3 ds4 ds5 ->
                     let {
                       dim :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case ds3 of wild1 { GHC.Types.I# x# ->
                         case ds4 of wild2 { GHC.Types.I# x#1 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0])) } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case ds1 of wild1 { GHC.Types.I# x# ->
                         case ds2 of wild2 { GHC.Types.I# x#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Sym (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                        dim,
                      dim) }
                 } in
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 })
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                       case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                       case ds9 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds33 } } })
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case ds of ds1 { (,) clip' dim -> clip' }))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild { GHC.Types.I# x# ->
                             case ww1 of wild1 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds of ds1 { (,) clip' dim -> dim }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   w3) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawBuilding ::
    Animate.SpriteClip StreetRun.Scenario.BuildingKey
    -> GHC.Types.Int -> GHC.Types.Int -> StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,U(U)><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip
                           StreetRun.Scenario.BuildingKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int) ->
                 StreetRun.Renderer_func_2.$wdrawHorizontalScrollSprite
                   @ StreetRun.StreetRun
                   @ StreetRun.Scenario.BuildingKey
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N).
                    <StreetRun.Config.Config -> a>_R
                    ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   StreetRun.$fSDLRendererStreetRun
                   StreetRun.$fRendererStreetRun15
                   StreetRun.$fRendererStreetRun14
                   w
                   ww
                   ww1) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawControlsText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U)))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds31 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawGameOverText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds27 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawGrass ::
    Animate.SpriteClip StreetRun.Scenario.GrassKey
    -> GHC.Types.Int -> GHC.Types.Int -> StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,U(U)><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Scenario.GrassKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int) ->
                 StreetRun.Renderer_func_2.$wdrawHorizontalScrollSprite
                   @ StreetRun.StreetRun
                   @ StreetRun.Scenario.GrassKey
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N).
                    <StreetRun.Config.Config -> a>_R
                    ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   StreetRun.$fSDLRendererStreetRun
                   StreetRun.$fRendererStreetRun13
                   StreetRun.$fRendererStreetRun12
                   w
                   ww
                   ww1) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawHiscoreText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds28 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawLava ::
    Animate.SpriteClip StreetRun.Snag.LavaKey
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Snag.LavaKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                          Linear.V2.V2 Foreign.C.Types.CInt)
                   = case w of wild { Animate.SpriteClip ds1 ds2 ds3 ds4 ds5 ->
                     let {
                       dim :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case ds3 of wild1 { GHC.Types.I# x# ->
                         case ds4 of wild2 { GHC.Types.I# x#1 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0])) } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case ds1 of wild1 { GHC.Types.I# x# ->
                         case ds2 of wild2 { GHC.Types.I# x#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Sym (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                        dim,
                      dim) }
                 } in
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 })
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                       case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                       case ds10 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds33 } } })
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case ds of ds1 { (,) clip' dim -> clip' }))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild { GHC.Types.I# x# ->
                             case ww1 of wild1 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds of ds1 { (,) clip' dim -> dim }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   w3) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawNumber ::
    StreetRun.Font.Number
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,U><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.Font.Number)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   eta :: SDL.Video.Renderer.Texture
                   = case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds30 w } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           eta)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w2)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      eta
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawPauseText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds24 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawPressEscapeText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds26 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawPressSpaceText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds25 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawRock ::
    Animate.SpriteClip StreetRun.Snag.RockKey
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Snag.RockKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                          Linear.V2.V2 Foreign.C.Types.CInt)
                   = case w of wild { Animate.SpriteClip ds1 ds2 ds3 ds4 ds5 ->
                     let {
                       dim :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case ds3 of wild1 { GHC.Types.I# x# ->
                         case ds4 of wild2 { GHC.Types.I# x#1 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0])) } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case ds1 of wild1 { GHC.Types.I# x# ->
                         case ds2 of wild2 { GHC.Types.I# x#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Sym (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                        dim,
                      dim) }
                 } in
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 })
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                       case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                       case ds11 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds33 } } })
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case ds of ds1 { (,) clip' dim -> clip' }))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild { GHC.Types.I# x# ->
                             case ww1 of wild1 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds of ds1 { (,) clip' dim -> dim }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   w3) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawRunner ::
    Animate.SpriteClip StreetRun.Runner.RunnerKey
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Runner.RunnerKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                          Linear.V2.V2 Foreign.C.Types.CInt)
                   = case w of wild { Animate.SpriteClip ds1 ds2 ds3 ds4 ds5 ->
                     let {
                       dim :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case ds3 of wild1 { GHC.Types.I# x# ->
                         case ds4 of wild2 { GHC.Types.I# x#1 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0])) } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case ds1 of wild1 { GHC.Types.I# x# ->
                         case ds2 of wild2 { GHC.Types.I# x#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Sym (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                        dim,
                      dim) }
                 } in
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 })
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                       case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                       case ds8 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds33 } } })
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case ds of ds1 { (,) clip' dim -> clip' }))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild { GHC.Types.I# x# ->
                             case ww1 of wild1 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds of ds1 { (,) clip' dim -> dim }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   w3) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawStreet ::
    GHC.Types.Int -> GHC.Types.Int -> StreetRun.StreetRun ()
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int) (ww1 :: GHC.Types.Int) ->
                 StreetRun.Renderer_func_2.$wdrawHorizontalScrollImage
                   @ StreetRun.StreetRun
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N).
                    <StreetRun.Config.Config -> a>_R
                    ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   StreetRun.$fSDLRendererStreetRun
                   StreetRun.$fRendererStreetRun9
                   StreetRun.$fRendererStreetRun8
                   ww
                   ww1) -}
4d7912d1d67c18730decb2b6af03ffa8
  $w$cdrawTitleText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Assets.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds29 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
ebabcd41913bfabeda9f60334cc4b262
  $w$cupdateInput ::
    StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 2,
     Strictness: <L,1*U(U,U,U,U,U,U,1*U(U(U,U),U(U,U),U(U,U),U(U,U),A),U)><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.State.Vars)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (SDL.Event.$wpollEvents
                         @ GHC.Types.IO
                         GHC.Base.$fApplicativeIO
                         GHC.Base.$fMonadIO1
                           `cast`
                         (forall (a :: <*>_N) (b :: <*>_N).
                          <GHC.Types.IO a>_R
                          ->_R <a -> GHC.Types.IO b>_R
                          ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                         GHC.Base.$fApplicativeIO4
                           `cast`
                         (forall (a :: <*>_N). <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                         (\ @ a -> GHC.Base.id @ (GHC.Types.IO a)))
                        `cast`
                      (GHC.Types.N:IO[0] <[SDL.Event.Event]>_R)
                        w1 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.Tuple.(),
                     case w of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     StreetRun.State.Vars
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       (case ds7 of ww { StreetRun.Input.Input ww1 ww2 ww3 ww4 ww5 ->
                        case StreetRun.Load.$wstepControl
                               (GHC.Base.map
                                  @ SDL.Event.Event
                                  @ SDL.Event.EventPayload
                                  SDL.Event.eventPayload
                                  ipv1)
                               ww1
                               ww2
                               ww3
                               ww4 of ww6 { (#,,,,#) ww7 ww8 ww9 ww10 ww11 ->
                        StreetRun.Input.Input ww7 ww8 ww9 ww10 ww11 } })
                       ds8 }) #) }) -}
a02187ddac65fe85fead26d68e729946
  $w$j ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case {__pkg_ccall_GC sdl2-ttf-2.0.2 GHC.Prim.State#
                                                       GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                        w of wild { (#,#) ds1 ds2 ->
                 case GHC.Prim.narrow32Int# ds2 of wild1 {
                   DEFAULT
                   -> case {__pkg_ccall_GC sdl2-ttf-2.0.2 GHC.Prim.State#
                                                            GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                             ds1 of wild2 { (#,#) ds4 ds5 ->
                      case GHC.Prim.<# (GHC.Prim.narrow32Int# ds5) 0# of lwild {
                        DEFAULT -> StreetRun.$w$j1 ds4
                        1#
                        -> case SDL.Font.initialize2 ds4 of ds6 { (#,#) ipv ipv1 ->
                           StreetRun.$w$j1 ipv } } }
                   1# -> StreetRun.$w$j1 ds1 } }) -}
4147603135aed15d1cd3c4b88a149077
  $w$j1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                       -> GHC.Prim.Word#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        22050#
                        32784##
                        2#
                        256#
                        w of wild3 { (#,#) ds9 ds10 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds10) 0# of lwild {
                   DEFAULT -> StreetRun.$w$j2 ds9
                   1#
                   -> case SDL.Mixer.openAudio1 ds9 of ds1 { (#,#) ipv ipv1 ->
                      StreetRun.$w$j2 ipv } } }) -}
d0733f757391809fce5d0481dd54d5d3
  $w$j2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (SDL.Video.$wcreateWindow
                         @ GHC.Types.IO
                         (\ @ a -> GHC.Base.id @ (GHC.Types.IO a))
                         StreetRun.main6
                         StreetRun.main2)
                        `cast`
                      (GHC.Types.N:IO[0] <SDL.Internal.Types.Window>_R)
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1
                        `cast`
                      (SDL.Internal.Types.N:Window[0]) of ds7 { GHC.Ptr.Ptr ds8 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Addr# #)}
                        ds8
                        -1#
                        2##
                        ipv of wild { (#,#) ds11 ds12 ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> SDL.Internal.Types.Renderer
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 2> {- Arity: 2, Strictness: <S,U><L,U(U)> -}
                   = \ (ipv2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (ipv3 :: SDL.Internal.Types.Renderer)[OneShot] ->
                     case StreetRun.Assets_1.loadResources1
                            ipv3
                            ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                     case System.Random.theStdGen
                            `cast`
                          (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild1 { GHC.STRef.STRef var# ->
                     case GHC.Prim.readMutVar#
                            @ GHC.Prim.RealWorld
                            @ System.Random.StdGen
                            var#
                            ipv4 of ds { (#,#) ipv6 ipv7 ->
                     case (((StreetRun.Bolt_1.mainLoop
                               @ StreetRun.StreetRun
                               StreetRun.$fMonadReaderStreetRun
                               StreetRun.$fMonadStateStreetRun
                               StreetRun.$fAudioStreetRun
                               StreetRun.$fAudioSfxStreetRun
                               StreetRun.$fLoggerStreetRun
                               StreetRun.$fClockStreetRun
                               StreetRun.$fCameraControlStreetRun
                               StreetRun.$fRendererStreetRun
                               StreetRun.$fHasInputStreetRun
                               StreetRun.$fTitleStreetRun
                               StreetRun.$fPlayStreetRun
                               StreetRun.$fPauseStreetRun
                               StreetRun.$fDeathStreetRun
                               StreetRun.$fGameOverStreetRun)
                              `cast`
                            (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                   <StreetRun.Config.Config>_R
                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                      StreetRun.State.Vars
                                                                      GHC.Types.IO>_R
                                                                   <()>_N)
                              (StreetRun.Config.Config
                                 ds7 `cast` (Sym (SDL.Internal.Types.N:Window[0]))
                                 ipv3
                                 ipv5))
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                             (StreetRun.State.Vars
                                StreetRun.Common.initCommonVars
                                StreetRun.Scenario.Scene'Title
                                StreetRun.Scenario.Scene'Title
                                StreetRun.Tag_func.initTitleVars
                                (StreetRun.Work.PlayVars
                                   StreetRun.Work_func.initPlayVars8
                                     `cast`
                                   (Sym (StreetRun.Types.N:Score[0]))
                                   StreetRun.Work_func.initPlayVars7
                                     `cast`
                                   (Sym (StreetRun.Types.N:Stocks[0]))
                                   StreetRun.Work_func.initPlayVars6
                                     `cast`
                                   (Sym (StreetRun.Types.N:Percent[0]))
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Seconds[0]))
                                   StreetRun.Work_func.initPlayVars5
                                   GHC.Types.True
                                   StreetRun.Work_func.initPlayVars4
                                   StreetRun.Work_func.initPlayVars3
                                   StreetRun.Work_func.initPlayVars1
                                   StreetRun.Work_func.initPlayVars5
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Distance[0]))
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Distance[0]))
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Distance[0]))
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Distance[0]))
                                   (GHC.Types.[] @ StreetRun.Hurdle.ObstacleState)
                                   (StreetRun.Hurdle.streamOfObstacles
                                      @ System.Random.StdGen
                                      System.Random.$fRandomGenStdGen
                                      ipv7))
                                StreetRun.Out_func.initGameOverVars
                                StreetRun.Input.initInput
                                StreetRun.Camera.initCamera))
                            `cast`
                          (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                            ipv6 of ds3 { (#,#) ipv8 ipv9 ->
                     case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                            ds8
                            ipv8 of wild2 { Unit# ds4 ->
                     case StreetRun.Assets_2.freeResources1
                            ipv5
                            ds4 of ds5 { (#,#) ipv10 ipv11 ->
                     case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.State#
                                                             GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State#
                                                                   GHC.Prim.RealWorld #)}
                            ipv10 of wild3 { Unit# ds6 ->
                     case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.State#
                                                             GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State#
                                                                   GHC.Prim.RealWorld #)}
                            ds6 of wild4 { Unit# ds10 ->
                     case {__pkg_ccall_GC sdl2-ttf-2.0.2 GHC.Prim.State#
                                                           GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State#
                                                                 GHC.Prim.RealWorld #)}
                            ds10 of wild5 { Unit# ds14 ->
                     case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.State#
                                                         GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                            ds14 of wild6 { Unit# ds15 ->
                     (# ds15, GHC.Tuple.() #) } } } } } } } } } }
                 } in
                 case GHC.Prim.eqAddr# ds12 __NULL of lwild {
                   DEFAULT
                   -> $j
                        ds11
                        (GHC.Ptr.Ptr @ () ds12)
                          `cast`
                        (Sym (SDL.Internal.Types.N:Renderer[0]))
                   1#
                   -> case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.State#
                                                          GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Addr# #)}
                             ds11 of wild1 { (#,#) ds13 ds14 ->
                      case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Word# #)}
                             ds14
                             ds13 of wild2 { (#,#) ds15 ds16 ->
                      case SDL.Video.createRenderer1
                             ds16
                             ds15
                             ds14 of ds2 { (#,#) ipv2 ipv3 ->
                      $j ipv2 ipv3 } } } } } } }) -}
bd5c49db79b876278a9aab74b1fc2a65
  $w$sadjustCamera' ::
    Linear.V2.V2 GHC.Types.Float
    -> Linear.V2.V2 GHC.Types.Float
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,U(U(U),U(U))><L,U(U,U)><L,1*U(A,1*U(U),A)><L,1*U(U,U,U,U,U,U,U,A)><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: Linear.V2.V2 GHC.Types.Float)
                   (ww1 :: Linear.V2.V2 GHC.Types.Float)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   renderer :: SDL.Internal.Types.Renderer
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 case SDL.Video.Renderer.$wrendererScale
                        renderer of ww4 { (#,#) ww5 ww6 ->
                 case (ww6
                         (case ww1 of wild { Linear.V2.V2 a1 b1 ->
                          Linear.V2.V2
                            @ Foreign.C.Types.CFloat
                            a1 `cast` (Sym (Foreign.C.Types.N:CFloat[0]))
                            b1 `cast` (Sym (Foreign.C.Types.N:CFloat[0])) }))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case SDL.Video.Renderer.$wrendererViewport
                        renderer of ww2 { (#,#) ww3 ww7 ->
                 case (ww7
                         (GHC.Maybe.Just
                            @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                            (SDL.Video.Renderer.Rectangle
                               @ Foreign.C.Types.CInt
                               (case ww of wild { Linear.V2.V2 x y ->
                                case x of wild1 { GHC.Types.F# y1 ->
                                case y of wild2 { GHC.Types.F# y2 ->
                                case GHC.Float.$w$cproperFraction1
                                       @ Foreign.C.Types.CInt
                                       Foreign.C.Types.$fIntegralCInt
                                       (GHC.Prim.minusFloat# 640.0# y1) of ww8 { (#,#) ww9 ww10 ->
                                case ww9
                                       `cast`
                                     (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                                case GHC.Float.$w$cproperFraction1
                                       @ Foreign.C.Types.CInt
                                       Foreign.C.Types.$fIntegralCInt
                                       (GHC.Prim.minusFloat# 640.0# y2) of ww11 { (#,#) ww12 ww13 ->
                                case ww12
                                       `cast`
                                     (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                                (Linear.V2.V2
                                   @ Foreign.C.Types.CInt
                                   nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                   nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])))
                                  `cast`
                                (Sym (Linear.Affine.N:Point[0]
                                          <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } } } } } } })
                               StreetRun.Picture.adjustCamera'_dim)))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case SDL.Video.Renderer.$wrendererClipRect
                        renderer of ww8 { (#,#) ww9 ww10 ->
                 case (ww10 StreetRun.Picture.adjustCamera'1)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    (ipv5,
                     case w1 of wild { StreetRun.State.Vars ds ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                     StreetRun.State.Vars
                       ds
                       ds4
                       ds5
                       ds6
                       ds7
                       ds8
                       ds9
                       (StreetRun.Camera.Camera ww ww1) }) #) } } } } } }) -}
2615356f21b904a8059a32eefe70d7a6
  $w$splayGameMusic' ::
    GHC.Prim.Addr#
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (w :: StreetRun.State.Vars)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        ww
                        -1#
                        w1 of wild2 { (#,#) ds6 ds7 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds7) 0# of lwild {
                   DEFAULT -> (# ds6, (GHC.Tuple.(), w) #)
                   1#
                   -> case SDL.Mixer.playMusic1 ds6 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), w) #) } } }) -}
4d7912d1d67c18730decb2b6af03ffa8
  type role StreetRun nominal
  newtype StreetRun a
    = StreetRun (Control.Monad.Trans.Reader.ReaderT
                   StreetRun.Config.Config
                   (Control.Monad.Trans.State.Lazy.StateT
                      StreetRun.State.Vars GHC.Types.IO)
                   a)
030c4843b81f365bdfaeeea2b3efc79c
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                StreetRun.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
3493887905014b9b4f093e3f21e979ec
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        48##
                        s of wild { (#,#) ds3 ds4 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds4) 0# of lwild {
                   DEFAULT -> StreetRun.$w$j ds3
                   1#
                   -> case SDL.Init.initialize1 ds3 of ds1 { (#,#) ipv ipv1 ->
                      StreetRun.$w$j ipv } } }) -}
3fb4f4bf3cc384e234d4f8b8c1f3bf0a
  main2 :: SDL.Video.WindowConfig
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (SDL.Video.WindowConfig
                   GHC.Types.True
                   GHC.Types.False
                   GHC.Types.False
                   SDL.Video.Windowed
                   (GHC.Maybe.Nothing @ SDL.Video.OpenGL.OpenGLConfig)
                   SDL.Video.Wherever
                   GHC.Types.False
                   StreetRun.main3
                   GHC.Types.True) -}
a41c364f757cc766cb5c545897183eb6
  main3 :: Linear.V2.V2 Foreign.C.Types.CInt
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Linear.V2.V2
                   @ Foreign.C.Types.CInt
                   StreetRun.main5 `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                   StreetRun.main4 `cast` (Sym (Foreign.C.Types.N:CInt[0]))) -}
445613788b8cd1af90c8a6ea3d3098ed
  main4 :: GHC.Int.Int32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I32# 720#) -}
3a0919b867f183847b8c22132b05d13d
  main5 :: GHC.Int.Int32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I32# 1280#) -}
f429c4c4ef037181c06502ae5c2b638d
  main6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# StreetRun.main7) -}
e1b6d3712d6afeff78d69508aae20755
  main7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Street Runner"#) -}
instance GHC.Base.Applicative [StreetRun.StreetRun]
  = StreetRun.$fApplicativeStreetRun
instance StreetRun.Sound_effects.AudioSfx [StreetRun.StreetRun]
  = StreetRun.$fAudioSfxStreetRun
instance StreetRun.Audio.Audio [StreetRun.StreetRun]
  = StreetRun.$fAudioStreetRun
instance StreetRun.Picture.CameraControl [StreetRun.StreetRun]
  = StreetRun.$fCameraControlStreetRun
instance StreetRun.CFL.Clock [StreetRun.StreetRun]
  = StreetRun.$fClockStreetRun
instance StreetRun.Death.Death [StreetRun.StreetRun]
  = StreetRun.$fDeathStreetRun
instance GHC.Base.Functor [StreetRun.StreetRun]
  = StreetRun.$fFunctorStreetRun
instance StreetRun.GameOver.GameOver [StreetRun.StreetRun]
  = StreetRun.$fGameOverStreetRun
instance StreetRun.HUD.HUD [StreetRun.StreetRun]
  = StreetRun.$fHUDStreetRun
instance StreetRun.Load.HasInput [StreetRun.StreetRun]
  = StreetRun.$fHasInputStreetRun
instance StreetRun.CFL.Logger [StreetRun.StreetRun]
  = StreetRun.$fLoggerStreetRun
instance Control.Monad.Catch.MonadCatch [StreetRun.StreetRun]
  = StreetRun.$fMonadCatchStreetRun
instance Control.Monad.IO.Class.MonadIO [StreetRun.StreetRun]
  = StreetRun.$fMonadIOStreetRun
instance Control.Monad.Reader.Class.MonadReader [StreetRun.Config.Config,
                                                 StreetRun.StreetRun]
  = StreetRun.$fMonadReaderStreetRun
instance Control.Monad.State.Class.MonadState [StreetRun.State.Vars,
                                               StreetRun.StreetRun]
  = StreetRun.$fMonadStateStreetRun
instance GHC.Base.Monad [StreetRun.StreetRun]
  = StreetRun.$fMonadStreetRun
instance Control.Monad.Catch.MonadThrow [StreetRun.StreetRun]
  = StreetRun.$fMonadThrowStreetRun
instance StreetRun.Pause.Pause [StreetRun.StreetRun]
  = StreetRun.$fPauseStreetRun
instance StreetRun.Play.Play [StreetRun.StreetRun]
  = StreetRun.$fPlayStreetRun
instance StreetRun.Renderer.Renderer [StreetRun.StreetRun]
  = StreetRun.$fRendererStreetRun
instance StreetRun.SDLLayer.SDLInput [StreetRun.StreetRun]
  = StreetRun.$fSDLInputStreetRun
instance StreetRun.SDLLayer.SDLRenderer [StreetRun.StreetRun]
  = StreetRun.$fSDLRendererStreetRun
instance StreetRun.Scene.SceneManager [StreetRun.StreetRun]
  = StreetRun.$fSceneManagerStreetRun
instance StreetRun.Title.Title [StreetRun.StreetRun]
  = StreetRun.$fTitleStreetRun
"SPEC/StreetRun $fApplicativeReaderT_$c*> @ (StateT Vars IO) _" [orphan] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ (Control.Monad.Trans.State.Lazy.StateT
                                                            StreetRun.State.Vars GHC.Types.IO)
                                                       @ r
                                                       $dApplicative
  = StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*> @ r
"SPEC/StreetRun $fApplicativeReaderT_$c<* @ (StateT Vars IO) _" [orphan] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ (Control.Monad.Trans.State.Lazy.StateT
                                                            StreetRun.State.Vars GHC.Types.IO)
                                                       @ r
                                                       $dApplicative
  = StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c<* @ r
"SPEC/StreetRun $fApplicativeReaderT_$c<*> @ (StateT Vars IO) _" [orphan] forall @ r
                                                                                 ($dApplicative :: GHC.Base.Applicative
                                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ (Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO)
                                                        @ r
                                                        $dApplicative
  = StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/StreetRun $fApplicativeReaderT_$cliftA2 @ (StateT Vars IO) _" [orphan] forall @ r
                                                                                    ($dApplicative :: GHC.Base.Applicative
                                                                                                        (Control.Monad.Trans.State.Lazy.StateT
                                                                                                           StreetRun.State.Vars
                                                                                                           GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$cliftA2 @ (Control.Monad.Trans.State.Lazy.StateT
                                                                StreetRun.State.Vars GHC.Types.IO)
                                                           @ r
                                                           $dApplicative
  = StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$cliftA2
      @ r
"SPEC/StreetRun $fFunctorReaderT_$c<$ @ (StateT Vars IO) _" [orphan] forall @ r
                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                               StreetRun.State.Vars
                                                                                               GHC.Types.IO))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ (Control.Monad.Trans.State.Lazy.StateT
                                                        StreetRun.State.Vars GHC.Types.IO)
                                                   @ r
                                                   $dFunctor
  = StreetRun.$fFunctorStreetRun_$s$fFunctorReaderT_$c<$ @ r
"SPEC/StreetRun $fFunctorReaderT_$cfmap @ (StateT Vars IO) _" [orphan] forall @ r
                                                                              ($dFunctor :: GHC.Base.Functor
                                                                                              (Control.Monad.Trans.State.Lazy.StateT
                                                                                                 StreetRun.State.Vars
                                                                                                 GHC.Types.IO))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ (Control.Monad.Trans.State.Lazy.StateT
                                                          StreetRun.State.Vars GHC.Types.IO)
                                                     @ r
                                                     $dFunctor
  = StreetRun.$fFunctorStreetRun_$s$fFunctorReaderT_$cfmap @ r
"SPEC/StreetRun $fMonadReaderT_$c>>= @ (StateT Vars IO) _" [orphan] forall @ r
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                            StreetRun.State.Vars
                                                                                            GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ (Control.Monad.Trans.State.Lazy.StateT
                                                       StreetRun.State.Vars GHC.Types.IO)
                                                  @ r
                                                  $dMonad
  = StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>= @ r
"SPEC/StreetRun $fMonadReaderT_$cfail @ (StateT Vars IO) _" [orphan] forall @ r
                                                                            ($dMonad :: GHC.Base.Monad
                                                                                          (Control.Monad.Trans.State.Lazy.StateT
                                                                                             StreetRun.State.Vars
                                                                                             GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ (Control.Monad.Trans.State.Lazy.StateT
                                                        StreetRun.State.Vars GHC.Types.IO)
                                                   @ r
                                                   $dMonad
  = StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$cfail @ r
"SPEC/StreetRun addSfxs' @ Vars @ StreetRun" [2] forall (w1 :: Control.Monad.State.Class.MonadState
                                                                 StreetRun.State.Vars
                                                                 StreetRun.StreetRun)
                                                        (w :: StreetRun.Common.HasCommonVars
                                                                StreetRun.State.Vars)
  StreetRun.Sound_effects.addSfxs' @ StreetRun.State.Vars
                                   @ StreetRun.StreetRun
                                   w
                                   w1
  = StreetRun.$saddSfxs'
"SPEC/StreetRun adjustCamera' @ StreetRun" [2] forall (w2 :: Control.Monad.State.Class.MonadState
                                                               StreetRun.State.Vars
                                                               StreetRun.StreetRun)
                                                      (w1 :: Control.Monad.Reader.Class.MonadReader
                                                               StreetRun.Config.Config
                                                               StreetRun.StreetRun)
                                                      (w :: Control.Monad.IO.Class.MonadIO
                                                              StreetRun.StreetRun)
  StreetRun.Picture.adjustCamera' @ StreetRun.StreetRun w w1 w2
  = StreetRun.$sadjustCamera'
"SPEC/StreetRun clearRenderer' @ StreetRun" [2] forall (w :: Control.Monad.IO.Class.MonadIO
                                                               StreetRun.StreetRun)
  StreetRun.SDLLayer.clearRenderer' @ StreetRun.StreetRun w
  = StreetRun.$sclearRenderer'
"SPEC/StreetRun clearScreen' @ StreetRun" [2] forall (w1 :: Control.Monad.Reader.Class.MonadReader
                                                              StreetRun.Config.Config
                                                              StreetRun.StreetRun)
                                                     (w :: StreetRun.SDLLayer.SDLRenderer
                                                             StreetRun.StreetRun)
  StreetRun.Renderer.clearScreen' @ StreetRun.StreetRun w w1
  = StreetRun.$sclearScreen'
"SPEC/StreetRun clearSfx' @ Vars @ StreetRun" [2] forall (w1 :: Control.Monad.State.Class.MonadState
                                                                  StreetRun.State.Vars
                                                                  StreetRun.StreetRun)
                                                         (w :: StreetRun.Common.HasCommonVars
                                                                 StreetRun.State.Vars)
  StreetRun.Sound_effects.clearSfx' @ StreetRun.State.Vars
                                    @ StreetRun.StreetRun
                                    w
                                    w1
  = StreetRun.$sclearSfx'
"SPEC/StreetRun drawHiscore' @ StreetRun @ Vars" [2] forall (w2 :: StreetRun.Common.HasCommonVars
                                                                     StreetRun.State.Vars)
                                                            (w1 :: Control.Monad.State.Class.MonadState
                                                                     StreetRun.State.Vars
                                                                     StreetRun.StreetRun)
                                                            (w :: StreetRun.Renderer.Renderer
                                                                    StreetRun.StreetRun)
  StreetRun.HUD.drawHiscore' @ StreetRun.StreetRun
                             @ StreetRun.State.Vars
                             w
                             w1
                             w2
  = StreetRun.$sdrawHiscore'
"SPEC/StreetRun drawScore' @ StreetRun @ Vars" [2] forall (w2 :: StreetRun.Work_func.HasPlayVars
                                                                   StreetRun.State.Vars)
                                                          (w1 :: Control.Monad.State.Class.MonadState
                                                                   StreetRun.State.Vars
                                                                   StreetRun.StreetRun)
                                                          (w :: StreetRun.Renderer.Renderer
                                                                  StreetRun.StreetRun)
  StreetRun.HUD.drawScore' @ StreetRun.StreetRun
                           @ StreetRun.State.Vars
                           w
                           w1
                           w2
  = StreetRun.$sdrawScore'
"SPEC/StreetRun drawScreen' @ StreetRun" [2] forall (w1 :: Control.Monad.Reader.Class.MonadReader
                                                             StreetRun.Config.Config
                                                             StreetRun.StreetRun)
                                                    (w :: StreetRun.SDLLayer.SDLRenderer
                                                            StreetRun.StreetRun)
  StreetRun.Renderer.drawScreen' @ StreetRun.StreetRun w w1
  = StreetRun.$sdrawScreen'
"SPEC/StreetRun getInput' @ StreetRun" [2] forall (w :: Control.Monad.State.Class.MonadState
                                                          StreetRun.State.Vars StreetRun.StreetRun)
  StreetRun.Load.getInput' @ StreetRun.StreetRun w
  = StreetRun.$sgetInput'
"SPEC/StreetRun haltMusic @ StreetRun" [2] forall (w :: Control.Monad.IO.Class.MonadIO
                                                          StreetRun.StreetRun)
  SDL.Mixer.haltMusic @ StreetRun.StreetRun w = StreetRun.$shaltMusic
"SPEC/StreetRun playGameMusic' @ StreetRun" [2] forall (w1 :: Control.Monad.IO.Class.MonadIO
                                                                StreetRun.StreetRun)
                                                       (w :: Control.Monad.Reader.Class.MonadReader
                                                               StreetRun.Config.Config
                                                               StreetRun.StreetRun)
  StreetRun.Audio.playGameMusic' @ StreetRun.StreetRun w w1
  = StreetRun.$splayGameMusic'
"SPEC/StreetRun reader @ (StateT Vars IO) _ _" [orphan] forall @ r
                                                               @ a
                                                               ($dMonad :: GHC.Base.Monad
                                                                             (Control.Monad.Trans.State.Lazy.StateT
                                                                                StreetRun.State.Vars
                                                                                GHC.Types.IO))
  Control.Monad.Trans.Reader.reader @ (Control.Monad.Trans.State.Lazy.StateT
                                         StreetRun.State.Vars GHC.Types.IO)
                                    @ r
                                    @ a
                                    $dMonad
  = StreetRun.$fRendererStreetRun_$sreader @ r @ a
"SPEC/StreetRun renderPresent @ StreetRun" forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                  StreetRun.StreetRun)
  SDL.Raw.Video.renderPresent @ StreetRun.StreetRun $dMonadIO
  = StreetRun.$fSDLRendererStreetRun_$srenderPresent
"SPEC/StreetRun titleStep' @ Vars @ StreetRun" [2] forall (w8 :: StreetRun.Sound_effects.AudioSfx
                                                                   StreetRun.StreetRun)
                                                          (w7 :: StreetRun.HUD.HUD
                                                                   StreetRun.StreetRun)
                                                          (w6 :: StreetRun.Scene.SceneManager
                                                                   StreetRun.StreetRun)
                                                          (w5 :: StreetRun.Load.HasInput
                                                                   StreetRun.StreetRun)
                                                          (w4 :: StreetRun.Renderer.Renderer
                                                                   StreetRun.StreetRun)
                                                          (w3 :: Control.Monad.State.Class.MonadState
                                                                   StreetRun.State.Vars
                                                                   StreetRun.StreetRun)
                                                          (w2 :: Control.Monad.Reader.Class.MonadReader
                                                                   StreetRun.Config.Config
                                                                   StreetRun.StreetRun)
                                                          (w1 :: StreetRun.Common.HasCommonVars
                                                                   StreetRun.State.Vars)
                                                          (w :: StreetRun.Tag_func.HasTitleVars
                                                                  StreetRun.State.Vars)
  StreetRun.Title.titleStep' @ StreetRun.State.Vars
                             @ StreetRun.StreetRun
                             w
                             w1
                             w2
                             w3
                             w4
                             w5
                             w6
                             w7
                             w8
  = StreetRun.$stitleStep'
"SPEC/StreetRun updateInput' @ StreetRun" [2] forall (w1 :: StreetRun.SDLLayer.SDLInput
                                                              StreetRun.StreetRun)
                                                     (w :: StreetRun.Load.HasInput
                                                             StreetRun.StreetRun)
  StreetRun.Load.updateInput' @ StreetRun.StreetRun w w1
  = StreetRun.$supdateInput'
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

