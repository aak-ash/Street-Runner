
==================== FINAL INTERFACE ====================
2019-04-26 06:49:55.629339303 UTC

interface street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE:StreetRun 8064
  interface hash: a3bc655069006562f55639c775a64000
  ABI hash: cac23d9dbff83e5caa25086f5e43259d
  export-list hash: 5275e5943d824dd2df957e53b5070875
  orphan hash: e8467508e3d5a5825f82b279bfef8dea
  flag hash: be0c81c72ad12296c619c6c60c666543
  opt_hash: 6faf2de08de32d19db9870899d88e59a
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  plugin_hash: ad164012d6b1e14942349d58b1132007
  sig of: Nothing
  used TH splices: False
  where
exports:
  StreetRun.main
module dependencies: StreetRun.Audio StreetRun.Bolt
                     StreetRun.Bolt_1 StreetRun.Building StreetRun.Camera
                     StreetRun.Clock StreetRun.Common StreetRun.Config StreetRun.Death
                     StreetRun.Font StreetRun.Font_functions StreetRun.Frame
                     StreetRun.GameOver StreetRun.Grass StreetRun.HUD StreetRun.Hurdle
                     StreetRun.Hurdle_1 StreetRun.Input StreetRun.Load StreetRun.Logger
                     StreetRun.Out StreetRun.Out_func StreetRun.Pause StreetRun.Physics
                     StreetRun.Picture StreetRun.Play StreetRun.Quake
                     StreetRun.Quake_BackStreet StreetRun.Quake_Building
                     StreetRun.Quake_Grass StreetRun.Quake_Street StreetRun.Renderer
                     StreetRun.Renderer_func_1 StreetRun.Renderer_func_2
                     StreetRun.Resource StreetRun.Runner StreetRun.Runner_func_1
                     StreetRun.Runner_func_2 StreetRun.SDLInput StreetRun.SDLRenderer
                     StreetRun.Scenario StreetRun.Scene StreetRun.Sfx StreetRun.Shaky
                     StreetRun.Snag StreetRun.Sound_effects StreetRun.State
                     StreetRun.Step StreetRun.Tag StreetRun.Tag_func StreetRun.Title
                     StreetRun.Types StreetRun.Work StreetRun.Work_func
package dependencies: StateVar-1.1.1.1 adjunctions-4.4
                      aeson-1.4.2.0 animate-0.7.0 array-0.5.3.0 attoparsec-0.13.2.2
                      base-4.12.0.0 base-compat-0.10.5 base-orphans-0.8.1
                      base16-bytestring-0.1.1.6 base64-bytestring-1.0.0.2
                      bifunctors-5.5.3 binary-0.8.6.0 bytes-0.15.5 bytestring-0.10.8.2
                      call-stack-0.1.0 cereal-0.5.8.0 comonad-5.0.4 conduit-1.3.1.1
                      containers-0.6.0.1 contravariant-1.5 data-default-class-0.1.2.0
                      deepseq-1.4.4.0 distributive-0.6 dlist-0.8.0.6 errors-2.3.0
                      exceptions-0.10.1 free-5.1 ghc-boot-th-8.6.4 ghc-prim-0.5.3
                      hashable-1.2.7.0 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      kan-extensions-5.2 key-state-0.2.0 lens-4.17 libyaml-0.1.1.0
                      lifted-base-0.2.3.12 linear-1.20.8 monad-control-1.0.2.3 mtl-2.2.2
                      pretty-1.1.3.6 primitive-0.6.4.0 profunctors-5.3 random-1.1
                      reflection-2.1.4 resourcet-1.2.2 safe-0.3.17
                      safe-exceptions-0.1.7.0 scientific-0.3.6.2 sdl2-2.4.1.0
                      sdl2-image-2.0.0 sdl2-mixer-1.1.0 sdl2-ttf-2.0.2
                      semigroupoids-5.3.2 stm-2.5.0.0 tagged-0.8.6
                      template-haskell-2.14.0.0 text-1.2.3.1 text-conversions-0.3.0
                      th-abstraction-0.2.11.0 time-1.8.0.2 time-locale-compat-0.1.1.5
                      transformers-0.5.6.2 transformers-base-0.4.5.2
                      transformers-compat-0.6.2 unliftio-core-0.1.2.0
                      unordered-containers-0.2.9.0 uuid-types-1.0.3 vector-0.12.0.2
                      yaml-0.11.0.0
orphans: time-1.8.0.2:Data.Time.Clock.TAI
         reflection-2.1.4:Data.Reflection linear-1.20.8:Linear.Instances
         stm-2.5.0.0:Control.Monad.STM
         attoparsec-0.13.2.2:Data.Attoparsec.Text.Internal
         attoparsec-0.13.2.2:Data.Attoparsec.ByteString.Char8
         vector-0.12.0.2:Data.Vector.Unboxed
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         hashable-1.2.7.0:Data.Hashable.Generic text-1.2.3.1:Data.Text.Lazy
         vector-0.12.0.2:Data.Vector.Fusion.Bundle
         transformers-0.5.6.2:Control.Monad.Trans.Error
         text-1.2.3.1:Data.Text binary-0.8.6.0:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.12.0.0:GHC.Float
         base-4.12.0.0:GHC.Base
family instance modules: adjunctions-4.4:Data.Functor.Rep
                         aeson-1.4.2.0:Data.Aeson.Types.Internal animate-0.7.0:Animate
                         attoparsec-0.13.2.2:Data.Attoparsec.Internal.Types
                         base-4.12.0.0:Control.Applicative base-4.12.0.0:Data.Complex
                         base-4.12.0.0:Data.Functor.Compose base-4.12.0.0:Data.Functor.Const
                         base-4.12.0.0:Data.Functor.Identity
                         base-4.12.0.0:Data.Functor.Product base-4.12.0.0:Data.Functor.Sum
                         base-4.12.0.0:Data.Monoid base-4.12.0.0:Data.Semigroup
                         base-4.12.0.0:Data.Semigroup.Internal base-4.12.0.0:Data.Version
                         base-4.12.0.0:Data.Void base-4.12.0.0:GHC.Exts
                         base-4.12.0.0:GHC.Generics base-4.12.0.0:GHC.IO.Exception
                         bifunctors-5.5.3:Data.Bifunctor.Biff
                         bifunctors-5.5.3:Data.Bifunctor.Clown
                         bifunctors-5.5.3:Data.Bifunctor.Fix
                         bifunctors-5.5.3:Data.Bifunctor.Flip
                         bifunctors-5.5.3:Data.Bifunctor.Join
                         bifunctors-5.5.3:Data.Bifunctor.Joker
                         bifunctors-5.5.3:Data.Bifunctor.Product
                         bifunctors-5.5.3:Data.Bifunctor.Sum
                         bifunctors-5.5.3:Data.Bifunctor.Tannen
                         bifunctors-5.5.3:Data.Bifunctor.Wrapped bytes-0.15.5:Data.Bytes.Get
                         bytes-0.15.5:Data.Bytes.Signed bytes-0.15.5:Data.Bytes.VarInt
                         conduit-1.3.1.1:Data.Conduit.Internal.Conduit
                         conduit-1.3.1.1:Data.Conduit.Internal.Pipe
                         containers-0.6.0.1:Data.IntMap.Internal
                         containers-0.6.0.1:Data.IntSet.Internal
                         containers-0.6.0.1:Data.Map.Internal
                         containers-0.6.0.1:Data.Sequence.Internal
                         containers-0.6.0.1:Data.Set.Internal containers-0.6.0.1:Data.Tree
                         dlist-0.8.0.6:Data.DList free-5.1:Control.Comonad.Cofree
                         free-5.1:Control.Comonad.Trans.Cofree free-5.1:Control.Monad.Free
                         free-5.1:Control.Monad.Trans.Free
                         ghc-boot-th-8.6.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.6.4:GHC.LanguageExtensions.Type
                         kan-extensions-5.2:Data.Functor.Day
                         kan-extensions-5.2:Data.Functor.Yoneda lens-4.17:Control.Lens.At
                         lens-4.17:Control.Lens.Internal.Indexed
                         lens-4.17:Control.Lens.Reified lens-4.17:Control.Lens.Tuple
                         lens-4.17:Control.Lens.Wrapped lens-4.17:Control.Lens.Zoom
                         linear-1.20.8:Linear.Affine linear-1.20.8:Linear.Plucker
                         linear-1.20.8:Linear.Quaternion linear-1.20.8:Linear.V
                         linear-1.20.8:Linear.V0 linear-1.20.8:Linear.V1
                         linear-1.20.8:Linear.V2 linear-1.20.8:Linear.V3
                         linear-1.20.8:Linear.V4
                         monad-control-1.0.2.3:Control.Monad.Trans.Control
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.4.0:Control.Monad.Primitive
                         primitive-0.6.4.0:Data.Primitive.Array
                         primitive-0.6.4.0:Data.Primitive.ByteArray
                         primitive-0.6.4.0:Data.Primitive.PrimArray
                         primitive-0.6.4.0:Data.Primitive.SmallArray
                         primitive-0.6.4.0:Data.Primitive.UnliftedArray
                         profunctors-5.3:Data.Profunctor.Composition
                         profunctors-5.3:Data.Profunctor.Rep
                         resourcet-1.2.2:Control.Monad.Trans.Resource.Internal
                         sdl2-2.4.1.0:SDL.Audio sdl2-2.4.1.0:SDL.Event
                         sdl2-2.4.1.0:SDL.Exception sdl2-2.4.1.0:SDL.Hint
                         sdl2-2.4.1.0:SDL.Init sdl2-2.4.1.0:SDL.Input.GameController
                         sdl2-2.4.1.0:SDL.Input.Joystick sdl2-2.4.1.0:SDL.Input.Keyboard
                         sdl2-2.4.1.0:SDL.Input.Keyboard.Codes sdl2-2.4.1.0:SDL.Input.Mouse
                         sdl2-2.4.1.0:SDL.Internal.Types sdl2-2.4.1.0:SDL.Power
                         sdl2-2.4.1.0:SDL.Time sdl2-2.4.1.0:SDL.Video
                         sdl2-2.4.1.0:SDL.Video.OpenGL sdl2-2.4.1.0:SDL.Video.Renderer
                         sdl2-image-2.0.0:SDL.Image sdl2-ttf-2.0.2:SDL.Font
                         tagged-0.8.6:Data.Tagged
                         template-haskell-2.14.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         th-abstraction-0.2.11.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
                         uuid-types-1.0.3:Data.UUID.Types.Internal
                         uuid-types-1.0.3:Data.UUID.Types.Internal.Builder
                         vector-0.12.0.2:Data.Vector vector-0.12.0.2:Data.Vector.Primitive
                         vector-0.12.0.2:Data.Vector.Storable
                         vector-0.12.0.2:Data.Vector.Unboxed
                         vector-0.12.0.2:Data.Vector.Unboxed.Base
import  -/  base-4.12.0.0:Control.Monad.IO.Class e96805f9d79f75be66a0d44eb83064c1
import  -/  base-4.12.0.0:Data.Functor 069b2025a03e32fd228e74a86a58a075
import  -/  base-4.12.0.0:GHC.Base c00b75f0b052d05c55ba6a4dd1c63b26
import  -/  base-4.12.0.0:GHC.Exception.Type 98b0fca1a406b013cbf2a34ff23be207
import  -/  base-4.12.0.0:Prelude 3c779dfd6448bdd8e234c336802c2acb
import  -/  exceptions-0.10.1:Control.Monad.Catch d963cd0a953cb33941cbb2c475dcbadb
import  -/  ghc-prim-0.5.3:GHC.Types 57064c9f957b09bc2e360061ad5cae0b
import  -/  linear-1.20.8:Linear.V2 4a7e4c0c9247ec5477069840e3acbf22
import  -/  mtl-2.2.2:Control.Monad.Reader d5c3a33f1c95bb71f4ae02f87a7048ff
import  -/  mtl-2.2.2:Control.Monad.Reader.Class 56d676c7504f5007ee5b66906716abcc
import  -/  mtl-2.2.2:Control.Monad.State 753def63fe8e937dc636f11e5230745a
import  -/  mtl-2.2.2:Control.Monad.State.Class 94cc1438f3f9a3259fb0a2c56d3d0303
import  -/  random-1.1:System.Random a2913fef910fa7846b8be540f8dcdaf5
import  -/  safe-exceptions-0.1.7.0:Control.Exception.Safe 17ab706d389356fc1b759977e8d17a1a
import  -/  sdl2-2.4.1.0:SDL a2c38c0f08b3d06bbb0ff9d8498c68c0
import  -/  sdl2-2.4.1.0:SDL.Init b258834ad682d39dfc38771081b3862c
import  -/  sdl2-2.4.1.0:SDL.Vect cd47fc30aef16e8f55c1351dafae292d
import  -/  sdl2-2.4.1.0:SDL.Video 4e94ebdf8c0666730ff81f18b13b7353
import  -/  sdl2-2.4.1.0:SDL.Video.Renderer fde5d4735decffc12f192a8489c7afbb
import  -/  sdl2-mixer-1.1.0:SDL.Mixer ab60a8550598269def875bc1a7207b35
import  -/  sdl2-ttf-2.0.2:SDL.Font c4a3fe90a2776dafa33b0d9792acf8d0
import  -/  StreetRun.Audio b9aa4bed0b608434003177c2612cb676
  exports: ea2a64f8a738ac11df84a60ad5ddd8a8
  Audio c236b79048ac247852d9a2f1fb556e72
  lowerGameMusic' d9a5b148fe0a6daf5c147a475f3919fc
  playBirdSfx' a1a81f5258f70a5c5bf5889850807f36
  playDeathSfx' f6d4b819d95e1cc021177c59ad7eaf39
  playDuckSfx' 5bc02a9e6674748f9298180823f77ba0
  playGameMusic' e79ce42ec5153991d7acedebb4cce2fb
  playHurtSfx' 954d4a75cafd11bcacc4750427c0f53b
  playJumpSfx' 4ca0aa97343398d99d184330f47a94d3
  playLavaSfx' a871f91a424ffb06f309c794e4b2f53f
  playPointSfx' 02a7078d26aa04f79947b299a12f8a3f
  playQuakeSfx' 609fe89c4fc6bc656f0286470b661fa7
  playRecoverSfx' 1675c543ef7fa60216b3a7d60fa0f03e
  playRockSfx' aa5ef7eeddb2c282077c622ac8ca7d8c
  playStockSfx' 2b406e3fbd7f6b6387d1851f8b7602ef
  raiseGameMusic' ec1ed41672fd5490732fbe9b4a984927
  stopGameMusic' d1372267d32d6a322df900cb1131e999
import  -/  StreetRun.Bolt 12910c793e44be4c968efabd0e75da0f
  exports: 1b9bf166c2cef1cae48bc6688399036f
  toScene' f609ddbce3efc6d212f5997997c1f1bb
import  -/  StreetRun.Bolt_1 4f06a9cd2a934ee939896c699ad0fdd5
  exports: b531d00fa49df8fd0047b6101961014e
  mainLoop 8afb306182ad3311bfc3e1190ee1cdb2
import  -/  StreetRun.Clock 89a62033dff72bebbbf4e2a01026fec0
  exports: b739ca3407504ac5807a7a1833deaf5a
  Clock 2b40ecab298d4d0a35bbceaf277a7019
  delayMilliseconds' 50128bf2f29cd9bd038033d16a5a20cd
import  -/  StreetRun.Config cf93ae4b11ed31ae458ca135cf881ef9
  exports: 718448995096e5a0315e80eb460349b2
  $sel:cRenderer:Config 8fee3f2631cead17e5b67aab65a149ae
  $sel:cResources:Config 8fee3f2631cead17e5b67aab65a149ae
  $sel:cWindow:Config 8fee3f2631cead17e5b67aab65a149ae
  Config 1e9ae779b02f6c42784957c8c445b325
  Config 8fee3f2631cead17e5b67aab65a149ae
import  -/  StreetRun.Death 4f7eacbaac739ee4d5621e77a22fbbe0
  exports: 14743785934f7ec3332ecd60bf49379e
  Death de140fce135b19484db7562249d763a3
  deathStep' 5ed0ab25b5cc8602421dfe8fc945c228
import  -/  StreetRun.GameOver 9330ccdf856df0c1b05f4ee437aa6e4e
  exports: 169b239352018c17431b908b51c6f065
  GameOver 06ea9fcbce4094d17d445d488f0cfed9
  gameOverStep' 7ff0ffe2471310105361dcefcb1820c7
import  -/  StreetRun.HUD 67c25875c022a2408906d37d63f0510d
  exports: e799087feb519c2fa6ec11e1bcb9834b
  HUD dd3aec2a82456c62e19ed6e64162878f
  drawControls' f634a2a9a71af10e46b89f09774437f9
  drawHiscore' cd60de1bc32326dac23a77881c1d4dc4
  drawScore' e7eea35b314d1c7643b6972bd08ba89a
import  -/  StreetRun.Hurdle c4bf1734d0fc0cd048dae74996b10d52
  exports: 5d1d0f5747b642287dbb935bf038e6f0
  streamOfObstacles 1da345358045153159835e6370c41b00
import  -/  StreetRun.Hurdle_1 1a485025fa7e082b8373c58e155e3bf6
  exports: d905238960a6001c32ab0ea30381a713
import  -/  StreetRun.Load 16e217d4e0c253fb423fa049ddaea289
  exports: bb94dee51103db3de49f80223cdee067
  HasInput a827a1b40b93ca24fd0678aff14a3874
  getInput' 3b2e90049f95a24e277a54181dcb47ad
  setInput' 8a93adfed30f97654995bd993076c4c9
  updateInput' f510f8119c3c4e774a33c2459719a17b
import  -/  StreetRun.Logger c1184bbc74eb79639ce17c0146cd0cef
  exports: 81e5ce7f09b7fc1815ee1a743df57e50
  Logger 4552d82a9988ace40de231328b43d46d
import  -/  StreetRun.Pause c6aa2674428525a6eacaff4466252b89
  exports: 82d44093e53fd475130cc34c015137c2
  Pause 886d57635fcced106f4fa92fa348f6af
  pauseStep' 728a65ac6f7523e03c3d967ee2e33620
import  -/  StreetRun.Picture 75395a4c252b8548400a323f40a76527
  exports: babc26a2152d66639b7a47ea4c5947f4
  CameraControl 886c953787575a6ab7b91f5818c72b74
  adjustCamera' e0a614f67400a50e568310b8cd0251a3
import  -/  StreetRun.Play fde39e25142d663f83ffdc7c478d68a3
  exports: fddfe503c07894a36563a64c1e4547d3
  Play 34ccbec8700b76610dd4c882634b2a13
  playStep' 33dbbbcf8794418576c3962bae5fa1b6
import  -/  StreetRun.Renderer eba9a9e4c8700e42ea509a1bf564c30b
  exports: bdc569cebfaf1503ce959a9192a1814c
  Renderer 879b383bd7b1ca67a12fca41ecb57c3d
  clearScreen' 1350ffd59d3419c0f668afcdafc5ad44
  drawScreen' 003fa5805c240f0f03d27f5af90ca290
import  -/  StreetRun.Renderer_func_1 b2f8a68dbebb4a5575e9c9404df81f49
  exports: cd995c9f02033435bf3d7151e24e6a3d
  drawSprite 2f4afbe89784245783cfed7a7288c531
  drawTextureSprite caf10b0ef3aef43ae2caa84cdcf6bae4
import  -/  StreetRun.Renderer_func_2 4d5a7c4dba8ccd5d139bd424e7e60331
  exports: acb7c593e3b7f4916cf72f231a22b161
  drawBlackOverlay' ef0d26389e3e705fdfcc25e5e1b85713
  drawHorizontalScrollImage 1e80483c67104f564666286c0d0b36d4
  drawHorizontalScrollSprite 0e7e8fb153144a7ebd7e3e8ac24683d7
  getSpriteAnimations 5c1af3517e74356da5ec3b08e2b68478
import  -/  StreetRun.Resource 357bae5ce68d97c8f50dc83bb134c5b4
  exports: 0ee985979bdcee8e3441b0d8e82a6966
  $sel:rBackStreetSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rBirdSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rBuildingSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rControlsSprite:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rEscapeSprite:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rGameOverSprite:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rGrassSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rHiscoreSprite:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rLavaSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rNumberSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rPauseSprite:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rRockSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rRunnerSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rSpaceSprite:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rStreetSprites:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  $sel:rTitleSprite:Resources b1a0a1bc6772470c3243809e5e2e3dc0
  freeResources 77ca675dfdef836d3adb2f164d59517b
  loadResources 81a95446156aae301e55f15be351b4a0
import  -/  StreetRun.SDLInput 7f2490d25daddc69d56177a64a0d9e82
  exports: 531251f807022c0b301a8eab3b96e7f9
  SDLInput c707ee7fc58c67970eedff7fdde886ac
  pollEventPayloads' ba06d67e33152eec14b42e1583cc33ec
import  -/  StreetRun.SDLRenderer 3cb58a3e7c151a4e55076a15375a1145
  exports: b035665cd19a2962c5a1cabd4abb8a1f
  SDLRenderer a56dc3e11af00cde5b5730118be5d15e
  clearRenderer' 5002e9982d491f8a7538aaa64c27d26c
  drawTexture' a7e6fbb7d529712e801f32e926116a81
  presentRenderer' 1e9f05798a88f5a2dd0fb8747edfe69d
  queryTexture' b26fbdc05e42ae3bb3dec30c15f67dba
import  -/  StreetRun.Scene af7d6d54736d3642cc86bcfab3e76781
  exports: 07dad99016b354b41a3f7ae55850c26a
  SceneManager 63d1267c6f32ccbcb6cd361a33bac81a
import  -/  StreetRun.Sound_effects a85edcbc0529355d0d823628a5187457
  exports: 4f505e3c45a92fc5611bc81b03b0dc47
  AudioSfx 59c875a47b0b4851b33ea127ea6242ec
  addSfxs' a1d16c5d5c83fa4ed5f5fe23e20b87e5
  clearSfx' abc36d23b521fdce048ece0e11cb8977
  playSfx' 011d33880344a376bd197c0c84b80490
import  -/  StreetRun.State 2b4a5b23cba95fdf8a8075ad75dbe6ec
  exports: 9215ef2a775e8ad7562f6edbfe13ac1f
  Vars 06c844f355a6a421607a99fdffa4b901
  initVars c01f031cbd84f26d28c85b81e68c6880
import  -/  StreetRun.Title 7fc5acc47d603fae759ec80e05bc9953
  exports: b086a246cc8dd93e3bfebff4e6d99f5d
  Title fd9ee9f44b91ce89af456ee8e77d61f3
  titleStep' f2450eba4e99297e84a356a33bed844c
import  -/  text-1.2.3.1:Data.Text.IO 04a90de6b55e7446693a989e9de89740
import  -/  transformers-0.5.6.2:Control.Monad.Trans.Reader 56f58e64ea149219b98233a32ddd4759
import  -/  transformers-0.5.6.2:Control.Monad.Trans.State.Lazy ff6ca0dfc09530bd7be56f884563f2c0
ba46176ec69d12880f5348a25544d176
  $fApplicativeStreetRun :: GHC.Base.Applicative StreetRun.StreetRun
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fFunctorStreetRun
                  StreetRun.$fApplicativeStreetRun1
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c<*>
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a -> b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$cliftA2
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <c>_N)
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c<*
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
6f60f3e069f72ea5dd97625902d175b3
  $fApplicativeStreetRun1 ::
    a
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (eta :: a)
                   (eta1 :: StreetRun.Config.Config)
                   (eta2 :: StreetRun.State.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3, (eta, eta2) #)) -}
b64a10a2bec7581f581472783ddf806d
  $fApplicativeStreetRun_$s$fApplicativeReaderT_$c*> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,1*C1(C(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           b)
                   (r1 :: r) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           StreetRun.State.Vars GHC.Types.IO a
                   = u `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 let {
                   k :: Control.Monad.Trans.State.Lazy.StateT
                          StreetRun.State.Vars GHC.Types.IO b
                   = v `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <b>_N)
                       r1
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (k `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <StreetRun.State.Vars>_N <GHC.Types.IO>_R <b>_N)
                     (case ipv1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <(b, StreetRun.State.Vars)>_R)
                    ipv })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <b>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT
                       StreetRun.State.Vars GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <b>_N)) -}
bff58b2779b2e8124827ec352de4e3cb
  $fApplicativeStreetRun_$s$fApplicativeReaderT_$c<* ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (u :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           b)
                   (r1 :: r) ->
                 Control.Monad.Trans.State.Lazy.$fApplicativeStateT2
                   @ GHC.Types.IO
                   @ StreetRun.State.Vars
                   GHC.Base.$fFunctorIO
                   GHC.Base.$fMonadIO
                   @ a
                   @ b
                   @ a
                   (GHC.Base.const @ a @ b)
                   (u `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <a>_N)
                      r1)
                   (v `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <b>_N)
                      r1))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT
                       StreetRun.State.Vars GHC.Types.IO)
                    a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         b>_R
                 ->_R (<r>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <StreetRun.State.Vars>_N
                                     <GHC.Types.IO>_R
                                     <a>_N)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <r>_R
                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                           StreetRun.State.Vars GHC.Types.IO>_R
                                                        <a>_N)) -}
ed4a6cc85ac32d25ad69c5a6bd13c800
  $fApplicativeStreetRun_$s$fApplicativeReaderT_$c<*> ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*C1(U),1*U)))))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (f :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           (a -> b))
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           a)
                   (r1 :: r) ->
                 let {
                   ds :: Control.Monad.Trans.State.Lazy.StateT
                           StreetRun.State.Vars GHC.Types.IO (a -> b)
                   = f `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a -> b>_N)
                       r1
                 } in
                 let {
                   ds1 :: Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO a
                   = v `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (ds
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a -> b>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a -> b, StreetRun.State.Vars)>_R)
                         s of ds2 { (#,#) ipv ipv1 ->
                  case (ds1
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                          (case ipv1 of wild { (,) f1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R)
                         ipv of ds3 { (#,#) ipv2 ipv3 ->
                  (# ipv2,
                     (case ipv1 of wild { (,) f1 s' ->
                      f1 (case ipv3 of wild1 { (,) x s'' -> x }) },
                      case ipv3 of wild { (,) x s'' -> s'' }) #) } })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <b>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT
                       StreetRun.State.Vars GHC.Types.IO)
                    (a -> b)>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <b>_N)) -}
a5ca1ed2f57d925f752cd9a25b268f19
  $fApplicativeStreetRun_$s$fApplicativeReaderT_$cliftA2 ::
    (a -> b -> c)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         c
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,C(C1(U))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ r
                   @ a
                   @ b
                   @ c
                   (f :: a -> b -> c)
                   (x :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           a)
                   (y :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           b)
                   (r1 :: r) ->
                 Control.Monad.Trans.State.Lazy.$fApplicativeStateT2
                   @ GHC.Types.IO
                   @ StreetRun.State.Vars
                   GHC.Base.$fFunctorIO
                   GHC.Base.$fMonadIO
                   @ a
                   @ b
                   @ c
                   f
                   (x `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <a>_N)
                      r1)
                   (y `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <b>_N)
                      r1))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                 <a -> b -> c>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         b>_R
                 ->_R (<r>_R
                       ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                     <StreetRun.State.Vars>_N
                                     <GHC.Types.IO>_R
                                     <c>_N)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                        <r>_R
                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                           StreetRun.State.Vars GHC.Types.IO>_R
                                                        <c>_N)) -}
ba46176ec69d12880f5348a25544d176
  $fAudioSfxStreetRun ::
    StreetRun.Sound_effects.AudioSfx StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fAudioSfxStreetRun2
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioSfxStreetRun1
                    `cast`
                  (<[StreetRun.Sfx.Sfx]>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioSfxStreetRun_$cplaySfx -}
50dd74530a72fd1a860077ea15d01e26
  $fAudioSfxStreetRun1 ::
    [StreetRun.Sfx.Sfx]
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U><L,A><L,1*U(1*U(U,U,1*U),U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (w2 :: [StreetRun.Sfx.Sfx])
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars
                       (case ds of wild1 { StreetRun.Common.CommonVars ds11 ds12 ds13 ->
                        StreetRun.Common.CommonVars
                          ds11
                          ds12
                          (GHC.Base.augment
                             @ StreetRun.Sfx.Sfx
                             (\ @ b
                                (c :: StreetRun.Sfx.Sfx -> b -> b)[OneShot]
                                (n :: b)[OneShot] ->
                              GHC.Base.foldr @ StreetRun.Sfx.Sfx @ b c n w2)
                             ds13) })
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       ds7 }) #)) -}
853e0f56b77210993d52c6f588f8aa23
  $fAudioSfxStreetRun2 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*U(U,U,A),U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars
                       (case ds of wild1 { StreetRun.Common.CommonVars ds11 ds12 ds13 ->
                        StreetRun.Common.CommonVars
                          ds11
                          ds12
                          (GHC.Types.[] @ StreetRun.Sfx.Sfx) })
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       ds7 }) #)) -}
ba46176ec69d12880f5348a25544d176
  $fAudioSfxStreetRun_$cplaySfx :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Sound_effects.playSfx'
                   @ StreetRun.StreetRun
                   @ StreetRun.State.Vars
                   StreetRun.$fAudioStreetRun
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun) -}
ba46176ec69d12880f5348a25544d176
  $fAudioStreetRun :: StreetRun.Audio.Audio StreetRun.StreetRun
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fAudioStreetRun15
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun14
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun13
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun12
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun11
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun10
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun9
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun8
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun7
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun6
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun5
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun4
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun3
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun2
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fAudioStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
638652411ebba2f54a5dd3921eb06dd6
  $fAudioStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        128#
                        eta1 of wild { (#,#) ds4 ds5 ->
                 (# ds4, (GHC.Tuple.(), eta) #) }) -}
3414d6cbc61f6084ed231a85a86fdac7
  $fAudioStreetRun10 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds16
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
3b021d11f155eb1d35a0c56cc7c38177
  $fAudioStreetRun11 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds15
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
055ec36a014d897e3dcb10ee8037fbb9
  $fAudioStreetRun12 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds14
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
eff577509aec2badec65a8c667558a94
  $fAudioStreetRun13 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds13
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
f7113248cb7f5469c9a1f307e2d74149
  $fAudioStreetRun14 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.State#
                                                         GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        eta1 of wild { (#,#) ds1 ds2 ->
                 (# ds1, (GHC.Tuple.(), eta) #) }) -}
2ab236ea6023ea441a9d455901f404d5
  $fAudioStreetRun15 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <S(LLS(LLLLLLLLS(S)LLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { StreetRun.Config.Config ww1 ww2 ww3 ->
                 case ww3 of ww4 { StreetRun.Resource.Resources ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ww15 ww16 ww17 ww18 ww19 ww20 ww21 ww22 ww23 ww24 ww25 ww26 ww27 ww28 ww29 ww30 ww31 ww32 ->
                 case ww13
                        `cast`
                      (SDL.Mixer.N:Music[0]) of ww33 { GHC.Ptr.Ptr ww34 ->
                 StreetRun.$w$splayGameMusic' ww34 w1 w2 } } }) -}
21eef3ed5d229b1b787756d2dc50e3fa
  $fAudioStreetRun2 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        16#
                        eta1 of wild { (#,#) ds4 ds5 ->
                 (# ds4, (GHC.Tuple.(), eta) #) }) -}
47c084f83af8c6bde4ee823b3d4737d0
  $fAudioStreetRun3 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds23
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
59952c32d11656d2ae4b596c324d258f
  $fAudioStreetRun4 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds22
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
351c5705e9925aec2030e1c94e73578d
  $fAudioStreetRun5 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds21
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
be094a42833df5cf3e3be375f009f6bd
  $fAudioStreetRun6 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds19
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
7c2e041b619e815f0a7a0a030b90d5d5
  $fAudioStreetRun7 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds20
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
ee71c2bfb73d7e641f32ea34f967fe21
  $fAudioStreetRun8 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds18
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
48da8a172d278bd3c6dfbb360462a1ee
  $fAudioStreetRun9 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 GHC.Prim.catch#
                   @ ((), StreetRun.State.Vars)
                   @ GHC.Exception.Type.SomeException
                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                    case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                    case ds17
                           `cast`
                         (SDL.Mixer.N:Chunk[0]) of ds32 { GHC.Ptr.Ptr ds33 ->
                    case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                          -> GHC.Prim.Addr#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.Int#
                                                          -> GHC.Prim.State# GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                           -1#
                           ds33
                           0#
                           -1#
                           eta2 of wild3 { (#,#) ds34 ds35 ->
                    case GHC.Prim.<# (GHC.Prim.narrow32Int# ds35) 0# of lwild {
                      DEFAULT -> (# ds34, (GHC.Tuple.(), eta) #)
                      1#
                      -> case SDL.Mixer.play1 ds34 of ds36 { (#,#) ipv ipv1 ->
                         (# ipv, (GHC.Tuple.(), eta) #) } } } } } })
                   (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot]
                      (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                    case e1 of wild { GHC.Exception.Type.SomeException e2 $dException1 e3 ->
                    case Data.Typeable.Internal.sameTypeRep
                           @ *
                           @ *
                           @ e2
                           @ SDL.Exception.SDLException
                           (GHC.Exception.Type.$p1Exception @ e2 $dException1)
                             `cast`
                           (Data.Typeable.Internal.N:Typeable[0] <*>_N <e2>_N)
                           SDL.Exception.$fDataSDLException3 of wild1 {
                      GHC.Types.False
                      -> GHC.Prim.raiseIO#
                           @ GHC.Exception.Type.SomeException
                           @ ((), StreetRun.State.Vars)
                           wild
                           eta2
                      GHC.Types.True
                      -> case SDL.Exception.$fExceptionSDLException_$ctoException
                                e3
                                  `cast`
                                (UnsafeCo representational e2 SDL.Exception.SDLException) of wild2 { GHC.Exception.Type.SomeException e4 $dException2 e5 ->
                         case Data.Typeable.Internal.sameTypeRep
                                @ *
                                @ *
                                @ e4
                                @ GHC.IO.Exception.SomeAsyncException
                                (GHC.Exception.Type.$p1Exception @ e4 $dException2)
                                  `cast`
                                (Data.Typeable.Internal.N:Typeable[0] <*>_N <e4>_N)
                                GHC.IO.Exception.$fExceptionAllocationLimitExceeded6 of wild3 {
                           GHC.Types.False -> (# eta2, (GHC.Tuple.(), eta) #)
                           GHC.Types.True
                           -> case e5
                                     `cast`
                                   (UnsafeCo representational e4 GHC.IO.Exception.SomeAsyncException) of wild4 { GHC.IO.Exception.SomeAsyncException e6 $dException ds ->
                              case GHC.Prim.raiseIO#
                                     @ GHC.Exception.Type.SomeException
                                     @ ()
                                     (SDL.Exception.$fExceptionSDLException_$ctoException
                                        e3
                                          `cast`
                                        (UnsafeCo representational e2 SDL.Exception.SDLException))
                                     eta2
                              ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                        ((), StreetRun.State.Vars) #)
                              of {} } } } } })
                   eta1) -}
ba46176ec69d12880f5348a25544d176
  $fCameraControlStreetRun ::
    StreetRun.Picture.CameraControl StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fCameraControlStreetRun1
                    `cast`
                  (<StreetRun.Camera.Camera>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
d05c2a68001b3ce0f87f1485dd166976
  $fCameraControlStreetRun1 ::
    StreetRun.Camera.Camera
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(U(U(U),U(U)),U(U,U))><L,1*U(A,1*U(U),A)><L,1*U(U,U,U,U,U,U,U,A)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: StreetRun.Camera.Camera)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { StreetRun.Camera.Camera ww1 ww2 ->
                 StreetRun.$w$sadjustCamera' ww1 ww2 w1 w2 w3 }) -}
ba46176ec69d12880f5348a25544d176
  $fClockStreetRun :: StreetRun.Clock.Clock StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fClockStreetRun1
                    `cast`
                  (<GHC.Types.Int>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
ec139a351ea711edb3de6d6a78414e8c
  $fClockStreetRun1 ::
    GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,A><L,U><S,U>, Inline: [2],
     Unfolding: InlineRule (4, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 StreetRun.$w$cdelayMilliseconds w w2 w3) -}
ba46176ec69d12880f5348a25544d176
  $fDeathStreetRun :: StreetRun.Death.Death StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fDeathStreetRun_$cdeathStep -}
ba46176ec69d12880f5348a25544d176
  $fDeathStreetRun_$cdeathStep :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Death.deathStep'
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasPlayVarsVars_$cplayVars
                     `cast`
                   (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fSceneManagerStreetRun
                   StreetRun.$fHasInputStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fCameraControlStreetRun
                   StreetRun.$fHUDStreetRun) -}
ba46176ec69d12880f5348a25544d176
  $fFunctorStreetRun :: GHC.Base.Functor StreetRun.StreetRun
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  (StreetRun.$fFunctorStreetRun_$s$fFunctorReaderT_$cfmap
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  (StreetRun.$fFunctorStreetRun_$s$fFunctorReaderT_$c<$
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
0a23228c5a9d60c6000c2dac2d39c024
  $fFunctorStreetRun_$s$fFunctorReaderT_$c<$ ::
    a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><L,1*C1(C(C1(U(U,1*U(A,1*U)))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (x :: a)
                   (v :: Control.Monad.Trans.Reader.ReaderT
                           r
                           (Control.Monad.Trans.State.Lazy.StateT
                              StreetRun.State.Vars GHC.Types.IO)
                           b)
                   (x1 :: r) ->
                 let {
                   eta :: Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO b
                   = v `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <b>_N)
                       x1
                 } in
                 (\ (eta1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (eta
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <b>_N)
                          eta1)
                         `cast`
                       (GHC.Types.N:IO[0] <(b, StreetRun.State.Vars)>_R)
                         s of ds { (#,#) ipv ipv1 ->
                  (# ipv, (x, case ipv1 of wild { (,) a1 s' -> s' }) #) })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(a,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <a>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a>_R
                 ->_R <Control.Monad.Trans.Reader.ReaderT
                         r
                         (Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO)
                         b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <a>_N)) -}
1be2ca96f4c4e922ddbaf1e8a4399d9e
  $fFunctorStreetRun_$s$fFunctorReaderT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(U)><L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a @ b (f :: a -> b) ->
                 Control.Monad.Trans.Reader.mapReaderT
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        StreetRun.State.Vars GHC.Types.IO)
                   @ a
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        StreetRun.State.Vars GHC.Types.IO)
                   @ b
                   @ r
                   (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap
                      @ GHC.Types.IO
                      @ StreetRun.State.Vars
                      GHC.Base.$fFunctorIO
                      @ a
                      @ b
                      f)) -}
ba46176ec69d12880f5348a25544d176
  $fGameOverStreetRun ::
    StreetRun.GameOver.GameOver StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fGameOverStreetRun_$cgameOverStep -}
ba46176ec69d12880f5348a25544d176
  $fGameOverStreetRun_$cgameOverStep :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.GameOver.gameOverStep'
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasPlayVarsVars_$cplayVars
                     `cast`
                   (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasGameOverVarsVars_$cgameOverVars
                     `cast`
                   (Sym (StreetRun.Out_func.N:HasGameOverVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fSceneManagerStreetRun
                   StreetRun.$fHasInputStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fCameraControlStreetRun
                   StreetRun.$fHUDStreetRun) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun :: StreetRun.HUD.HUD StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fHUDStreetRun5
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHUDStreetRun3
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHUDStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U)))><S(LLLLS(LLLS(S)LLLLLLLLLLLL)LLL),1*U(U,U,U,U,U(U,U,U,U(U),U,U,U,U,U,U,U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 case ds4 of wild1 { StreetRun.Work.PlayVars ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds8 ds9 ds10 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 case ds14
                        `cast`
                      (StreetRun.Types.N:Seconds[0]) of wild2 { GHC.Types.F# x ->
                 case GHC.Prim.ltFloat# x 0.0# of lwild {
                   DEFAULT -> (# eta1, (GHC.Tuple.(), wild) #)
                   1#
                   -> StreetRun.$w$cdrawControlsText
                        StreetRun.HUD.drawControls'4
                        StreetRun.HUD.drawControls'3
                        r1
                        wild
                        eta1 } } } }) -}
5e1d190f886b29e6682eecea170be21c
  $fHUDStreetRun2 ::
    GHC.Types.IO a
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (x :: GHC.Types.IO a)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x `cast` (GHC.Types.N:IO[0] <a>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv, (ipv1, eta1) #) }) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun3 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,U><S(LLLLS(S(S)LLLLLLLLLLLLLLL)LLL),1*U(U,U,U,U,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U)><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 case ds4 of wild1 { StreetRun.Work.PlayVars ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds8 ds9 ds10 ds18 ds19 ds20 ds21 ds22 ds23 ->
                 case ds11
                        `cast`
                      (StreetRun.Types.N:Score[0]) of wild2 { GHC.Types.I# i ->
                 (((StreetRun.HUD.$wdrawNumbers
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun_$dRenderer1
                      (GHC.Integer.Type.smallInteger i)
                      StreetRun.HUD.drawHiscore'2
                      StreetRun.HUD.drawScore'1)
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     r1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    wild)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   eta1 } } }) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun4 ::
    StreetRun.Font.Number
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,U><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: StreetRun.Font.Number)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawNumber w ww1 ww2 w2 w3 w4 }) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun5 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U))><L,U(U(U(U),U,U),U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case StreetRun.$w$cdrawHiscoreText
                        StreetRun.HUD.drawHiscore'40
                        StreetRun.HUD.drawHiscore'39
                        r1
                        eta
                        eta1 of ds1 { (#,#) ipv ipv1 ->
                 case eta of wild { StreetRun.State.Vars ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds of wild1 { StreetRun.Common.CommonVars ds9 ds10 ds11 ->
                 case ds9
                        `cast`
                      (StreetRun.Types.N:Score[0]) of wild2 { GHC.Types.I# i ->
                 (((StreetRun.HUD.$wdrawNumbers
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun_$dRenderer2
                      (GHC.Integer.Type.smallInteger i)
                      StreetRun.HUD.drawHiscore'2
                      StreetRun.HUD.drawHiscore'1)
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     r1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    (case ipv1 of wild3 { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } } }) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun6 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawHiscoreText ww1 ww2 w1 w2 w3 }) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun_$dRenderer :: GHC.Base.Monad StreetRun.StreetRun
  {- Strictness: m,
     Unfolding: (GHC.Base.C:Monad
                   @ StreetRun.StreetRun
                   (StreetRun.HUD.drawHiscore'36 @ StreetRun.StreetRun)
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   StreetRun.$fApplicativeStreetRun1
                     `cast`
                   (forall (a :: <*>_N).
                    <a>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(a,
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                   (StreetRun.HUD.drawHiscore'34 @ StreetRun.StreetRun)) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun_$dRenderer1 ::
    StreetRun.Renderer.Renderer StreetRun.StreetRun
  {- Unfolding: (StreetRun.Renderer.C:Renderer
                   @ StreetRun.StreetRun
                   StreetRun.$fHUDStreetRun_$dRenderer
                   (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'30 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'28 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'26 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'24 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'22 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'20 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'18 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'16 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'14 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'12 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'10 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'8 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'4 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   StreetRun.$fHUDStreetRun4
                     `cast`
                   (<StreetRun.Font.Number>_R
                    ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <((),
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <StreetRun.Config.Config>_R
                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                              StreetRun.State.Vars
                                                                                                              GHC.Types.IO>_R
                                                                                                           <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)) -}
ba46176ec69d12880f5348a25544d176
  $fHUDStreetRun_$dRenderer2 ::
    StreetRun.Renderer.Renderer StreetRun.StreetRun
  {- Unfolding: (StreetRun.Renderer.C:Renderer
                   @ StreetRun.StreetRun
                   StreetRun.$fHUDStreetRun_$dRenderer
                   (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'30 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'28 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'26 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'24 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'22 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'20 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'18 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'16 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'14 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'12 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'10 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'8 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'4 @ StreetRun.StreetRun)
                   StreetRun.$fHUDStreetRun6
                     `cast`
                   (<(GHC.Types.Int, GHC.Types.Int)>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <((),
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <StreetRun.Config.Config>_R
                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                              StreetRun.State.Vars
                                                                                                              GHC.Types.IO>_R
                                                                                                           <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                   StreetRun.$fHUDStreetRun4
                     `cast`
                   (<StreetRun.Font.Number>_R
                    ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <((),
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                           <StreetRun.Config.Config>_R
                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                              StreetRun.State.Vars
                                                                                                              GHC.Types.IO>_R
                                                                                                           <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                   (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)) -}
ba46176ec69d12880f5348a25544d176
  $fHasInputStreetRun :: StreetRun.Load.HasInput StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fHasInputStreetRun3
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHasInputStreetRun2
                    `cast`
                  (<StreetRun.Input.Input>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHasInputStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(StreetRun.Input.Input,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <StreetRun.Input.Input>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                        <StreetRun.Config.Config>_R
                                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                           StreetRun.State.Vars
                                                                                                                           GHC.Types.IO>_R
                                                                                                                        <StreetRun.Input.Input>_N) ; Sym (StreetRun.N:StreetRun[0]) <StreetRun.Input.Input>_N)) -}
56317b4350f7ff2da60cf22921aa2111
  $fHasInputStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (StreetRun.Input.Input, StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case eta of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     ds7 },
                     eta) #)) -}
bf0d82dd956ea056641b2de0a19379ef
  $fHasInputStreetRun2 ::
    StreetRun.Input.Input
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,U,U,U,U,A,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (input :: StreetRun.Input.Input)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 input ds7 }) #)) -}
3cd0098cf0d7d9b7279cd2b4cb1f4b4f
  $fHasInputStreetRun3 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,A><L,1*U(U,U,U,U,U,U,1*U(U(U,U),U(U,U),U(U,U),U(U,U),A),U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 StreetRun.$w$cupdateInput w1 w2) -}
ba46176ec69d12880f5348a25544d176
  $fLoggerStreetRun :: StreetRun.Logger.Logger StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fLoggerStreetRun1
                    `cast`
                  (<Data.Text.Internal.Text>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
7b7147a5f687e9a185dced24282c882d
  $fLoggerStreetRun1 ::
    Data.Text.Internal.Text
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, Strictness: <L,1*U(U,U,U)><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (x :: Data.Text.Internal.Text)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Data.Text.IO.appendFile2
                        GHC.IO.Handle.FD.stdout
                        x
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case GHC.IO.Handle.Text.$whPutChar
                        GHC.IO.Handle.FD.stdout
                        '\n'#
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 (# ipv2, (ipv3, eta1) #) } }) -}
ba46176ec69d12880f5348a25544d176
  $fMonadCatchStreetRun ::
    Control.Monad.Catch.MonadCatch StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadThrowStreetRun
                  StreetRun.$fMonadCatchStreetRun1
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Type.Exception e>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R (<e>_R ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <StreetRun.Config.Config>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    StreetRun.State.Vars GHC.Types.IO>_R
                                 <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
052f7b9df1080deaa422458896799a36
  $fMonadCatchStreetRun1 ::
    GHC.Exception.Type.Exception e =>
    Control.Monad.Trans.Reader.ReaderT
      StreetRun.Config.Config
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      a
    -> (e
        -> Control.Monad.Trans.Reader.ReaderT
             StreetRun.Config.Config
             (Control.Monad.Trans.State.Lazy.StateT
                StreetRun.State.Vars GHC.Types.IO)
             a)
    -> StreetRun.Config.Config
    -> Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO a
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U(A,A,A,C(U),A)><L,1*C1(C(C1(U)))><L,C(C1(C1(C1(U))))><L,U>,
     Unfolding: (\ @ e
                   @ a
                   ($dException :: GHC.Exception.Type.Exception e)
                   (ds :: Control.Monad.Trans.Reader.ReaderT
                            StreetRun.Config.Config
                            (Control.Monad.Trans.State.Lazy.StateT
                               StreetRun.State.Vars GHC.Types.IO)
                            a)
                   (c :: e
                         -> Control.Monad.Trans.Reader.ReaderT
                              StreetRun.Config.Config
                              (Control.Monad.Trans.State.Lazy.StateT
                                 StreetRun.State.Vars GHC.Types.IO)
                              a)
                   (r1 :: StreetRun.Config.Config) ->
                 let {
                   m1 :: Control.Monad.Trans.State.Lazy.StateT
                           StreetRun.State.Vars GHC.Types.IO a
                   = ds
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <StreetRun.Config.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  GHC.Prim.catch#
                    @ (a, StreetRun.State.Vars)
                    @ GHC.Exception.Type.SomeException
                    (m1
                       `cast`
                     (Control.Monad.Trans.State.Lazy.N:StateT[0]
                          <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                       s1)
                      `cast`
                    (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R)
                    (\ (e1 :: GHC.Exception.Type.SomeException)[OneShot] ->
                     case GHC.Exception.Type.fromException @ e $dException e1 of wild {
                       GHC.Maybe.Nothing
                       -> GHC.Prim.raiseIO#
                            @ GHC.Exception.Type.SomeException
                            @ (a, StreetRun.State.Vars)
                            e1
                       GHC.Maybe.Just e'
                       -> (((c e')
                              `cast`
                            (Control.Monad.Trans.Reader.N:ReaderT[0]
                                 <StreetRun.Config.Config>_R
                                 <Control.Monad.Trans.State.Lazy.StateT
                                    StreetRun.State.Vars GHC.Types.IO>_R
                                 <a>_N)
                              r1)
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                             s1)
                            `cast`
                          (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R) })
                    eta)
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(a,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <a>_N))) -}
ba46176ec69d12880f5348a25544d176
  $fMonadIOStreetRun ::
    Control.Monad.IO.Class.MonadIO StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fHUDStreetRun2
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N)) -}
ba46176ec69d12880f5348a25544d176
  $fMonadReaderStreetRun ::
    Control.Monad.Reader.Class.MonadReader
      StreetRun.Config.Config StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.Config.Config
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fMonadReaderStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(StreetRun.Config.Config,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <StreetRun.Config.Config>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                          <StreetRun.Config.Config>_R
                                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                             StreetRun.State.Vars
                                                                                                                             GHC.Types.IO>_R
                                                                                                                          <StreetRun.Config.Config>_N) ; Sym (StreetRun.N:StreetRun[0]) <StreetRun.Config.Config>_N))
                  (Control.Monad.Trans.Reader.withReaderT
                     @ StreetRun.Config.Config
                     @ StreetRun.Config.Config
                     @ (Control.Monad.Trans.State.Lazy.StateT
                          StreetRun.State.Vars GHC.Types.IO))
                    `cast`
                  (forall (a :: <*>_N).
                   <StreetRun.Config.Config -> StreetRun.Config.Config>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                  (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N).
                   <StreetRun.Config.Config -> a>_R
                   ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
3951e4e29756fcfc2abea6bad4123d51
  $fMonadReaderStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (StreetRun.Config.Config, StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (eta, eta1) #)) -}
ba46176ec69d12880f5348a25544d176
  $fMonadStateStreetRun ::
    Control.Monad.State.Class.MonadState
      StreetRun.State.Vars StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.State.Vars
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fMonadStateStreetRun3
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(StreetRun.State.Vars,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <StreetRun.State.Vars>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                       <StreetRun.Config.Config>_R
                                                                                                                       <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                          StreetRun.State.Vars
                                                                                                                          GHC.Types.IO>_R
                                                                                                                       <StreetRun.State.Vars>_N) ; Sym (StreetRun.N:StreetRun[0]) <StreetRun.State.Vars>_N))
                  StreetRun.$fMonadStateStreetRun2
                    `cast`
                  (<StreetRun.State.Vars>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fMonadStateStreetRun1
                    `cast`
                  (forall (a :: <*>_N).
                   <StreetRun.State.Vars -> (a, StreetRun.State.Vars)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N)) -}
415bdaf852c880cca9a607b6f7a95041
  $fMonadStateStreetRun1 ::
    (StreetRun.State.Vars -> (a, StreetRun.State.Vars))
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*C1(U)><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ a
                   (eta :: StreetRun.State.Vars -> (a, StreetRun.State.Vars))
                   (eta1 :: StreetRun.Config.Config)
                   (eta2 :: StreetRun.State.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3, eta eta2 #)) -}
63399390d17db660afc30f15f0ed558f
  $fMonadStateStreetRun2 ::
    StreetRun.State.Vars
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs, Strictness: <L,U><L,A><L,A><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (eta :: StreetRun.State.Vars)
                   (eta1 :: StreetRun.Config.Config)
                   (eta2 :: StreetRun.State.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta3, (GHC.Tuple.(), eta) #)) -}
954cbfffb6120506360f65ad47fd9a1b
  $fMonadStateStreetRun3 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (StreetRun.State.Vars, StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (x :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, (x, x) #)) -}
ba46176ec69d12880f5348a25544d176
  $fMonadStreetRun :: GHC.Base.Monad StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fApplicativeStreetRun
                  (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (StreetRun.N:StreetRun[0]) <a>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                   ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                  StreetRun.$fApplicativeStreetRun1
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                  (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$cfail
                     @ StreetRun.Config.Config)
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N) -}
eabff0a2d20d791d085b3317290bd575
  $fMonadStreetRun_$s$fMonadReaderT_$c>>= ::
    Control.Monad.Trans.Reader.ReaderT
      r
      (Control.Monad.Trans.State.Lazy.StateT
         StreetRun.State.Vars GHC.Types.IO)
      a
    -> (a
        -> Control.Monad.Trans.Reader.ReaderT
             r
             (Control.Monad.Trans.State.Lazy.StateT
                StreetRun.State.Vars GHC.Types.IO)
             b)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(C(C1(U(U,U(1*U,1*U)))))><L,C(C1(C1(C1(U))))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ r
                   @ a
                   @ b
                   (m1 :: Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT
                               StreetRun.State.Vars GHC.Types.IO)
                            a)
                   (k :: a
                         -> Control.Monad.Trans.Reader.ReaderT
                              r
                              (Control.Monad.Trans.State.Lazy.StateT
                                 StreetRun.State.Vars GHC.Types.IO)
                              b)
                   (r1 :: r) ->
                 let {
                   m2 :: Control.Monad.Trans.State.Lazy.StateT
                           StreetRun.State.Vars GHC.Types.IO a
                   = m1
                       `cast`
                     (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <r>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <a>_N)
                       r1
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case (m2
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <a>_N)
                          s1)
                         `cast`
                       (GHC.Types.N:IO[0] <(a, StreetRun.State.Vars)>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  (((k (case ipv1 of wild { (,) a1 s' -> a1 }))
                      `cast`
                    (Control.Monad.Trans.Reader.N:ReaderT[0]
                         <r>_R
                         <Control.Monad.Trans.State.Lazy.StateT
                            StreetRun.State.Vars GHC.Types.IO>_R
                         <b>_N)
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <StreetRun.State.Vars>_N <GHC.Types.IO>_R <b>_N)
                     (case ipv1 of wild { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <(b, StreetRun.State.Vars)>_R)
                    ipv })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(b,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <b>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Reader.ReaderT
                    r
                    (Control.Monad.Trans.State.Lazy.StateT
                       StreetRun.State.Vars GHC.Types.IO)
                    a>_R
                 ->_R <a
                       -> Control.Monad.Trans.Reader.ReaderT
                            r
                            (Control.Monad.Trans.State.Lazy.StateT
                               StreetRun.State.Vars GHC.Types.IO)
                            b>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <b>_N)) -}
00886ed141494eb325398d3a0af41d7c
  $fMonadStreetRun_$s$fMonadReaderT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
  {- Arity: 3, Strictness: <L,U><L,A><L,A>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (msg :: GHC.Base.String) ->
                 let {
                   m1 :: StreetRun.State.Vars
                         -> GHC.Types.IO (a, StreetRun.State.Vars)
                     {- Arity: 1 -}
                   = \ (ds :: StreetRun.State.Vars) ->
                     GHC.Magic.noinline
                       @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                       GHC.IO.failIO1
                         `cast`
                       (forall (a1 :: <*>_N).
                        <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                       @ (a, StreetRun.State.Vars)
                       msg
                 } in
                 (\ (ds :: r) -> m1)
                   `cast`
                 ((<r>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <StreetRun.State.Vars>_N
                                 <GHC.Types.IO>_R
                                 <a>_N)) ; Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                    <r>_R
                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                       StreetRun.State.Vars GHC.Types.IO>_R
                                                    <a>_N))) -}
ba46176ec69d12880f5348a25544d176
  $fMonadThrowStreetRun ::
    Control.Monad.Catch.MonadThrow StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fMonadThrowStreetRun1
                    `cast`
                  (forall (e :: <*>_N) (a :: <*>_N).
                   <GHC.Exception.Type.Exception e>_R
                   ->_R <e>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <(a,
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                         <StreetRun.Config.Config>_R
                                                                                                         <Control.Monad.Trans.State.Lazy.StateT
                                                                                                            StreetRun.State.Vars
                                                                                                            GHC.Types.IO>_R
                                                                                                         <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N)) -}
25be92a41c17a9bbd261278c91d1f460
  $fMonadThrowStreetRun1 ::
    GHC.Exception.Type.Exception e =>
    e
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (a, StreetRun.State.Vars) #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <B,1*U(A,A,1*C1(U),A,A)><B,U><B,A><B,A><B,U>b,
     Unfolding: InlineRule (5, True, False)
                (\ @ e
                   @ a
                   ($dException :: GHC.Exception.Type.Exception e)
                   (eta :: e)
                   (eta1 :: StreetRun.Config.Config)
                   (eta2 :: StreetRun.State.Vars)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.raiseIO#
                        @ GHC.Exception.Type.SomeException
                        @ a
                        (GHC.Exception.Type.toException @ e $dException eta)
                        eta3
                 ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                           (a, StreetRun.State.Vars) #)
                 of {}) -}
ba46176ec69d12880f5348a25544d176
  $fPauseStreetRun :: StreetRun.Pause.Pause StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fPauseStreetRun_$cpauseStep -}
ba46176ec69d12880f5348a25544d176
  $fPauseStreetRun_$cpauseStep :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Pause.pauseStep'
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasPlayVarsVars_$cplayVars
                     `cast`
                   (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fSceneManagerStreetRun
                   StreetRun.$fHasInputStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fCameraControlStreetRun
                   StreetRun.$fHUDStreetRun) -}
ba46176ec69d12880f5348a25544d176
  $fPlayStreetRun :: StreetRun.Play.Play StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fPlayStreetRun_$cplayStep -}
ba46176ec69d12880f5348a25544d176
  $fPlayStreetRun_$cplayStep :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Play.playStep'
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasPlayVarsVars_$cplayVars
                     `cast`
                   (Sym (StreetRun.Work_func.N:HasPlayVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fLoggerStreetRun
                   StreetRun.$fCameraControlStreetRun
                   StreetRun.$fClockStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fAudioStreetRun
                   StreetRun.$fAudioSfxStreetRun
                   StreetRun.$fHasInputStreetRun
                   StreetRun.$fSceneManagerStreetRun
                   StreetRun.$fHUDStreetRun) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun ::
    StreetRun.Renderer.Renderer StreetRun.StreetRun
  DFunId
  {- Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fRendererStreetRun27
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun26
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun25
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Runner.RunnerKey
                                            (Animate.SpriteClip StreetRun.Runner.RunnerKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Runner.RunnerKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Runner.RunnerKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Runner.RunnerKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Runner.RunnerKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Runner.RunnerKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Runner.RunnerKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun24
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Snag.LavaKey
                                            (Animate.SpriteClip StreetRun.Snag.LavaKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Snag.LavaKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Snag.LavaKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Snag.LavaKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Snag.LavaKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Snag.LavaKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Snag.LavaKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun23
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Snag.RockKey
                                            (Animate.SpriteClip StreetRun.Snag.RockKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Snag.RockKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Snag.RockKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Snag.RockKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Snag.RockKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Snag.RockKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Snag.RockKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun22
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Snag.BirdKey
                                            (Animate.SpriteClip StreetRun.Snag.BirdKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Snag.BirdKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Snag.BirdKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Snag.BirdKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Snag.BirdKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Snag.BirdKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Snag.BirdKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun21
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Scenario.BuildingKey
                                            (Animate.SpriteClip StreetRun.Scenario.BuildingKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Scenario.BuildingKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Scenario.BuildingKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Scenario.BuildingKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Scenario.BuildingKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Scenario.BuildingKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Scenario.BuildingKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun20
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <(Animate.Animations
                                            StreetRun.Scenario.GrassKey
                                            (Animate.SpriteClip StreetRun.Scenario.GrassKey)
                                            StreetRun.Types.Seconds,
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <Animate.Animations
                                                                                   StreetRun.Scenario.GrassKey
                                                                                   (Animate.SpriteClip
                                                                                      StreetRun.Scenario.GrassKey)
                                                                                   StreetRun.Types.Seconds>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                            <StreetRun.Config.Config>_R
                                                                                                                            <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               StreetRun.State.Vars
                                                                                                                               GHC.Types.IO>_R
                                                                                                                            <Animate.Animations
                                                                                                                               StreetRun.Scenario.GrassKey
                                                                                                                               (Animate.SpriteClip
                                                                                                                                  StreetRun.Scenario.GrassKey)
                                                                                                                               StreetRun.Types.Seconds>_N) ; Sym (StreetRun.N:StreetRun[0]) <Animate.Animations
                                                                                                                                                                                               StreetRun.Scenario.GrassKey
                                                                                                                                                                                               (Animate.SpriteClip
                                                                                                                                                                                                  StreetRun.Scenario.GrassKey)
                                                                                                                                                                                               StreetRun.Types.Seconds>_N))
                  StreetRun.$fRendererStreetRun19
                    `cast`
                  (<Animate.SpriteClip StreetRun.Runner.RunnerKey>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun18
                    `cast`
                  (<Animate.SpriteClip StreetRun.Snag.LavaKey>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun17
                    `cast`
                  (<Animate.SpriteClip StreetRun.Snag.RockKey>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun16
                    `cast`
                  (<Animate.SpriteClip StreetRun.Snag.BirdKey>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun_$cdrawBuilding
                  StreetRun.$fRendererStreetRun_$cdrawGrass
                  StreetRun.$fRendererStreetRun_$cdrawBackStreet
                  StreetRun.$fRendererStreetRun_$cdrawStreet
                  StreetRun.$fRendererStreetRun7
                    `cast`
                  (<StreetRun.Types.Percent>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHUDStreetRun6
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun6
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun5
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun4
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun3
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun2
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fHUDStreetRun4
                    `cast`
                  (<StreetRun.Font.Number>_R
                   ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fRendererStreetRun1
                    `cast`
                  (<(GHC.Types.Int, GHC.Types.Int)>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun1 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U)))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawControlsText ww1 ww2 w1 w2 w3 }) -}
e16cf9911c8a791916373360363c0b02
  $fRendererStreetRun10 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 8#) -}
555fe0275589a5d939571184606eb514
  $fRendererStreetRun11 ::
    StreetRun.Config.Config -> SDL.Video.Renderer.Texture
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LLSLLLLLLLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds6 } }) -}
ff9ad4d942c28e03be90feb46b94061a
  $fRendererStreetRun12 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 4#) -}
9db23f621e36ae85beed5d6a372ee3c0
  $fRendererStreetRun13 ::
    StreetRun.Config.Config
    -> Animate.SpriteSheet
         StreetRun.Scenario.GrassKey
         SDL.Video.Renderer.Texture
         StreetRun.Types.Seconds
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LSLLLLLLLLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,1*U(U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds5 } }) -}
08e90aa94332bbfe76dae67ebae239d5
  $fRendererStreetRun14 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 16#) -}
51e0a413d3ee2f654b5f762f3e5f2fdf
  $fRendererStreetRun15 ::
    StreetRun.Config.Config
    -> Animate.SpriteSheet
         StreetRun.Scenario.BuildingKey
         SDL.Video.Renderer.Texture
         StreetRun.Types.Seconds
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(SLLLLLLLLLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(1*U(U,U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds4 } }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun16 ::
    Animate.SpriteClip StreetRun.Snag.BirdKey
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Snag.BirdKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawBird w ww1 ww2 w2 w3 w4 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun17 ::
    Animate.SpriteClip StreetRun.Snag.RockKey
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Snag.RockKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawRock w ww1 ww2 w2 w3 w4 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun18 ::
    Animate.SpriteClip StreetRun.Snag.LavaKey
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Snag.LavaKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawLava w ww1 ww2 w2 w3 w4 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun19 ::
    Animate.SpriteClip StreetRun.Runner.RunnerKey
    -> (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (5, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Runner.RunnerKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int))
                   (w2 :: StreetRun.Config.Config)
                   (w3 :: StreetRun.State.Vars)
                   (w4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawRunner w ww1 ww2 w2 w3 w4 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun2 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawTitleText ww1 ww2 w1 w2 w3 }) -}
fcef38cedfd8bf91a89fbea213ea38b8
  $fRendererStreetRun20 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Scenario.GrassKey
             (Animate.SpriteClip StreetRun.Scenario.GrassKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds5 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
a3eddb196b2dca1291b20da04664eaed
  $fRendererStreetRun21 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Scenario.BuildingKey
             (Animate.SpriteClip StreetRun.Scenario.BuildingKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds4 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
587c2375566385f84761382c713a535c
  $fRendererStreetRun22 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Snag.BirdKey
             (Animate.SpriteClip StreetRun.Snag.BirdKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds9 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
003dcdb1883a8cb4d107ee960ece1244
  $fRendererStreetRun23 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Snag.RockKey
             (Animate.SpriteClip StreetRun.Snag.RockKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds11 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
de58de07e0eadd3fb388c5d0918122ae
  $fRendererStreetRun24 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Snag.LavaKey
             (Animate.SpriteClip StreetRun.Snag.LavaKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,A,A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds10 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
0135fc266b202d86d164c2d8fa3aef8b
  $fRendererStreetRun25 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          (Animate.Animations
             StreetRun.Runner.RunnerKey
             (Animate.SpriteClip StreetRun.Runner.RunnerKey)
             StreetRun.Types.Seconds,
           StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*U(A,A,1*U(A,A,A,A,1*U(1*U,A),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (x :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta1,
                    (case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     case ds8 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds32 } } },
                     eta) #)) -}
b03088bf4c00d9b1b290d627cb36cb7c
  $fRendererStreetRun26 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds2
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds { GHC.Ptr.Ptr ds4 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds4
                        eta1 of wild1 { Unit# ds5 ->
                 (# ds5, (GHC.Tuple.(), eta) #) } } }) -}
5665531e5cce7806e22e984c91c1b17d
  $fRendererStreetRun27 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { StreetRun.Config.Config ww1 ww2 ww3 ->
                 case ww2
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ww4 { GHC.Ptr.Ptr ww5 ->
                 StreetRun.$w$cclearScreen ww5 w1 w2 } }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun3 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawPressEscapeText ww1 ww2 w1 w2 w3 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun4 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawPressSpaceText ww1 ww2 w1 w2 w3 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun5 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawGameOverText ww1 ww2 w1 w2 w3 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun6 ::
    (GHC.Types.Int, GHC.Types.Int)
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4,
     Strictness: <S,1*U(1*U(U),1*U(U))><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int))
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawPauseText ww1 ww2 w1 w2 w3 }) -}
3a535f4e25bc8a0b6ce7c8072a9d5588
  $fRendererStreetRun7 ::
    StreetRun.Types.Percent
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, Strictness: <L,1*U(U)><L,U(A,U(U),A)><L,U><S,U>,
     Unfolding: (\ (w3 :: StreetRun.Types.Percent)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   eta3 :: SDL.Internal.Types.Renderer
                   = case eta of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 case SDL.Video.Renderer.$wrendererDrawBlendMode
                        eta3 of ww3 { (#,#) ww4 ww5 ->
                 case (ww5 SDL.Video.Renderer.BlendAlphaBlend)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        eta2 of ds1 { (#,#) ipv ipv1 ->
                 case SDL.Video.Renderer.$wrendererDrawColor
                        eta3 of ww1 { (#,#) ww2 ww6 ->
                 case (ww6
                         (case w3
                                 `cast`
                               (StreetRun.Types.N:Percent[0]) of wild1 { GHC.Types.F# y ->
                          Linear.V4.V4
                            @ GHC.Word.Word8
                            StreetRun.Renderer_func_2.drawBlackOverlay'2
                            StreetRun.Renderer_func_2.drawBlackOverlay'2
                            StreetRun.Renderer_func_2.drawBlackOverlay'2
                            (GHC.Word.W8#
                               (GHC.Prim.narrow8Word#
                                  (GHC.Prim.int2Word#
                                     (GHC.Prim.float2Int# (GHC.Prim.timesFloat# 255.0# y))))) }))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case eta of wild { StreetRun.Config.Config ds3 ds4 ds5 ->
                 case ds4
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds8 { GHC.Ptr.Ptr ds9 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        ds9
                        __NULL
                        ipv2 of wild1 { (#,#) ds10 ds11 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds11) 0# of lwild {
                   DEFAULT
                   -> case (ww5 SDL.Video.Renderer.BlendNone)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ds10 of ds6 { (#,#) ipv4 ipv5 ->
                      (# ipv4, (ipv5, eta1) #) }
                   1#
                   -> case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.State#
                                                          GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Addr# #)}
                             ds10 of wild2 { (#,#) ds6 ds7 ->
                      case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Word# #)}
                             ds7
                             ds6 of wild3 { (#,#) ds14 ds15 ->
                      case StreetRun.Renderer_func_2.drawBlackOverlay'1
                             ds15
                             ds14
                             ds7 of ds16 { (#,#) ipv4 ipv5 ->
                      case (ww5 SDL.Video.Renderer.BlendNone)
                             `cast`
                           (GHC.Types.N:IO[0] <()>_R)
                             ipv4 of ds17 { (#,#) ipv6 ipv7 ->
                      (# ipv6, (ipv7, eta1) #) } } } } } } } } } } } }) -}
7b2e4c612b8ddb8b60cf596ff16e46bf
  $fRendererStreetRun8 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 2#) -}
31f6cc333746e8361d8a9b60247a1fa3
  $fRendererStreetRun9 ::
    StreetRun.Config.Config -> SDL.Video.Renderer.Texture
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLS(LLLSLLLLLLLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: StreetRun.Config.Config) ->
                 case x of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 ds7 } }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun_$cdrawBackStreet ::
    (GHC.Types.Int, GHC.Types.Int) -> StreetRun.StreetRun ()
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawBackStreet ww1 ww2 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun_$cdrawBuilding ::
    StreetRun.Types.DrawSprite
      StreetRun.Scenario.BuildingKey StreetRun.StreetRun
  {- Arity: 2,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(U(U),U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Scenario.BuildingKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawBuilding w ww1 ww2 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun_$cdrawGrass ::
    StreetRun.Types.DrawSprite
      StreetRun.Scenario.GrassKey StreetRun.StreetRun
  {- Arity: 2,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><S,1*U(U(U),U(U))>,
     Inline: [2],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Animate.SpriteClip StreetRun.Scenario.GrassKey)
                   (w1 :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w1 of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawGrass w ww1 ww2 }) -}
ba46176ec69d12880f5348a25544d176
  $fRendererStreetRun_$cdrawStreet ::
    (GHC.Types.Int, GHC.Types.Int) -> StreetRun.StreetRun ()
  {- Arity: 1, Strictness: <S,1*U(U(U),U(U))>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Types.Int, GHC.Types.Int)) ->
                 case w of ww { (,) ww1 ww2 ->
                 StreetRun.$w$cdrawStreet ww1 ww2 }) -}
333d7131ae9a87d72e3a19a6fcbcb029
  $fRendererStreetRun_$sreader ::
    (r -> a)
    -> Control.Monad.Trans.Reader.ReaderT
         r
         (Control.Monad.Trans.State.Lazy.StateT
            StreetRun.State.Vars GHC.Types.IO)
         a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ r @ a (f :: r -> a) (x :: r) ->
                 let {
                   eta :: a = f x
                 } in
                 (\ (eta1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  (# s, (eta, eta1) #))
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <(a,
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <a>_N)))
                  `cast`
                (forall (r :: <*>_N) (a :: <*>_N).
                 <r -> a>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <r>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <a>_N)) -}
ba46176ec69d12880f5348a25544d176
  $fSDLInputStreetRun ::
    StreetRun.SDLInput.SDLInput StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fSDLInputStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <([SDL.Event.EventPayload],
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <[SDL.Event.EventPayload]>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                           <StreetRun.Config.Config>_R
                                                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                              StreetRun.State.Vars
                                                                                                                              GHC.Types.IO>_R
                                                                                                                           <[SDL.Event.EventPayload]>_N) ; Sym (StreetRun.N:StreetRun[0]) <[SDL.Event.EventPayload]>_N)) -}
0a3edb500c92d06bc722428249d7a540
  $fSDLInputStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ([SDL.Event.EventPayload], StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <L,A><L,U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (SDL.Event.$wpollEvents
                         @ GHC.Types.IO
                         GHC.Base.$fApplicativeIO
                         GHC.Base.$fMonadIO1
                           `cast`
                         (forall (a :: <*>_N) (b :: <*>_N).
                          <GHC.Types.IO a>_R
                          ->_R <a -> GHC.Types.IO b>_R
                          ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                         GHC.Base.$fApplicativeIO4
                           `cast`
                         (forall (a :: <*>_N). <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                         (\ @ a -> GHC.Base.id @ (GHC.Types.IO a)))
                        `cast`
                      (GHC.Types.N:IO[0] <[SDL.Event.Event]>_R)
                        eta2 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.Base.build
                       @ SDL.Event.EventPayload
                       (\ @ b1
                          (c :: SDL.Event.EventPayload -> b1 -> b1)[OneShot]
                          (n :: b1)[OneShot] ->
                        GHC.Base.foldr
                          @ SDL.Event.Event
                          @ b1
                          (GHC.Base.mapFB
                             @ SDL.Event.EventPayload
                             @ b1
                             @ SDL.Event.Event
                             c
                             SDL.Event.eventPayload)
                          n
                          ipv1),
                     eta1) #) }) -}
ba46176ec69d12880f5348a25544d176
  $fSDLRendererStreetRun ::
    StreetRun.SDLRenderer.SDLRenderer StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fSDLRendererStreetRun_$srenderPresent
                    `cast`
                  (Sym (SDL.Internal.Types.N:Renderer[0])
                   ->_R <StreetRun.StreetRun ()>_R)
                  StreetRun.$fSDLRendererStreetRun1
                    `cast`
                  (<SDL.Internal.Types.Renderer>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                  StreetRun.$fSDLRendererStreetRun_$cqueryTexture
                  StreetRun.$fSDLRendererStreetRun_$cdrawTexture -}
6df317e462438a1f5bee16be625a67e1
  $fSDLRendererStreetRun1 ::
    SDL.Internal.Types.Renderer
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, Strictness: <S(S),1*U(U)><L,A><L,U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (w1 :: SDL.Internal.Types.Renderer)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds9 { GHC.Ptr.Ptr ds10 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        ds10
                        eta2 of wild { (#,#) ds12 ds13 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds13) 0# of lwild {
                   DEFAULT -> (# ds12, (GHC.Tuple.(), eta1) #)
                   1#
                   -> case StreetRun.SDLRenderer.clearRenderer'1
                             ds12 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), eta1) #) } } } }) -}
ba46176ec69d12880f5348a25544d176
  $fSDLRendererStreetRun_$cdrawTexture ::
    SDL.Internal.Types.Renderer
    -> SDL.Video.Renderer.Texture
    -> GHC.Maybe.Maybe
         (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
    -> GHC.Maybe.Maybe
         (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
    -> StreetRun.StreetRun ()
  {- Arity: 4, Strictness: <L,U(U)><L,U(U)><L,U><L,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (w1 :: SDL.Internal.Types.Renderer)
                   (w2 :: SDL.Video.Renderer.Texture)
                   (w3 :: GHC.Maybe.Maybe
                            (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                   (w4 :: GHC.Maybe.Maybe
                            (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)) ->
                 SDL.Video.Renderer.$wcopy
                   @ StreetRun.StreetRun
                   StreetRun.$fHUDStreetRun2
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Types.IO a>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(a,
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                   w1
                   w2
                   w3
                   w4) -}
ba46176ec69d12880f5348a25544d176
  $fSDLRendererStreetRun_$cqueryTexture ::
    SDL.Video.Renderer.Texture
    -> StreetRun.StreetRun SDL.Video.Renderer.TextureInfo
  {- Arity: 1, Strictness: <L,U(U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: SDL.Video.Renderer.Texture) ->
                 SDL.Video.Renderer.$wqueryTexture
                   @ StreetRun.StreetRun
                   StreetRun.$fHUDStreetRun2
                     `cast`
                   (forall (a :: <*>_N).
                    <GHC.Types.IO a>_R
                    ->_R (<StreetRun.Config.Config>_R
                          ->_R (<StreetRun.State.Vars>_R
                                ->_R Sym (GHC.Types.N:IO[0]
                                              <(a,
                                                StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                      <StreetRun.State.Vars>_N
                                                                                      <GHC.Types.IO>_R
                                                                                      <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                   w1) -}
ba46176ec69d12880f5348a25544d176
  $fSDLRendererStreetRun_$srenderPresent ::
    SDL.Raw.Types.Renderer -> StreetRun.StreetRun ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(S),1*U(U)><L,A><L,U><S,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ (v1 :: SDL.Raw.Types.Renderer)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case v1 of ds { GHC.Ptr.Ptr ds1 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds1
                        eta2 of wild { Unit# ds3 ->
                 (# ds3, (GHC.Tuple.(), eta1) #) } })
                  `cast`
                (<SDL.Raw.Types.Renderer>_R
                 ->_R (<StreetRun.Config.Config>_R
                       ->_R (<StreetRun.State.Vars>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <((),
                                             StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                   <StreetRun.State.Vars>_N
                                                                                   <GHC.Types.IO>_R
                                                                                   <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                        <StreetRun.Config.Config>_R
                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                           StreetRun.State.Vars
                                                                                                           GHC.Types.IO>_R
                                                                                                        <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
ba46176ec69d12880f5348a25544d176
  $fSceneManagerStreetRun ::
    StreetRun.Scene.SceneManager StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fSceneManagerStreetRun1
                    `cast`
                  (<StreetRun.Scenario.Scene>_R
                   ->_R (<StreetRun.Config.Config>_R
                         ->_R (<StreetRun.State.Vars>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <((),
                                               StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                     <StreetRun.State.Vars>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                          <StreetRun.Config.Config>_R
                                                                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                                                                             StreetRun.State.Vars
                                                                                                             GHC.Types.IO>_R
                                                                                                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
8871957e93b1ad92c355cdd43fd2b25d
  $fSceneManagerStreetRun1 ::
    StreetRun.Scenario.Scene
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,U><L,A><L,1*U(U,U,A,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (scene :: StreetRun.Scenario.Scene)
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars ds ds1 scene ds3 ds4 ds5 ds6 ds7 }) #)) -}
ba46176ec69d12880f5348a25544d176
  $fTitleStreetRun :: StreetRun.Title.Title StreetRun.StreetRun
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ StreetRun.StreetRun
                  StreetRun.$fMonadStreetRun
                  StreetRun.$fTitleStreetRun1
                    `cast`
                  ((<StreetRun.Config.Config>_R
                    ->_R (<StreetRun.State.Vars>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <((),
                                          StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                <StreetRun.State.Vars>_N
                                                                                <GHC.Types.IO>_R
                                                                                <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                     <StreetRun.Config.Config>_R
                                                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO>_R
                                                                                                     <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
ba46176ec69d12880f5348a25544d176
  $fTitleStreetRun1 ::
    StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3,
     Strictness: <L,U><S(LLLLLLS(S(SL)LLLL)L),1*U(U,U,U,U,U,U,U(U(U,U),U,U,U,U),U)><S,U>,
     Unfolding: (\ (r1 :: StreetRun.Config.Config)
                   (eta :: StreetRun.State.Vars)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                 case ds7 of wild1 { StreetRun.Input.Input ds11 ds12 ds13 ds14 ds15 ->
                 case ds11 of wild2 { KeyState.KeyState ds16 ds17 ->
                 case ds16 of wild3 {
                   DEFAULT
                   -> case ((StreetRun.$fTitleStreetRun3
                               `cast`
                             (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                    <StreetRun.Config.Config>_R
                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                       StreetRun.State.Vars
                                                                       GHC.Types.IO>_R
                                                                    <()>_N)
                               r1)
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                              wild)
                             `cast`
                           (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                             eta1 of ds18 { (#,#) ipv ipv1 ->
                      ((StreetRun.$fTitleStreetRun2
                          `cast`
                        (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                               <StreetRun.Config.Config>_R
                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                  StreetRun.State.Vars
                                                                  GHC.Types.IO>_R
                                                               <()>_N)
                          r1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                         (case ipv1 of wild4 { (,) a1 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                        ipv }
                   KeyState.KeyStatus'Pressed
                   -> case ((StreetRun.$fTitleStreetRun3
                               `cast`
                             (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                    <StreetRun.Config.Config>_R
                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                       StreetRun.State.Vars
                                                                       GHC.Types.IO>_R
                                                                    <()>_N)
                               r1)
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                              (StreetRun.State.Vars
                                 ds1
                                 ds2
                                 StreetRun.Scenario.Scene'Play
                                 ds4
                                 ds5
                                 ds6
                                 wild1
                                 ds8))
                             `cast`
                           (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                             eta1 of ds18 { (#,#) ipv ipv1 ->
                      ((StreetRun.$fTitleStreetRun2
                          `cast`
                        (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                               <StreetRun.Config.Config>_R
                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                  StreetRun.State.Vars
                                                                  GHC.Types.IO>_R
                                                               <()>_N)
                          r1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                         (case ipv1 of wild4 { (,) a1 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                        ipv } } } } }) -}
ba46176ec69d12880f5348a25544d176
  $fTitleStreetRun2 :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Title.$wdrawTitle
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                     `cast`
                   (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                     `cast`
                   (Sym (StreetRun.Common.N:HasCommonVars[0]
                             <StreetRun.State.Vars>_N))
                   StreetRun.$fApplicativeStreetRun
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fRendererStreetRun
                   StreetRun.$fHUDStreetRun) -}
ba46176ec69d12880f5348a25544d176
  $fTitleStreetRun3 :: StreetRun.StreetRun ()
  {- Unfolding: (StreetRun.Title.$wupdateTitle
                   @ StreetRun.State.Vars
                   @ StreetRun.StreetRun
                   StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                     `cast`
                   (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                             <StreetRun.State.Vars>_N))
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   StreetRun.$fMonadStateStreetRun
                   StreetRun.$fRendererStreetRun) -}
33c1544aafa52d17b880415f2b52dbeb
  $saddSfxs' :: [StreetRun.Sfx.Sfx] -> StreetRun.StreetRun ()
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*U><L,A><L,1*U(1*U(U,U,1*U),U,U,U,U,U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w2 :: [StreetRun.Sfx.Sfx])
                   (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars
                       (case ds of wild1 { StreetRun.Common.CommonVars ds11 ds12 ds13 ->
                        StreetRun.Common.CommonVars
                          ds11
                          ds12
                          (GHC.Base.augment
                             @ StreetRun.Sfx.Sfx
                             (\ @ b
                                (c :: StreetRun.Sfx.Sfx -> b -> b)[OneShot]
                                (n :: b)[OneShot] ->
                              GHC.Base.foldr @ StreetRun.Sfx.Sfx @ b c n w2)
                             ds13) })
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       ds7 }) #))
                  `cast`
                (<[StreetRun.Sfx.Sfx]>_R
                 ->_R (<StreetRun.Config.Config>_R
                       ->_R (<StreetRun.State.Vars>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <((),
                                             StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                   <StreetRun.State.Vars>_N
                                                                                   <GHC.Types.IO>_R
                                                                                   <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                        <StreetRun.Config.Config>_R
                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                           StreetRun.State.Vars
                                                                                                           GHC.Types.IO>_R
                                                                                                        <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
3d617f165270bcfb41f55f36d0c5d4f5
  $sadjustCamera' ::
    StreetRun.Camera.Camera -> StreetRun.StreetRun ()
  {- Arity: 4,
     Strictness: <S,1*U(U(U(U),U(U)),U(U,U))><L,1*U(A,1*U(U),A)><L,1*U(U,U,U,U,U,U,U,A)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w3 :: StreetRun.Camera.Camera)
                   (r1 :: StreetRun.Config.Config) ->
                 let {
                   eta :: SDL.Internal.Types.Renderer
                   = case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case w3 of ww3 { StreetRun.Camera.Camera ww4 ww5 ->
                  case SDL.Video.Renderer.$wrendererScale
                         eta of ww1 { (#,#) ww2 ww6 ->
                  case (ww6
                          (case ww5 of wild { Linear.V2.V2 a1 b1 ->
                           Linear.V2.V2
                             @ Foreign.C.Types.CFloat
                             a1 `cast` (Sym (Foreign.C.Types.N:CFloat[0]))
                             b1 `cast` (Sym (Foreign.C.Types.N:CFloat[0])) }))
                         `cast`
                       (GHC.Types.N:IO[0] <()>_R)
                         s of ds1 { (#,#) ipv ipv1 ->
                  case SDL.Video.Renderer.$wrendererViewport
                         eta of ww9 { (#,#) ww10 ww11 ->
                  case (ww11
                          (GHC.Maybe.Just
                             @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                             (SDL.Video.Renderer.Rectangle
                                @ Foreign.C.Types.CInt
                                (case ww4 of wild { Linear.V2.V2 x y ->
                                 case x of wild1 { GHC.Types.F# y1 ->
                                 case y of wild2 { GHC.Types.F# y2 ->
                                 case GHC.Float.$w$cproperFraction1
                                        @ Foreign.C.Types.CInt
                                        Foreign.C.Types.$fIntegralCInt
                                        (GHC.Prim.minusFloat# 640.0# y1) of ww7 { (#,#) ww8 ww12 ->
                                 case ww8
                                        `cast`
                                      (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                                 case GHC.Float.$w$cproperFraction1
                                        @ Foreign.C.Types.CInt
                                        Foreign.C.Types.$fIntegralCInt
                                        (GHC.Prim.minusFloat#
                                           640.0#
                                           y2) of ww13 { (#,#) ww14 ww15 ->
                                 case ww14
                                        `cast`
                                      (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                                 (Linear.V2.V2
                                    @ Foreign.C.Types.CInt
                                    nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                    nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])))
                                   `cast`
                                 (Sym (Linear.Affine.N:Point[0]
                                           <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } } } } } } })
                                StreetRun.Picture.adjustCamera'_dim)))
                         `cast`
                       (GHC.Types.N:IO[0] <()>_R)
                         ipv of ds2 { (#,#) ipv2 ipv3 ->
                  case SDL.Video.Renderer.$wrendererClipRect
                         eta of ww12 { (#,#) ww13 ww14 ->
                  case (ww14 StreetRun.Picture.adjustCamera'1)
                         `cast`
                       (GHC.Types.N:IO[0] <()>_R)
                         ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                  (# ipv4,
                     (ipv5,
                      case s1 of wild { StreetRun.State.Vars ds ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                      StreetRun.State.Vars
                        ds
                        ds4
                        ds5
                        ds6
                        ds7
                        ds8
                        ds9
                        ww3 }) #) } } } } } } })
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <((),
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <()>_N)))
                  `cast`
                (<StreetRun.Camera.Camera>_R
                 ->_R Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                               <StreetRun.Config.Config>_R
                               <Control.Monad.Trans.State.Lazy.StateT
                                  StreetRun.State.Vars GHC.Types.IO>_R
                               <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N) -}
b7d9c10bd218e137ed662c60b84f72d9
  $sclearRenderer' ::
    SDL.Internal.Types.Renderer -> StreetRun.StreetRun ()
  {- Arity: 4, Strictness: <S(S),1*U(U)><L,A><L,U><S,U>, Inline: [2],
     Unfolding: InlineRule (1, True, False)
                (\ (w1 :: SDL.Internal.Types.Renderer)
                   (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds9 { GHC.Ptr.Ptr ds10 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        ds10
                        s of wild { (#,#) ds12 ds13 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds13) 0# of lwild {
                   DEFAULT -> (# ds12, (GHC.Tuple.(), s1) #)
                   1#
                   -> case StreetRun.SDLRenderer.clearRenderer'1
                             ds12 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), s1) #) } } } })
                  `cast`
                (<SDL.Internal.Types.Renderer>_R
                 ->_R (<StreetRun.Config.Config>_R
                       ->_R (<StreetRun.State.Vars>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <((),
                                             StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                   <StreetRun.State.Vars>_N
                                                                                   <GHC.Types.IO>_R
                                                                                   <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                        <StreetRun.Config.Config>_R
                                                                                                        <Control.Monad.Trans.State.Lazy.StateT
                                                                                                           StreetRun.State.Vars
                                                                                                           GHC.Types.IO>_R
                                                                                                        <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
2049574ec014623f312364e7fd41a47a
  $sclearScreen' :: StreetRun.StreetRun ()
  {- Arity: 3, Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config) ->
                 let {
                   eta :: SDL.Internal.Types.Renderer
                   = case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 (\ (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  StreetRun.$fSDLRendererStreetRun1 eta r1 s1 s)
                   `cast`
                 ((<StreetRun.State.Vars>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <((),
                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                         <StreetRun.State.Vars>_N
                                                                         <GHC.Types.IO>_R
                                                                         <()>_N)))
                  `cast`
                (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                          <StreetRun.Config.Config>_R
                          <Control.Monad.Trans.State.Lazy.StateT
                             StreetRun.State.Vars GHC.Types.IO>_R
                          <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N) -}
a9935dec284838244bad3ba25b7a858f
  $sclearSfx' :: StreetRun.StreetRun ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,1*U(1*U(U,U,A),U,U,U,U,U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (eta :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# eta2,
                    (GHC.Tuple.(),
                     case eta1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                     StreetRun.State.Vars
                       (case ds of wild1 { StreetRun.Common.CommonVars ds11 ds12 ds13 ->
                        StreetRun.Common.CommonVars
                          ds11
                          ds12
                          (GHC.Types.[] @ StreetRun.Sfx.Sfx) })
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       ds7 }) #))
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
9f1a9a6ee954861fb5458c894ac3aefa
  $sdrawHiscore' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U))><L,U(U(U(U),U,U),U,U,U,U,U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (let {
                   $dRenderer :: GHC.Base.Monad StreetRun.StreetRun
                   = GHC.Base.C:Monad
                       @ StreetRun.StreetRun
                       (StreetRun.HUD.drawHiscore'36 @ StreetRun.StreetRun)
                       (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       StreetRun.$fApplicativeStreetRun1
                         `cast`
                       (forall (a :: <*>_N).
                        <a>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(a,
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                              <StreetRun.Config.Config>_R
                                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                 StreetRun.State.Vars
                                                                                                                 GHC.Types.IO>_R
                                                                                                              <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                       (StreetRun.HUD.drawHiscore'34 @ StreetRun.StreetRun)
                 } in
                 let {
                   $dRenderer1 :: StreetRun.Renderer.Renderer StreetRun.StreetRun
                   = StreetRun.Renderer.C:Renderer
                       @ StreetRun.StreetRun
                       $dRenderer
                       (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'30 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'28 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'26 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'24 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'22 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'20 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'18 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'16 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'14 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'12 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'10 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'8 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'4 @ StreetRun.StreetRun)
                       StreetRun.$fHUDStreetRun6
                         `cast`
                       (<(GHC.Types.Int, GHC.Types.Int)>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <((),
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                               <StreetRun.Config.Config>_R
                                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                  StreetRun.State.Vars
                                                                                                                  GHC.Types.IO>_R
                                                                                                               <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       StreetRun.$fHUDStreetRun4
                         `cast`
                       (<StreetRun.Font.Number>_R
                        ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <((),
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                               <StreetRun.Config.Config>_R
                                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                  StreetRun.State.Vars
                                                                                                                  GHC.Types.IO>_R
                                                                                                               <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                 } in
                 (\ (r1 :: StreetRun.Config.Config)
                    (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case StreetRun.$w$cdrawHiscoreText
                         StreetRun.HUD.drawHiscore'40
                         StreetRun.HUD.drawHiscore'39
                         r1
                         s1
                         s of ds1 { (#,#) ipv ipv1 ->
                  case s1 of wild { StreetRun.State.Vars ds ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                  case ds of wild1 { StreetRun.Common.CommonVars ds9 ds10 ds11 ->
                  case ds9
                         `cast`
                       (StreetRun.Types.N:Score[0]) of wild2 { GHC.Types.I# i ->
                  (((StreetRun.HUD.$wdrawNumbers
                       @ StreetRun.StreetRun
                       $dRenderer1
                       (GHC.Integer.Type.smallInteger i)
                       StreetRun.HUD.drawHiscore'2
                       StreetRun.HUD.drawHiscore'1)
                      `cast`
                    (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <StreetRun.Config.Config>_R
                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                              StreetRun.State.Vars GHC.Types.IO>_R
                                                           <()>_N)
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                     (case ipv1 of wild3 { (,) a1 s' -> s' }))
                    `cast`
                  (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                    ipv } } } })
                   `cast`
                 ((<StreetRun.Config.Config>_R
                   ->_R (<StreetRun.State.Vars>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <((),
                                         StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                               <StreetRun.State.Vars>_N
                                                                               <GHC.Types.IO>_R
                                                                               <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                    <StreetRun.Config.Config>_R
                                                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO>_R
                                                                                                    <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))) -}
ff6b4a8539ca8d99969be7698f2422c5
  $sdrawScore' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,U><S(LLLLS(S(S)LLLLLLLLLLLLLLL)LLL),1*U(U,U,U,U,U(U(U),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U),U,U,U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (let {
                   $dRenderer :: GHC.Base.Monad StreetRun.StreetRun
                   = GHC.Base.C:Monad
                       @ StreetRun.StreetRun
                       (StreetRun.HUD.drawHiscore'36 @ StreetRun.StreetRun)
                       (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       StreetRun.$fApplicativeStreetRun1
                         `cast`
                       (forall (a :: <*>_N).
                        <a>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <(a,
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                              <StreetRun.Config.Config>_R
                                                                                                              <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                 StreetRun.State.Vars
                                                                                                                 GHC.Types.IO>_R
                                                                                                              <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                       (StreetRun.HUD.drawHiscore'34 @ StreetRun.StreetRun)
                 } in
                 let {
                   $dRenderer1 :: StreetRun.Renderer.Renderer StreetRun.StreetRun
                   = StreetRun.Renderer.C:Renderer
                       @ StreetRun.StreetRun
                       $dRenderer
                       (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'32 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'30 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'28 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'26 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'24 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'22 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'20 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'18 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'16 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'14 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'12 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'10 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'8 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'4 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                       StreetRun.$fHUDStreetRun4
                         `cast`
                       (<StreetRun.Font.Number>_R
                        ->_R <(GHC.Types.Int, GHC.Types.Int)>_R
                        ->_R (<StreetRun.Config.Config>_R
                              ->_R (<StreetRun.State.Vars>_R
                                    ->_R Sym (GHC.Types.N:IO[0]
                                                  <((),
                                                    StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                          <StreetRun.State.Vars>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                               <StreetRun.Config.Config>_R
                                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                  StreetRun.State.Vars
                                                                                                                  GHC.Types.IO>_R
                                                                                                               <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))
                       (StreetRun.HUD.drawHiscore'6 @ StreetRun.StreetRun)
                 } in
                 (\ (r1 :: StreetRun.Config.Config)
                    (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case s1 of wild { StreetRun.State.Vars ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                  case ds4 of wild1 { StreetRun.Work.PlayVars ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds8 ds9 ds10 ds18 ds19 ds20 ds21 ds22 ds23 ->
                  case ds11
                         `cast`
                       (StreetRun.Types.N:Score[0]) of wild2 { GHC.Types.I# i ->
                  (((StreetRun.HUD.$wdrawNumbers
                       @ StreetRun.StreetRun
                       $dRenderer1
                       (GHC.Integer.Type.smallInteger i)
                       StreetRun.HUD.drawHiscore'2
                       StreetRun.HUD.drawScore'1)
                      `cast`
                    (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                           <StreetRun.Config.Config>_R
                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                              StreetRun.State.Vars GHC.Types.IO>_R
                                                           <()>_N)
                      r1)
                     `cast`
                   (Control.Monad.Trans.State.Lazy.N:StateT[0]
                        <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                     wild)
                    `cast`
                  (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                    s } } })
                   `cast`
                 ((<StreetRun.Config.Config>_R
                   ->_R (<StreetRun.State.Vars>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <((),
                                         StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                               <StreetRun.State.Vars>_N
                                                                               <GHC.Types.IO>_R
                                                                               <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                    <StreetRun.Config.Config>_R
                                                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO>_R
                                                                                                    <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))) -}
7b4672dcdd24050ae082d27f0b41c2d5
  $sdrawScreen' :: StreetRun.StreetRun ()
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LS(S)L),1*U(A,1*U(U),A)><L,U><S,U>, Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds2
                        `cast`
                      (SDL.Internal.Types.N:Renderer[0]) of ds { GHC.Ptr.Ptr ds4 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                        ds4
                        s of wild1 { Unit# ds5 ->
                 (# ds5, (GHC.Tuple.(), s1) #) } } })
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
be7313e1ba74752283b8c81686182d63
  $sgetInput' :: StreetRun.StreetRun StreetRun.Input.Input
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,A><L,U(U,U,U,U,U,U,U,U)><S,U>, Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s,
                    (case s1 of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     ds7 },
                     s1) #))
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(StreetRun.Input.Input,
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <StreetRun.Input.Input>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                      <StreetRun.Config.Config>_R
                                                                                                                      <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                         StreetRun.State.Vars
                                                                                                                         GHC.Types.IO>_R
                                                                                                                      <StreetRun.Input.Input>_N) ; Sym (StreetRun.N:StreetRun[0]) <StreetRun.Input.Input>_N)) -}
6bd8dd7579c90521d28b4f0200408750
  $shaltMusic :: StreetRun.StreetRun ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,A><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (x1 :: StreetRun.Config.Config)
                   (eta1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.State#
                                                         GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        s of wild { (#,#) ds1 ds2 ->
                 (# ds1, (GHC.Tuple.(), eta1) #) })
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
c33cbb5c32940affc1847f2d9b106331
  $splayGameMusic' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <S(LLS(LLLLLLLLS(S)LLLLLLLLLLLLLLLLLLL)),1*U(A,A,1*U(A,A,A,A,A,A,A,A,1*U(U),A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A,A))><L,U><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case r1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                 case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                 case ds12
                        `cast`
                      (SDL.Mixer.N:Music[0]) of ds37 { GHC.Ptr.Ptr ds38 ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        ds38
                        -1#
                        s of wild2 { (#,#) ds39 ds40 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds40) 0# of lwild {
                   DEFAULT -> (# ds39, (GHC.Tuple.(), s1) #)
                   1#
                   -> case SDL.Mixer.playMusic1 ds39 of ds41 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), s1) #) } } } } } })
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
69cc3706cee17cf89af8185efb7e9da1
  $stitleStep' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,U><S(LLLLLLS(S(SL)LLLL)L),1*U(U,U,U,U,U,U,U(U(U,U),U,U,U,U),U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (let {
                   u :: StreetRun.StreetRun ()
                   = StreetRun.Title.$wupdateTitle
                       @ StreetRun.State.Vars
                       @ StreetRun.StreetRun
                       StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                         `cast`
                       (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                                 <StreetRun.State.Vars>_N))
                       (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       StreetRun.$fMonadStateStreetRun
                       StreetRun.$fRendererStreetRun
                 } in
                 let {
                   v :: StreetRun.StreetRun ()
                   = StreetRun.Title.$wdrawTitle
                       @ StreetRun.State.Vars
                       @ StreetRun.StreetRun
                       StreetRun.State.$fHasTitleVarsVars_$ctitleVars
                         `cast`
                       (Sym (StreetRun.Tag_func.N:HasTitleVars[0]
                                 <StreetRun.State.Vars>_N))
                       StreetRun.State.$fHasCommonVarsVars_$ccommonVars
                         `cast`
                       (Sym (StreetRun.Common.N:HasCommonVars[0]
                                 <StreetRun.State.Vars>_N))
                       StreetRun.$fApplicativeStreetRun
                       (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                          @ StreetRun.Config.Config)
                         `cast`
                       (forall (a :: <*>_N) (b :: <*>_N).
                        Sym (StreetRun.N:StreetRun[0]) <a>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                        ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                       StreetRun.$fMonadStateStreetRun
                       StreetRun.$fRendererStreetRun
                       StreetRun.$fHUDStreetRun
                 } in
                 (\ (r1 :: StreetRun.Config.Config)
                    (s1 :: StreetRun.State.Vars)
                    (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                  case s1 of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                  case ds7 of wild1 { StreetRun.Input.Input ds11 ds12 ds13 ds14 ds15 ->
                  case ds11 of wild2 { KeyState.KeyState ds16 ds17 ->
                  case ds16 of wild3 {
                    DEFAULT
                    -> case ((u `cast`
                              (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                     <StreetRun.Config.Config>_R
                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                        StreetRun.State.Vars
                                                                        GHC.Types.IO>_R
                                                                     <()>_N)
                                r1)
                               `cast`
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                               wild)
                              `cast`
                            (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                              s of ds18 { (#,#) ipv ipv1 ->
                       ((v `cast`
                         (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                <StreetRun.Config.Config>_R
                                                                <Control.Monad.Trans.State.Lazy.StateT
                                                                   StreetRun.State.Vars
                                                                   GHC.Types.IO>_R
                                                                <()>_N)
                           r1)
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                          (case ipv1 of wild4 { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                         ipv }
                    KeyState.KeyStatus'Pressed
                    -> case ((u `cast`
                              (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                     <StreetRun.Config.Config>_R
                                                                     <Control.Monad.Trans.State.Lazy.StateT
                                                                        StreetRun.State.Vars
                                                                        GHC.Types.IO>_R
                                                                     <()>_N)
                                r1)
                               `cast`
                             (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                  <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                               (StreetRun.State.Vars
                                  ds1
                                  ds2
                                  StreetRun.Scenario.Scene'Play
                                  ds4
                                  ds5
                                  ds6
                                  wild1
                                  ds8))
                              `cast`
                            (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                              s of ds18 { (#,#) ipv ipv1 ->
                       ((v `cast`
                         (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                <StreetRun.Config.Config>_R
                                                                <Control.Monad.Trans.State.Lazy.StateT
                                                                   StreetRun.State.Vars
                                                                   GHC.Types.IO>_R
                                                                <()>_N)
                           r1)
                          `cast`
                        (Control.Monad.Trans.State.Lazy.N:StateT[0]
                             <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                          (case ipv1 of wild4 { (,) a1 s' -> s' }))
                         `cast`
                       (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                         ipv } } } } })
                   `cast`
                 ((<StreetRun.Config.Config>_R
                   ->_R (<StreetRun.State.Vars>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <((),
                                         StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                               <StreetRun.State.Vars>_N
                                                                               <GHC.Types.IO>_R
                                                                               <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                    <StreetRun.Config.Config>_R
                                                                                                    <Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO>_R
                                                                                                    <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N))) -}
3171ea61bb26a51d3b5964e3b84a034f
  $supdateInput' :: StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,A><L,1*U(U,U,U,U,U,U,1*U(U(U,U),U(U,U),U(U,U),U(U,U),A),U)><S,U>,
     Inline: [2],
     Unfolding: InlineRule (0, True, False)
                (\ (r1 :: StreetRun.Config.Config)
                   (s1 :: StreetRun.State.Vars)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (SDL.Event.$wpollEvents
                         @ GHC.Types.IO
                         GHC.Base.$fApplicativeIO
                         GHC.Base.$fMonadIO1
                           `cast`
                         (forall (a :: <*>_N) (b :: <*>_N).
                          <GHC.Types.IO a>_R
                          ->_R <a -> GHC.Types.IO b>_R
                          ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                         GHC.Base.$fApplicativeIO4
                           `cast`
                         (forall (a :: <*>_N). <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                         (\ @ a -> GHC.Base.id @ (GHC.Types.IO a)))
                        `cast`
                      (GHC.Types.N:IO[0] <[SDL.Event.Event]>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.Tuple.(),
                     case s1 of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     StreetRun.State.Vars
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       (case ds7 of ww { StreetRun.Input.Input ww1 ww2 ww3 ww4 ww5 ->
                        case StreetRun.Load.$wstepControl
                               (GHC.Base.build
                                  @ SDL.Event.EventPayload
                                  (\ @ b1
                                     (c :: SDL.Event.EventPayload -> b1 -> b1)[OneShot]
                                     (n :: b1)[OneShot] ->
                                   GHC.Base.foldr
                                     @ SDL.Event.Event
                                     @ b1
                                     (GHC.Base.mapFB
                                        @ SDL.Event.EventPayload
                                        @ b1
                                        @ SDL.Event.Event
                                        c
                                        SDL.Event.eventPayload)
                                     n
                                     ipv1))
                               ww1
                               ww2
                               ww3
                               ww4 of ww6 { (#,,,,#) ww7 ww8 ww9 ww10 ww11 ->
                        StreetRun.Input.Input ww7 ww8 ww9 ww10 ww11 } })
                       ds8 }) #) })
                  `cast`
                ((<StreetRun.Config.Config>_R
                  ->_R (<StreetRun.State.Vars>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <((),
                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                              <StreetRun.State.Vars>_N
                                                                              <GHC.Types.IO>_R
                                                                              <()>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                   <StreetRun.Config.Config>_R
                                                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                                                      StreetRun.State.Vars
                                                                                                      GHC.Types.IO>_R
                                                                                                   <()>_N) ; Sym (StreetRun.N:StreetRun[0]) <()>_N)) -}
039eae749951e7ebd01f864d90cc465a
  $tc'StreetRun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1194208129185986121##
                   12667875252777129599##
                   StreetRun.$trModule
                   StreetRun.$tc'StreetRun2
                   1#
                   StreetRun.$tc'StreetRun1) -}
f380b850166bb070bcfc21c2a1af0d37
  $tc'StreetRun1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
e82e6690bdf3ce13cdce1d0d3e49ed4d
  $tc'StreetRun2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.$tc'StreetRun3) -}
25c7a6836ae372386f458391b76756dd
  $tc'StreetRun3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'StreetRun"#) -}
04ca0df8fca8e1c574e00032780d4a8b
  $tcStreetRun :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15664343512644915802##
                   17036012446566446107##
                   StreetRun.$trModule
                   StreetRun.$trModule1
                   0#
                   GHC.Types.krep$*Arr*) -}
64c40ab5e68e3f84ed1b4f6f4407abb1
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   StreetRun.$trModule3
                   StreetRun.$trModule1) -}
4d7a7a269e31372570795c748f3c511a
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.$trModule2) -}
836d6f770f109b477af9f23b727e8712
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("StreetRun"#) -}
a74b64125e9050e94356bc4c7fbd9694
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS StreetRun.$trModule4) -}
6a424f7a4e459c980ee6c04391fd3618
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("street-runner-0.0.0-GEoHgSQZcIaHrT8BK7yHRE"#) -}
fc5fa47852ec25c2d66aa3d38e774b9b
  $w$cclearScreen ::
    GHC.Prim.Addr#
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (w :: StreetRun.State.Vars)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        ww
                        w1 of wild { (#,#) ds12 ds13 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds13) 0# of lwild {
                   DEFAULT -> (# ds12, (GHC.Tuple.(), w) #)
                   1#
                   -> case StreetRun.SDLRenderer.clearRenderer'1
                             ds12 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), w) #) } } }) -}
ec3f2e768ae154e7c3f4506258c90d67
  $w$cdelayMilliseconds ::
    GHC.Types.Int
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <L,1*U(U)><L,U><L,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Types.Int)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall base-4.12.0.0 GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Int# #)}
                        GHC.Prim.realWorld# of wild { (#,#) ds ds1 ->
                 case ds1 of wild1 {
                   DEFAULT
                   -> case GHC.Event.Thread.threadDelay1
                             (case w of wild2 { GHC.Types.I# y ->
                              GHC.Types.I# (GHC.Prim.*# 1000# y) })
                             w2 of ds2 { (#,#) ipv ipv1 ->
                      (# ipv, (ipv1, w1) #) }
                   0#
                   -> case w of wild2 { GHC.Types.I# y ->
                      case GHC.Prim.delay#
                             @ GHC.Prim.RealWorld
                             (GHC.Prim.*# 1000# y)
                             w2 of s' { DEFAULT ->
                      (# s', (GHC.Tuple.(), w1) #) } } } }) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawBackStreet ::
    GHC.Types.Int -> GHC.Types.Int -> StreetRun.StreetRun ()
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int) (ww1 :: GHC.Types.Int) ->
                 StreetRun.Renderer_func_2.$wdrawHorizontalScrollImage
                   @ StreetRun.StreetRun
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N).
                    <StreetRun.Config.Config -> a>_R
                    ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   StreetRun.$fSDLRendererStreetRun
                   StreetRun.$fRendererStreetRun11
                   StreetRun.$fRendererStreetRun10
                   ww
                   ww1) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawBird ::
    Animate.SpriteClip StreetRun.Snag.BirdKey
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Snag.BirdKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                          Linear.V2.V2 Foreign.C.Types.CInt)
                   = case w of wild { Animate.SpriteClip ds1 ds2 ds3 ds4 ds5 ->
                     let {
                       dim :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case ds3 of wild1 { GHC.Types.I# x# ->
                         case ds4 of wild2 { GHC.Types.I# x#1 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0])) } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case ds1 of wild1 { GHC.Types.I# x# ->
                         case ds2 of wild2 { GHC.Types.I# x#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Sym (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                        dim,
                      dim) }
                 } in
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 })
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                       case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                       case ds9 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds33 } } })
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case ds of ds1 { (,) clip' dim -> clip' }))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild { GHC.Types.I# x# ->
                             case ww1 of wild1 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds of ds1 { (,) clip' dim -> dim }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   w3) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawBuilding ::
    Animate.SpriteClip StreetRun.Scenario.BuildingKey
    -> GHC.Types.Int -> GHC.Types.Int -> StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,U(U)><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip
                           StreetRun.Scenario.BuildingKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int) ->
                 StreetRun.Renderer_func_2.$wdrawHorizontalScrollSprite
                   @ StreetRun.StreetRun
                   @ StreetRun.Scenario.BuildingKey
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N).
                    <StreetRun.Config.Config -> a>_R
                    ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   StreetRun.$fSDLRendererStreetRun
                   StreetRun.$fRendererStreetRun15
                   StreetRun.$fRendererStreetRun14
                   w
                   ww
                   ww1) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawControlsText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U)))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds31 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawGameOverText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds27 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawGrass ::
    Animate.SpriteClip StreetRun.Scenario.GrassKey
    -> GHC.Types.Int -> GHC.Types.Int -> StreetRun.StreetRun ()
  {- Arity: 3,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,U(U)><L,U(U)>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Scenario.GrassKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int) ->
                 StreetRun.Renderer_func_2.$wdrawHorizontalScrollSprite
                   @ StreetRun.StreetRun
                   @ StreetRun.Scenario.GrassKey
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N).
                    <StreetRun.Config.Config -> a>_R
                    ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   StreetRun.$fSDLRendererStreetRun
                   StreetRun.$fRendererStreetRun13
                   StreetRun.$fRendererStreetRun12
                   w
                   ww
                   ww1) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawHiscoreText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds28 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawLava ::
    Animate.SpriteClip StreetRun.Snag.LavaKey
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Snag.LavaKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                          Linear.V2.V2 Foreign.C.Types.CInt)
                   = case w of wild { Animate.SpriteClip ds1 ds2 ds3 ds4 ds5 ->
                     let {
                       dim :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case ds3 of wild1 { GHC.Types.I# x# ->
                         case ds4 of wild2 { GHC.Types.I# x#1 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0])) } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case ds1 of wild1 { GHC.Types.I# x# ->
                         case ds2 of wild2 { GHC.Types.I# x#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Sym (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                        dim,
                      dim) }
                 } in
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 })
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                       case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                       case ds10 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds33 } } })
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case ds of ds1 { (,) clip' dim -> clip' }))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild { GHC.Types.I# x# ->
                             case ww1 of wild1 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds of ds1 { (,) clip' dim -> dim }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   w3) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawNumber ::
    StreetRun.Font.Number
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,U><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.Font.Number)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   eta :: SDL.Video.Renderer.Texture
                   = case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds30 w } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           eta)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w2)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      eta
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawPauseText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds24 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawPressEscapeText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds26 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawPressSpaceText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds25 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawRock ::
    Animate.SpriteClip StreetRun.Snag.RockKey
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Snag.RockKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                          Linear.V2.V2 Foreign.C.Types.CInt)
                   = case w of wild { Animate.SpriteClip ds1 ds2 ds3 ds4 ds5 ->
                     let {
                       dim :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case ds3 of wild1 { GHC.Types.I# x# ->
                         case ds4 of wild2 { GHC.Types.I# x#1 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0])) } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case ds1 of wild1 { GHC.Types.I# x# ->
                         case ds2 of wild2 { GHC.Types.I# x#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Sym (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                        dim,
                      dim) }
                 } in
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 })
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                       case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                       case ds11 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds33 } } })
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case ds of ds1 { (,) clip' dim -> clip' }))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild { GHC.Types.I# x# ->
                             case ww1 of wild1 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds of ds1 { (,) clip' dim -> dim }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   w3) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawRunner ::
    Animate.SpriteClip StreetRun.Runner.RunnerKey
    -> GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 6,
     Strictness: <L,1*U(1*U(U),1*U(U),1*U(U),1*U(U),A)><L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U(U,U(U)),U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: Animate.SpriteClip StreetRun.Runner.RunnerKey)
                   (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w1 :: StreetRun.Config.Config)
                   (w2 :: StreetRun.State.Vars)
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   ds :: (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt,
                          Linear.V2.V2 Foreign.C.Types.CInt)
                   = case w of wild { Animate.SpriteClip ds1 ds2 ds3 ds4 ds5 ->
                     let {
                       dim :: Linear.V2.V2 Foreign.C.Types.CInt
                       = case ds3 of wild1 { GHC.Types.I# x# ->
                         case ds4 of wild2 { GHC.Types.I# x#1 ->
                         Linear.V2.V2
                           @ Foreign.C.Types.CInt
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0]))
                           (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                             `cast`
                           (Sym (Foreign.C.Types.N:CInt[0])) } }
                     } in
                     (SDL.Video.Renderer.Rectangle
                        @ Foreign.C.Types.CInt
                        (case ds1 of wild1 { GHC.Types.I# x# ->
                         case ds2 of wild2 { GHC.Types.I# x#1 ->
                         (Linear.V2.V2
                            @ Foreign.C.Types.CInt
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0]))
                            (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                              `cast`
                            (Sym (Foreign.C.Types.N:CInt[0])))
                           `cast`
                         (Sym (Linear.Affine.N:Point[0]
                                   <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                        dim,
                      dim) }
                 } in
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 })
                      (case w1 of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                       case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                       case ds8 of wild2 { Animate.SpriteSheet ds32 ds33 -> ds33 } } })
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (case ds of ds1 { (,) clip' dim -> clip' }))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild { GHC.Types.I# x# ->
                             case ww1 of wild1 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds of ds1 { (,) clip' dim -> dim }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w1)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    w2)
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   w3) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawStreet ::
    GHC.Types.Int -> GHC.Types.Int -> StreetRun.StreetRun ()
  {- Arity: 2, Strictness: <L,U(U)><L,U(U)>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int) (ww1 :: GHC.Types.Int) ->
                 StreetRun.Renderer_func_2.$wdrawHorizontalScrollImage
                   @ StreetRun.StreetRun
                   (StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>=
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R (<a>_R ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*>
                      @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N) (b :: <*>_N).
                    Sym (StreetRun.N:StreetRun[0]) <a>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N
                    ->_R Sym (StreetRun.N:StreetRun[0]) <b>_N)
                   (StreetRun.$fRendererStreetRun_$sreader @ StreetRun.Config.Config)
                     `cast`
                   (forall (a :: <*>_N).
                    <StreetRun.Config.Config -> a>_R
                    ->_R Sym (StreetRun.N:StreetRun[0]) <a>_N)
                   StreetRun.$fSDLRendererStreetRun
                   StreetRun.$fRendererStreetRun9
                   StreetRun.$fRendererStreetRun8
                   ww
                   ww1) -}
ba46176ec69d12880f5348a25544d176
  $w$cdrawTitleText ::
    GHC.Types.Int
    -> GHC.Types.Int
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,1*U(U)><L,1*U(U)><L,U(U,U(U),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U,U(U),U,U))><L,U><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: GHC.Types.Int)
                   (ww1 :: GHC.Types.Int)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   tex :: SDL.Video.Renderer.Texture
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 ->
                     case ds3 of wild1 { StreetRun.Resource.Resources ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 ds12 ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 ds23 ds24 ds25 ds26 ds27 ds28 ds29 ds30 ds31 ->
                     ds29 } }
                 } in
                 case (((SDL.Video.Renderer.$wqueryTexture
                           @ StreetRun.StreetRun
                           StreetRun.$fHUDStreetRun2
                             `cast`
                           (forall (a :: <*>_N).
                            <GHC.Types.IO a>_R
                            ->_R (<StreetRun.Config.Config>_R
                                  ->_R (<StreetRun.State.Vars>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <(a,
                                                        StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                              <StreetRun.State.Vars>_N
                                                                                              <GHC.Types.IO>_R
                                                                                              <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                                  <StreetRun.Config.Config>_R
                                                                                                                  <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                     StreetRun.State.Vars
                                                                                                                     GHC.Types.IO>_R
                                                                                                                  <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                           tex)
                          `cast`
                        (StreetRun.N:StreetRun[0] <SDL.Video.Renderer.TextureInfo>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                           <StreetRun.Config.Config>_R
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              StreetRun.State.Vars
                                                                                              GHC.Types.IO>_R
                                                                                           <SDL.Video.Renderer.TextureInfo>_N)
                          w)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <StreetRun.State.Vars>_N
                            <GHC.Types.IO>_R
                            <SDL.Video.Renderer.TextureInfo>_N)
                         w1)
                        `cast`
                      (GHC.Types.N:IO[0]
                           <(SDL.Video.Renderer.TextureInfo, StreetRun.State.Vars)>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild { (,) a1 s' ->
                 case a1 of wild1 { SDL.Video.Renderer.TextureInfo ds2 ds3 ds4 ds5 ->
                 (((SDL.Video.Renderer.$wcopy
                      @ StreetRun.StreetRun
                      StreetRun.$fHUDStreetRun2
                        `cast`
                      (forall (a :: <*>_N).
                       <GHC.Types.IO a>_R
                       ->_R (<StreetRun.Config.Config>_R
                             ->_R (<StreetRun.State.Vars>_R
                                   ->_R Sym (GHC.Types.N:IO[0]
                                                 <(a,
                                                   StreetRun.State.Vars)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                                         <StreetRun.State.Vars>_N
                                                                                         <GHC.Types.IO>_R
                                                                                         <a>_N)) ; (Sym (Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                                                             <StreetRun.Config.Config>_R
                                                                                                             <Control.Monad.Trans.State.Lazy.StateT
                                                                                                                StreetRun.State.Vars
                                                                                                                GHC.Types.IO>_R
                                                                                                             <a>_N) ; Sym (StreetRun.N:StreetRun[0]) <a>_N))
                      (case w of wild2 { StreetRun.Config.Config ds6 ds7 ds8 -> ds7 })
                      tex
                      (GHC.Maybe.Nothing
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt))
                      (GHC.Maybe.Just
                         @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                         (SDL.Video.Renderer.Rectangle
                            @ Foreign.C.Types.CInt
                            (case ww of wild2 { GHC.Types.I# x# ->
                             case ww1 of wild3 { GHC.Types.I# x#1 ->
                             (Linear.V2.V2
                                @ Foreign.C.Types.CInt
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0]))
                                (GHC.Int.I32# (GHC.Prim.narrow32Int# x#1))
                                  `cast`
                                (Sym (Foreign.C.Types.N:CInt[0])))
                               `cast`
                             (Sym (Linear.Affine.N:Point[0]
                                       <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } })
                            (case ds4
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                             case ds5
                                    `cast`
                                  (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                             Linear.V2.V2
                               @ Foreign.C.Types.CInt
                               nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                               nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])) } }))))
                     `cast`
                   (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                          <StreetRun.Config.Config>_R
                                                          <Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO>_R
                                                          <()>_N)
                     w)
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                    s')
                   `cast`
                 (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                   ipv } } }) -}
1b902cd5e87cda287f9b2c8252b08b9f
  $w$cupdateInput ::
    StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 2,
     Strictness: <L,1*U(U,U,U,U,U,U,1*U(U(U,U),U(U,U),U(U,U),U(U,U),A),U)><S,U>,
     Inline: [2],
     Unfolding: (\ (w :: StreetRun.State.Vars)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (SDL.Event.$wpollEvents
                         @ GHC.Types.IO
                         GHC.Base.$fApplicativeIO
                         GHC.Base.$fMonadIO1
                           `cast`
                         (forall (a :: <*>_N) (b :: <*>_N).
                          <GHC.Types.IO a>_R
                          ->_R <a -> GHC.Types.IO b>_R
                          ->_R Sym (GHC.Types.N:IO[0] <b>_R))
                         GHC.Base.$fApplicativeIO4
                           `cast`
                         (forall (a :: <*>_N). <a>_R ->_R Sym (GHC.Types.N:IO[0] <a>_R))
                         (\ @ a -> GHC.Base.id @ (GHC.Types.IO a)))
                        `cast`
                      (GHC.Types.N:IO[0] <[SDL.Event.Event]>_R)
                        w1 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    (GHC.Tuple.(),
                     case w of wild { StreetRun.State.Vars ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ->
                     StreetRun.State.Vars
                       ds1
                       ds2
                       ds3
                       ds4
                       ds5
                       ds6
                       (case ds7 of ww { StreetRun.Input.Input ww1 ww2 ww3 ww4 ww5 ->
                        case StreetRun.Load.$wstepControl
                               (GHC.Base.map
                                  @ SDL.Event.Event
                                  @ SDL.Event.EventPayload
                                  SDL.Event.eventPayload
                                  ipv1)
                               ww1
                               ww2
                               ww3
                               ww4 of ww6 { (#,,,,#) ww7 ww8 ww9 ww10 ww11 ->
                        StreetRun.Input.Input ww7 ww8 ww9 ww10 ww11 } })
                       ds8 }) #) }) -}
2b317973cef82bae6553e2cf0df25e3c
  $w$j ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case {__pkg_ccall_GC sdl2-ttf-2.0.2 GHC.Prim.State#
                                                       GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                           GHC.Prim.Int# #)}
                        w of wild { (#,#) ds1 ds2 ->
                 case GHC.Prim.narrow32Int# ds2 of wild1 {
                   DEFAULT
                   -> case {__pkg_ccall_GC sdl2-ttf-2.0.2 GHC.Prim.State#
                                                            GHC.Prim.RealWorld
                                                          -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                                GHC.Prim.Int# #)}
                             ds1 of wild2 { (#,#) ds4 ds5 ->
                      case GHC.Prim.<# (GHC.Prim.narrow32Int# ds5) 0# of lwild {
                        DEFAULT -> StreetRun.$w$j1 ds4
                        1#
                        -> case SDL.Font.initialize2 ds4 of ds6 { (#,#) ipv ipv1 ->
                           StreetRun.$w$j1 ipv } } }
                   1# -> StreetRun.$w$j1 ds1 } }) -}
6d0bc8e4ad95d5f27cc48dfac66f8156
  $w$j1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Int#
                                                       -> GHC.Prim.Word#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        22050#
                        32784##
                        2#
                        256#
                        w of wild3 { (#,#) ds9 ds10 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds10) 0# of lwild {
                   DEFAULT -> StreetRun.$w$j2 ds9
                   1#
                   -> case SDL.Mixer.openAudio1 ds9 of ds1 { (#,#) ipv ipv1 ->
                      StreetRun.$w$j2 ipv } } }) -}
a70b7741d689c3d4198c803499c2e320
  $w$j2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>, Inline: [2],
     Unfolding: (\ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                 case (SDL.Video.$wcreateWindow
                         @ GHC.Types.IO
                         (\ @ a -> GHC.Base.id @ (GHC.Types.IO a))
                         StreetRun.main6
                         StreetRun.main2)
                        `cast`
                      (GHC.Types.N:IO[0] <SDL.Internal.Types.Window>_R)
                        w of ds1 { (#,#) ipv ipv1 ->
                 case ipv1
                        `cast`
                      (SDL.Internal.Types.N:Window[0]) of ds7 { GHC.Ptr.Ptr ds8 ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                   -> GHC.Prim.Int#
                                                   -> GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Addr# #)}
                        ds8
                        -1#
                        2##
                        ipv of wild { (#,#) ds11 ds12 ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> SDL.Internal.Types.Renderer
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                     <join 2> {- Arity: 2, Strictness: <S,U><L,U(U)> -}
                   = \ (ipv2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (ipv3 :: SDL.Internal.Types.Renderer)[OneShot] ->
                     case StreetRun.Resource.loadResources1
                            ipv3
                            ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                     case System.Random.theStdGen
                            `cast`
                          (GHC.IORef.N:IORef[0] <System.Random.StdGen>_N) of wild1 { GHC.STRef.STRef var# ->
                     case GHC.Prim.readMutVar#
                            @ GHC.Prim.RealWorld
                            @ System.Random.StdGen
                            var#
                            ipv4 of ds { (#,#) ipv6 ipv7 ->
                     case (((StreetRun.Bolt_1.mainLoop
                               @ StreetRun.StreetRun
                               StreetRun.$fMonadReaderStreetRun
                               StreetRun.$fMonadStateStreetRun
                               StreetRun.$fAudioStreetRun
                               StreetRun.$fAudioSfxStreetRun
                               StreetRun.$fLoggerStreetRun
                               StreetRun.$fClockStreetRun
                               StreetRun.$fCameraControlStreetRun
                               StreetRun.$fRendererStreetRun
                               StreetRun.$fHasInputStreetRun
                               StreetRun.$fTitleStreetRun
                               StreetRun.$fPlayStreetRun
                               StreetRun.$fPauseStreetRun
                               StreetRun.$fDeathStreetRun
                               StreetRun.$fGameOverStreetRun)
                              `cast`
                            (StreetRun.N:StreetRun[0] <()>_N ; Control.Monad.Trans.Reader.N:ReaderT[0]
                                                                   <StreetRun.Config.Config>_R
                                                                   <Control.Monad.Trans.State.Lazy.StateT
                                                                      StreetRun.State.Vars
                                                                      GHC.Types.IO>_R
                                                                   <()>_N)
                              (StreetRun.Config.Config
                                 ds7 `cast` (Sym (SDL.Internal.Types.N:Window[0]))
                                 ipv3
                                 ipv5))
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <StreetRun.State.Vars>_N <GHC.Types.IO>_R <()>_N)
                             (StreetRun.State.Vars
                                StreetRun.Common.initCommonVars
                                StreetRun.Scenario.Scene'Title
                                StreetRun.Scenario.Scene'Title
                                StreetRun.Tag_func.initTitleVars
                                (StreetRun.Work.PlayVars
                                   StreetRun.Work_func.initPlayVars8
                                     `cast`
                                   (Sym (StreetRun.Types.N:Score[0]))
                                   StreetRun.Work_func.initPlayVars7
                                     `cast`
                                   (Sym (StreetRun.Types.N:Stocks[0]))
                                   StreetRun.Work_func.initPlayVars6
                                     `cast`
                                   (Sym (StreetRun.Types.N:Percent[0]))
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Seconds[0]))
                                   StreetRun.Work_func.initPlayVars5
                                   GHC.Types.True
                                   StreetRun.Work_func.initPlayVars4
                                   StreetRun.Work_func.initPlayVars3
                                   StreetRun.Work_func.initPlayVars1
                                   StreetRun.Work_func.initPlayVars5
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Distance[0]))
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Distance[0]))
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Distance[0]))
                                   StreetRun.Work_func.initPlayVars2
                                     `cast`
                                   (Sym (StreetRun.Types.N:Distance[0]))
                                   (GHC.Types.[] @ StreetRun.Hurdle.ObstacleState)
                                   (StreetRun.Hurdle.streamOfObstacles
                                      @ System.Random.StdGen
                                      System.Random.$fRandomGenStdGen
                                      ipv7))
                                StreetRun.Out_func.initGameOverVars
                                StreetRun.Input.initInput
                                StreetRun.Camera.initCamera))
                            `cast`
                          (GHC.Types.N:IO[0] <((), StreetRun.State.Vars)>_R)
                            ipv6 of ds3 { (#,#) ipv8 ipv9 ->
                     case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                            ds8
                            ipv8 of wild2 { Unit# ds4 ->
                     case StreetRun.Resource.freeResources1
                            ipv5
                            ds4 of ds5 { (#,#) ipv10 ipv11 ->
                     case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.State#
                                                             GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State#
                                                                   GHC.Prim.RealWorld #)}
                            ipv10 of wild3 { Unit# ds6 ->
                     case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.State#
                                                             GHC.Prim.RealWorld
                                                           -> (# GHC.Prim.State#
                                                                   GHC.Prim.RealWorld #)}
                            ds6 of wild4 { Unit# ds10 ->
                     case {__pkg_ccall_GC sdl2-ttf-2.0.2 GHC.Prim.State#
                                                           GHC.Prim.RealWorld
                                                         -> (# GHC.Prim.State#
                                                                 GHC.Prim.RealWorld #)}
                            ds10 of wild5 { Unit# ds14 ->
                     case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.State#
                                                         GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                            ds14 of wild6 { Unit# ds15 ->
                     (# ds15, GHC.Tuple.() #) } } } } } } } } } }
                 } in
                 case GHC.Prim.eqAddr# ds12 __NULL of lwild {
                   DEFAULT
                   -> $j
                        ds11
                        (GHC.Ptr.Ptr @ () ds12)
                          `cast`
                        (Sym (SDL.Internal.Types.N:Renderer[0]))
                   1#
                   -> case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.State#
                                                          GHC.Prim.RealWorld
                                                        -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                              GHC.Prim.Addr# #)}
                             ds11 of wild1 { (#,#) ds13 ds14 ->
                      case {__pkg_ccall bytestring-0.10.8.2 GHC.Prim.Addr#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Word# #)}
                             ds14
                             ds13 of wild2 { (#,#) ds15 ds16 ->
                      case SDL.Video.createRenderer1
                             ds16
                             ds15
                             ds14 of ds2 { (#,#) ipv2 ipv3 ->
                      $j ipv2 ipv3 } } } } } } }) -}
39b762da0e45c22896c8693684b7670b
  $w$sadjustCamera' ::
    Linear.V2.V2 GHC.Types.Float
    -> Linear.V2.V2 GHC.Types.Float
    -> StreetRun.Config.Config
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 5,
     Strictness: <L,U(U(U),U(U))><L,U(U,U)><L,1*U(A,1*U(U),A)><L,1*U(U,U,U,U,U,U,U,A)><S,U>,
     Inline: [2],
     Unfolding: (\ (ww :: Linear.V2.V2 GHC.Types.Float)
                   (ww1 :: Linear.V2.V2 GHC.Types.Float)
                   (w :: StreetRun.Config.Config)
                   (w1 :: StreetRun.State.Vars)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 let {
                   renderer :: SDL.Internal.Types.Renderer
                   = case w of wild { StreetRun.Config.Config ds1 ds2 ds3 -> ds2 }
                 } in
                 case SDL.Video.Renderer.$wrendererScale
                        renderer of ww4 { (#,#) ww5 ww6 ->
                 case (ww6
                         (case ww1 of wild { Linear.V2.V2 a1 b1 ->
                          Linear.V2.V2
                            @ Foreign.C.Types.CFloat
                            a1 `cast` (Sym (Foreign.C.Types.N:CFloat[0]))
                            b1 `cast` (Sym (Foreign.C.Types.N:CFloat[0])) }))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 case SDL.Video.Renderer.$wrendererViewport
                        renderer of ww2 { (#,#) ww3 ww7 ->
                 case (ww7
                         (GHC.Maybe.Just
                            @ (SDL.Video.Renderer.Rectangle Foreign.C.Types.CInt)
                            (SDL.Video.Renderer.Rectangle
                               @ Foreign.C.Types.CInt
                               (case ww of wild { Linear.V2.V2 x y ->
                                case x of wild1 { GHC.Types.F# y1 ->
                                case y of wild2 { GHC.Types.F# y2 ->
                                case GHC.Float.$w$cproperFraction1
                                       @ Foreign.C.Types.CInt
                                       Foreign.C.Types.$fIntegralCInt
                                       (GHC.Prim.minusFloat# 640.0# y1) of ww8 { (#,#) ww9 ww10 ->
                                case ww9
                                       `cast`
                                     (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv2 ->
                                case GHC.Float.$w$cproperFraction1
                                       @ Foreign.C.Types.CInt
                                       Foreign.C.Types.$fIntegralCInt
                                       (GHC.Prim.minusFloat# 640.0# y2) of ww11 { (#,#) ww12 ww13 ->
                                case ww12
                                       `cast`
                                     (Foreign.C.Types.N:CInt[0]) of nt1 { GHC.Int.I32# ipv3 ->
                                (Linear.V2.V2
                                   @ Foreign.C.Types.CInt
                                   nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                   nt1 `cast` (Sym (Foreign.C.Types.N:CInt[0])))
                                  `cast`
                                (Sym (Linear.Affine.N:Point[0]
                                          <Linear.V2.V2>_R) <Foreign.C.Types.CInt>_N) } } } } } } })
                               StreetRun.Picture.adjustCamera'_dim)))
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case SDL.Video.Renderer.$wrendererClipRect
                        renderer of ww8 { (#,#) ww9 ww10 ->
                 case (ww10 StreetRun.Picture.adjustCamera'1)
                        `cast`
                      (GHC.Types.N:IO[0] <()>_R)
                        ipv2 of ds3 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    (ipv5,
                     case w1 of wild { StreetRun.State.Vars ds ds4 ds5 ds6 ds7 ds8 ds9 ds10 ->
                     StreetRun.State.Vars
                       ds
                       ds4
                       ds5
                       ds6
                       ds7
                       ds8
                       ds9
                       (StreetRun.Camera.Camera ww ww1) }) #) } } } } } }) -}
56a72448a3a8d604b78f7970248662ed
  $w$splayGameMusic' ::
    GHC.Prim.Addr#
    -> StreetRun.State.Vars
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          ((), StreetRun.State.Vars) #)
  {- Arity: 3, Strictness: <S,U><L,U><S,U>, Inline: [2],
     Unfolding: (\ (ww :: GHC.Prim.Addr#)
                   (w :: StreetRun.State.Vars)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-mixer-1.1.0 GHC.Prim.Addr#
                                                       -> GHC.Prim.Int#
                                                       -> GHC.Prim.State# GHC.Prim.RealWorld
                                                       -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             GHC.Prim.Int# #)}
                        ww
                        -1#
                        w1 of wild2 { (#,#) ds6 ds7 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds7) 0# of lwild {
                   DEFAULT -> (# ds6, (GHC.Tuple.(), w) #)
                   1#
                   -> case SDL.Mixer.playMusic1 ds6 of ds1 { (#,#) ipv ipv1 ->
                      (# ipv, (GHC.Tuple.(), w) #) } } }) -}
ba46176ec69d12880f5348a25544d176
  type role StreetRun nominal
  newtype StreetRun a
    = StreetRun (Control.Monad.Trans.Reader.ReaderT
                   StreetRun.Config.Config
                   (Control.Monad.Trans.State.Lazy.StateT
                      StreetRun.State.Vars GHC.Types.IO)
                   a)
67697b7a5cf0f53bf298290174de6622
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                StreetRun.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
2eee8cf282a39959d489f8305891978e
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case {__pkg_ccall_GC sdl2-2.4.1.0 GHC.Prim.Word#
                                                   -> GHC.Prim.State# GHC.Prim.RealWorld
                                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                         GHC.Prim.Int# #)}
                        48##
                        s of wild { (#,#) ds3 ds4 ->
                 case GHC.Prim.<# (GHC.Prim.narrow32Int# ds4) 0# of lwild {
                   DEFAULT -> StreetRun.$w$j ds3
                   1#
                   -> case SDL.Init.initialize1 ds3 of ds1 { (#,#) ipv ipv1 ->
                      StreetRun.$w$j ipv } } }) -}
240bdba68cda377a4fb47ad052205fb7
  main2 :: SDL.Video.WindowConfig
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (SDL.Video.WindowConfig
                   GHC.Types.True
                   GHC.Types.False
                   GHC.Types.False
                   SDL.Video.Windowed
                   (GHC.Maybe.Nothing @ SDL.Video.OpenGL.OpenGLConfig)
                   SDL.Video.Wherever
                   GHC.Types.False
                   StreetRun.main3
                   GHC.Types.True) -}
5c2eacf1338b5a591fa04b748c08f25c
  main3 :: Linear.V2.V2 Foreign.C.Types.CInt
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Linear.V2.V2
                   @ Foreign.C.Types.CInt
                   StreetRun.main5 `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                   StreetRun.main4 `cast` (Sym (Foreign.C.Types.N:CInt[0]))) -}
e1d4dd6746d7d590207e14764452d5ce
  main4 :: GHC.Int.Int32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I32# 720#) -}
c288cf6171528bca5ac1d1694f183a03
  main5 :: GHC.Int.Int32
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Int.I32# 1280#) -}
15efe5072930a694f57b4e21fb4f1854
  main6 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# StreetRun.main7) -}
36facfb4122001d08afb26a0506561f4
  main7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Street Runner"#) -}
instance GHC.Base.Applicative [StreetRun.StreetRun]
  = StreetRun.$fApplicativeStreetRun
instance StreetRun.Sound_effects.AudioSfx [StreetRun.StreetRun]
  = StreetRun.$fAudioSfxStreetRun
instance StreetRun.Audio.Audio [StreetRun.StreetRun]
  = StreetRun.$fAudioStreetRun
instance StreetRun.Picture.CameraControl [StreetRun.StreetRun]
  = StreetRun.$fCameraControlStreetRun
instance StreetRun.Clock.Clock [StreetRun.StreetRun]
  = StreetRun.$fClockStreetRun
instance StreetRun.Death.Death [StreetRun.StreetRun]
  = StreetRun.$fDeathStreetRun
instance GHC.Base.Functor [StreetRun.StreetRun]
  = StreetRun.$fFunctorStreetRun
instance StreetRun.GameOver.GameOver [StreetRun.StreetRun]
  = StreetRun.$fGameOverStreetRun
instance StreetRun.HUD.HUD [StreetRun.StreetRun]
  = StreetRun.$fHUDStreetRun
instance StreetRun.Load.HasInput [StreetRun.StreetRun]
  = StreetRun.$fHasInputStreetRun
instance StreetRun.Logger.Logger [StreetRun.StreetRun]
  = StreetRun.$fLoggerStreetRun
instance Control.Monad.Catch.MonadCatch [StreetRun.StreetRun]
  = StreetRun.$fMonadCatchStreetRun
instance Control.Monad.IO.Class.MonadIO [StreetRun.StreetRun]
  = StreetRun.$fMonadIOStreetRun
instance Control.Monad.Reader.Class.MonadReader [StreetRun.Config.Config,
                                                 StreetRun.StreetRun]
  = StreetRun.$fMonadReaderStreetRun
instance Control.Monad.State.Class.MonadState [StreetRun.State.Vars,
                                               StreetRun.StreetRun]
  = StreetRun.$fMonadStateStreetRun
instance GHC.Base.Monad [StreetRun.StreetRun]
  = StreetRun.$fMonadStreetRun
instance Control.Monad.Catch.MonadThrow [StreetRun.StreetRun]
  = StreetRun.$fMonadThrowStreetRun
instance StreetRun.Pause.Pause [StreetRun.StreetRun]
  = StreetRun.$fPauseStreetRun
instance StreetRun.Play.Play [StreetRun.StreetRun]
  = StreetRun.$fPlayStreetRun
instance StreetRun.Renderer.Renderer [StreetRun.StreetRun]
  = StreetRun.$fRendererStreetRun
instance StreetRun.SDLInput.SDLInput [StreetRun.StreetRun]
  = StreetRun.$fSDLInputStreetRun
instance StreetRun.SDLRenderer.SDLRenderer [StreetRun.StreetRun]
  = StreetRun.$fSDLRendererStreetRun
instance StreetRun.Scene.SceneManager [StreetRun.StreetRun]
  = StreetRun.$fSceneManagerStreetRun
instance StreetRun.Title.Title [StreetRun.StreetRun]
  = StreetRun.$fTitleStreetRun
"SPEC/StreetRun $fApplicativeReaderT_$c*> @ (StateT Vars IO) _" [orphan] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c*> @ (Control.Monad.Trans.State.Lazy.StateT
                                                            StreetRun.State.Vars GHC.Types.IO)
                                                       @ r
                                                       $dApplicative
  = StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c*> @ r
"SPEC/StreetRun $fApplicativeReaderT_$c<* @ (StateT Vars IO) _" [orphan] forall @ r
                                                                                ($dApplicative :: GHC.Base.Applicative
                                                                                                    (Control.Monad.Trans.State.Lazy.StateT
                                                                                                       StreetRun.State.Vars
                                                                                                       GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<* @ (Control.Monad.Trans.State.Lazy.StateT
                                                            StreetRun.State.Vars GHC.Types.IO)
                                                       @ r
                                                       $dApplicative
  = StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c<* @ r
"SPEC/StreetRun $fApplicativeReaderT_$c<*> @ (StateT Vars IO) _" [orphan] forall @ r
                                                                                 ($dApplicative :: GHC.Base.Applicative
                                                                                                     (Control.Monad.Trans.State.Lazy.StateT
                                                                                                        StreetRun.State.Vars
                                                                                                        GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$c<*> @ (Control.Monad.Trans.State.Lazy.StateT
                                                             StreetRun.State.Vars GHC.Types.IO)
                                                        @ r
                                                        $dApplicative
  = StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$c<*> @ r
"SPEC/StreetRun $fApplicativeReaderT_$cliftA2 @ (StateT Vars IO) _" [orphan] forall @ r
                                                                                    ($dApplicative :: GHC.Base.Applicative
                                                                                                        (Control.Monad.Trans.State.Lazy.StateT
                                                                                                           StreetRun.State.Vars
                                                                                                           GHC.Types.IO))
  Control.Monad.Trans.Reader.$fApplicativeReaderT_$cliftA2 @ (Control.Monad.Trans.State.Lazy.StateT
                                                                StreetRun.State.Vars GHC.Types.IO)
                                                           @ r
                                                           $dApplicative
  = StreetRun.$fApplicativeStreetRun_$s$fApplicativeReaderT_$cliftA2
      @ r
"SPEC/StreetRun $fFunctorReaderT_$c<$ @ (StateT Vars IO) _" [orphan] forall @ r
                                                                            ($dFunctor :: GHC.Base.Functor
                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                               StreetRun.State.Vars
                                                                                               GHC.Types.IO))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$c<$ @ (Control.Monad.Trans.State.Lazy.StateT
                                                        StreetRun.State.Vars GHC.Types.IO)
                                                   @ r
                                                   $dFunctor
  = StreetRun.$fFunctorStreetRun_$s$fFunctorReaderT_$c<$ @ r
"SPEC/StreetRun $fFunctorReaderT_$cfmap @ (StateT Vars IO) _" [orphan] forall @ r
                                                                              ($dFunctor :: GHC.Base.Functor
                                                                                              (Control.Monad.Trans.State.Lazy.StateT
                                                                                                 StreetRun.State.Vars
                                                                                                 GHC.Types.IO))
  Control.Monad.Trans.Reader.$fFunctorReaderT_$cfmap @ (Control.Monad.Trans.State.Lazy.StateT
                                                          StreetRun.State.Vars GHC.Types.IO)
                                                     @ r
                                                     $dFunctor
  = StreetRun.$fFunctorStreetRun_$s$fFunctorReaderT_$cfmap @ r
"SPEC/StreetRun $fMonadReaderT_$c>>= @ (StateT Vars IO) _" [orphan] forall @ r
                                                                           ($dMonad :: GHC.Base.Monad
                                                                                         (Control.Monad.Trans.State.Lazy.StateT
                                                                                            StreetRun.State.Vars
                                                                                            GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$c>>= @ (Control.Monad.Trans.State.Lazy.StateT
                                                       StreetRun.State.Vars GHC.Types.IO)
                                                  @ r
                                                  $dMonad
  = StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$c>>= @ r
"SPEC/StreetRun $fMonadReaderT_$cfail @ (StateT Vars IO) _" [orphan] forall @ r
                                                                            ($dMonad :: GHC.Base.Monad
                                                                                          (Control.Monad.Trans.State.Lazy.StateT
                                                                                             StreetRun.State.Vars
                                                                                             GHC.Types.IO))
  Control.Monad.Trans.Reader.$fMonadReaderT_$cfail @ (Control.Monad.Trans.State.Lazy.StateT
                                                        StreetRun.State.Vars GHC.Types.IO)
                                                   @ r
                                                   $dMonad
  = StreetRun.$fMonadStreetRun_$s$fMonadReaderT_$cfail @ r
"SPEC/StreetRun addSfxs' @ Vars @ StreetRun" [2] forall (w1 :: Control.Monad.State.Class.MonadState
                                                                 StreetRun.State.Vars
                                                                 StreetRun.StreetRun)
                                                        (w :: StreetRun.Common.HasCommonVars
                                                                StreetRun.State.Vars)
  StreetRun.Sound_effects.addSfxs' @ StreetRun.State.Vars
                                   @ StreetRun.StreetRun
                                   w
                                   w1
  = StreetRun.$saddSfxs'
"SPEC/StreetRun adjustCamera' @ StreetRun" [2] forall (w2 :: Control.Monad.State.Class.MonadState
                                                               StreetRun.State.Vars
                                                               StreetRun.StreetRun)
                                                      (w1 :: Control.Monad.Reader.Class.MonadReader
                                                               StreetRun.Config.Config
                                                               StreetRun.StreetRun)
                                                      (w :: Control.Monad.IO.Class.MonadIO
                                                              StreetRun.StreetRun)
  StreetRun.Picture.adjustCamera' @ StreetRun.StreetRun w w1 w2
  = StreetRun.$sadjustCamera'
"SPEC/StreetRun clearRenderer' @ StreetRun" [2] forall (w :: Control.Monad.IO.Class.MonadIO
                                                               StreetRun.StreetRun)
  StreetRun.SDLRenderer.clearRenderer' @ StreetRun.StreetRun w
  = StreetRun.$sclearRenderer'
"SPEC/StreetRun clearScreen' @ StreetRun" [2] forall (w1 :: Control.Monad.Reader.Class.MonadReader
                                                              StreetRun.Config.Config
                                                              StreetRun.StreetRun)
                                                     (w :: StreetRun.SDLRenderer.SDLRenderer
                                                             StreetRun.StreetRun)
  StreetRun.Renderer.clearScreen' @ StreetRun.StreetRun w w1
  = StreetRun.$sclearScreen'
"SPEC/StreetRun clearSfx' @ Vars @ StreetRun" [2] forall (w1 :: Control.Monad.State.Class.MonadState
                                                                  StreetRun.State.Vars
                                                                  StreetRun.StreetRun)
                                                         (w :: StreetRun.Common.HasCommonVars
                                                                 StreetRun.State.Vars)
  StreetRun.Sound_effects.clearSfx' @ StreetRun.State.Vars
                                    @ StreetRun.StreetRun
                                    w
                                    w1
  = StreetRun.$sclearSfx'
"SPEC/StreetRun drawHiscore' @ StreetRun @ Vars" [2] forall (w2 :: StreetRun.Common.HasCommonVars
                                                                     StreetRun.State.Vars)
                                                            (w1 :: Control.Monad.State.Class.MonadState
                                                                     StreetRun.State.Vars
                                                                     StreetRun.StreetRun)
                                                            (w :: StreetRun.Renderer.Renderer
                                                                    StreetRun.StreetRun)
  StreetRun.HUD.drawHiscore' @ StreetRun.StreetRun
                             @ StreetRun.State.Vars
                             w
                             w1
                             w2
  = StreetRun.$sdrawHiscore'
"SPEC/StreetRun drawScore' @ StreetRun @ Vars" [2] forall (w2 :: StreetRun.Work_func.HasPlayVars
                                                                   StreetRun.State.Vars)
                                                          (w1 :: Control.Monad.State.Class.MonadState
                                                                   StreetRun.State.Vars
                                                                   StreetRun.StreetRun)
                                                          (w :: StreetRun.Renderer.Renderer
                                                                  StreetRun.StreetRun)
  StreetRun.HUD.drawScore' @ StreetRun.StreetRun
                           @ StreetRun.State.Vars
                           w
                           w1
                           w2
  = StreetRun.$sdrawScore'
"SPEC/StreetRun drawScreen' @ StreetRun" [2] forall (w1 :: Control.Monad.Reader.Class.MonadReader
                                                             StreetRun.Config.Config
                                                             StreetRun.StreetRun)
                                                    (w :: StreetRun.SDLRenderer.SDLRenderer
                                                            StreetRun.StreetRun)
  StreetRun.Renderer.drawScreen' @ StreetRun.StreetRun w w1
  = StreetRun.$sdrawScreen'
"SPEC/StreetRun getInput' @ StreetRun" [2] forall (w :: Control.Monad.State.Class.MonadState
                                                          StreetRun.State.Vars StreetRun.StreetRun)
  StreetRun.Load.getInput' @ StreetRun.StreetRun w
  = StreetRun.$sgetInput'
"SPEC/StreetRun haltMusic @ StreetRun" [2] forall (w :: Control.Monad.IO.Class.MonadIO
                                                          StreetRun.StreetRun)
  SDL.Mixer.haltMusic @ StreetRun.StreetRun w = StreetRun.$shaltMusic
"SPEC/StreetRun playGameMusic' @ StreetRun" [2] forall (w1 :: Control.Monad.IO.Class.MonadIO
                                                                StreetRun.StreetRun)
                                                       (w :: Control.Monad.Reader.Class.MonadReader
                                                               StreetRun.Config.Config
                                                               StreetRun.StreetRun)
  StreetRun.Audio.playGameMusic' @ StreetRun.StreetRun w w1
  = StreetRun.$splayGameMusic'
"SPEC/StreetRun reader @ (StateT Vars IO) _ _" [orphan] forall @ r
                                                               @ a
                                                               ($dMonad :: GHC.Base.Monad
                                                                             (Control.Monad.Trans.State.Lazy.StateT
                                                                                StreetRun.State.Vars
                                                                                GHC.Types.IO))
  Control.Monad.Trans.Reader.reader @ (Control.Monad.Trans.State.Lazy.StateT
                                         StreetRun.State.Vars GHC.Types.IO)
                                    @ r
                                    @ a
                                    $dMonad
  = StreetRun.$fRendererStreetRun_$sreader @ r @ a
"SPEC/StreetRun renderPresent @ StreetRun" forall ($dMonadIO :: Control.Monad.IO.Class.MonadIO
                                                                  StreetRun.StreetRun)
  SDL.Raw.Video.renderPresent @ StreetRun.StreetRun $dMonadIO
  = StreetRun.$fSDLRendererStreetRun_$srenderPresent
"SPEC/StreetRun titleStep' @ Vars @ StreetRun" [2] forall (w8 :: StreetRun.Sound_effects.AudioSfx
                                                                   StreetRun.StreetRun)
                                                          (w7 :: StreetRun.HUD.HUD
                                                                   StreetRun.StreetRun)
                                                          (w6 :: StreetRun.Scene.SceneManager
                                                                   StreetRun.StreetRun)
                                                          (w5 :: StreetRun.Load.HasInput
                                                                   StreetRun.StreetRun)
                                                          (w4 :: StreetRun.Renderer.Renderer
                                                                   StreetRun.StreetRun)
                                                          (w3 :: Control.Monad.State.Class.MonadState
                                                                   StreetRun.State.Vars
                                                                   StreetRun.StreetRun)
                                                          (w2 :: Control.Monad.Reader.Class.MonadReader
                                                                   StreetRun.Config.Config
                                                                   StreetRun.StreetRun)
                                                          (w1 :: StreetRun.Common.HasCommonVars
                                                                   StreetRun.State.Vars)
                                                          (w :: StreetRun.Tag_func.HasTitleVars
                                                                  StreetRun.State.Vars)
  StreetRun.Title.titleStep' @ StreetRun.State.Vars
                             @ StreetRun.StreetRun
                             w
                             w1
                             w2
                             w3
                             w4
                             w5
                             w6
                             w7
                             w8
  = StreetRun.$stitleStep'
"SPEC/StreetRun updateInput' @ StreetRun" [2] forall (w1 :: StreetRun.SDLInput.SDLInput
                                                              StreetRun.StreetRun)
                                                     (w :: StreetRun.Load.HasInput
                                                             StreetRun.StreetRun)
  StreetRun.Load.updateInput' @ StreetRun.StreetRun w w1
  = StreetRun.$supdateInput'
trusted: none
require own pkg trusted: False
module header:
  Nothing
declaration docs:
arg docs:

